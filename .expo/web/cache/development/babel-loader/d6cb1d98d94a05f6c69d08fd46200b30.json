{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL PC\\\\Downloads\\\\GroovePacker\\\\src\\\\components\\\\scanpack\\\\click_scan_confirmation_pop_up.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport styles from \"../../style/scanpack\";\nimport globalStyles from \"../../style/global\";\nimport cross from \"../../../assets/close_black.png\";\n\nvar ClickScanConfirmationPopUp = function (_Component) {\n  _inherits(ClickScanConfirmationPopUp, _Component);\n\n  var _super = _createSuper(ClickScanConfirmationPopUp);\n\n  function ClickScanConfirmationPopUp(props) {\n    var _this;\n\n    _classCallCheck(this, ClickScanConfirmationPopUp);\n\n    _this = _super.call(this, props);\n    _this.typeScanFocus = React.createRef();\n    return _this;\n  }\n\n  _createClass(ClickScanConfirmationPopUp, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.typeScanContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.typeScanBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: globalStyles.flexDirectionRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.scanCountText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }\n      }, \"This is a note to packer. Confirmation is reqiuired for this note.\"), React.createElement(TouchableOpacity, {\n        onPress: this.props.closeAlert,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }\n      }, React.createElement(Image, {\n        style: {\n          height: 30,\n          width: 30\n        },\n        source: cross,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }\n      }))), React.createElement(View, {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }\n      }, React.createElement(TextInput, {\n        value: this.props.clickScanConfirmInput,\n        onChangeText: this.props.handleClickScanConfirmInput,\n        placeholder: \"Please acknowledge with your confirmation code to continue\",\n        autoFocus: true,\n        ref: this.props.serialFocus,\n        onSubmitEditing: this.props.clickScanConfirmFun,\n        style: styles.typeScanCountInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }), this.props.errorMessageClickScanConfirmation && React.createElement(Text, {\n        style: {\n          padding: 5,\n          fontSize: 16,\n          color: \"#000\",\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }\n      }, \"Enter or scan your confirmation code to continue\"))));\n    }\n  }]);\n\n  return ClickScanConfirmationPopUp;\n}(Component);\n\nexport { ClickScanConfirmationPopUp as default };","map":{"version":3,"sources":["C:/Users/DELL PC/Downloads/GroovePacker/src/components/scanpack/click_scan_confirmation_pop_up.js"],"names":["React","Component","useRef","styles","globalStyles","cross","ClickScanConfirmationPopUp","props","typeScanFocus","createRef","typeScanContainer","typeScanBox","flexDirectionRow","scanCountText","closeAlert","height","width","display","alignItems","clickScanConfirmInput","handleClickScanConfirmInput","serialFocus","clickScanConfirmFun","typeScanCountInput","errorMessageClickScanConfirmation","padding","fontSize","color","textAlign"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,MAA5B,QAA0C,OAA1C;;;;;;;AAEA,OAAOC,MAAP;AACA,OAAOC,YAAP;AACA,OAAOC,KAAP;;IAEqBC,0B;;;;;AACnB,sCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,aAAL,GAAqBR,KAAK,CAACS,SAAN,EAArB;AAFiB;AAGlB;;;;WAED,8BAAoB,CAEnB;;;WAED,kBAAQ;AACN,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,MAAM,CAACO,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEP,MAAM,CAACQ,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEP,YAAY,CAACQ,gBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAET,MAAM,CAACU,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EADF,EAIE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKN,KAAL,CAAWO,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAE,EAAT;AAAcC,UAAAA,KAAK,EAAE;AAArB,SAAd;AAAwC,QAAA,MAAM,EAAEX,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJF,CADF,EASE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACY,UAAAA,OAAO,EAAE,MAAV;AAAmBC,UAAAA,UAAU,EAAE;AAA/B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWY,qBAA7B;AACW,QAAA,YAAY,EAAE,KAAKZ,KAAL,CAAWa,2BADpC;AAEW,QAAA,WAAW,EAAC,4DAFvB;AAGW,QAAA,SAAS,EAAE,IAHtB;AAIW,QAAA,GAAG,EAAE,KAAKb,KAAL,CAAWc,WAJ3B;AAKW,QAAA,eAAe,EAAE,KAAKd,KAAL,CAAWe,mBALvC;AAMW,QAAA,KAAK,EAAEnB,MAAM,CAACoB,kBANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAUI,KAAKhB,KAAL,CAAWiB,iCAAX,IACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,OAAO,EAAE,CAAV;AAAcC,UAAAA,QAAQ,EAAE,EAAxB;AAA6BC,UAAAA,KAAK,EAAE,MAApC;AAA6CC,UAAAA,SAAS,EAAE;AAAxD,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAXJ,CATF,CADF,CADF;AAoCD;;;;EA/CqD3B,S;;SAAnCK,0B","sourcesContent":["import React, { Component , useRef } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, ScrollView , Image } from 'react-native';\r\nimport styles from '../../style/scanpack';\r\nimport globalStyles from '../../style/global';\r\nimport cross from \"../../../assets/close_black.png\";\r\n\r\nexport default class ClickScanConfirmationPopUp extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.typeScanFocus = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    // this.typeScanFocus.current.focus()\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <View style={styles.typeScanContainer}>\r\n        <View style={styles.typeScanBox}>\r\n          <View style={globalStyles.flexDirectionRow}>\r\n            <Text style={styles.scanCountText}>\r\n              This is a note to packer. Confirmation is reqiuired for this note.\r\n            </Text>\r\n            <TouchableOpacity onPress={this.props.closeAlert}>\r\n              <Image style={{height: 30 , width: 30}} source={cross} /> \r\n            </TouchableOpacity>\r\n          </View>\r\n          <View style={{display: \"flex\" , alignItems: \"center\"}}>\r\n            <TextInput value={this.props.clickScanConfirmInput}\r\n                       onChangeText={this.props.handleClickScanConfirmInput}\r\n                       placeholder=\"Please acknowledge with your confirmation code to continue\"\r\n                       autoFocus={true}\r\n                       ref={this.props.serialFocus}\r\n                       onSubmitEditing={this.props.clickScanConfirmFun}\r\n                       style={styles.typeScanCountInput}>\r\n            </TextInput>\r\n            {\r\n              this.props.errorMessageClickScanConfirmation &&\r\n              <Text style={{padding: 5 , fontSize: 16 , color: \"#000\" , textAlign: \"center\"}}>\r\n                Enter or scan your confirmation code to continue\r\n              </Text>\r\n            }\r\n            {/*<TouchableOpacity onPress={this.props.clickScanConfirmFun}\r\n                              style={styles.scanCountSubmitBtnBox}>\r\n              <Text style={styles.scanCountSubmitBtn}>\r\n                Submit\r\n              </Text>\r\n            </TouchableOpacity>*/}\r\n          </View>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}