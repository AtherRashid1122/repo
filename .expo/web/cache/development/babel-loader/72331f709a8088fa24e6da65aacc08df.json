{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL PC\\\\Downloads\\\\GroovePacker\\\\src\\\\components\\\\scanpack\\\\productConfirmationCheck.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport styles from \"../../style/scanpack\";\nimport globalStyles from \"../../style/global\";\nimport cross from \"../../../assets/close_black.png\";\nimport HTML from 'react-native-render-html';\nimport HTMLView from 'react-native-htmlview';\nimport { WebView } from 'react-native-webview';\n\nvar ProductConfirmationCheck = function (_Component) {\n  _inherits(ProductConfirmationCheck, _Component);\n\n  var _super = _createSuper(ProductConfirmationCheck);\n\n  function ProductConfirmationCheck(props) {\n    var _this;\n\n    _classCallCheck(this, ProductConfirmationCheck);\n\n    _this = _super.call(this, props);\n    _this.typeScanFocus = React.createRef();\n    return _this;\n  }\n\n  _createClass(ProductConfirmationCheck, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.typeScanFocus.current.focus();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var htmlProps = this.props.instruction.instruction.replace(\"\", '');\n      return React.createElement(View, {\n        style: styles.typeScanContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.typeScanBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: globalStyles.flexDirectionRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.scanCountText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      }, \"Please acknowledge with your confirmation code to continue\"), React.createElement(TouchableOpacity, {\n        onPress: this.props.closeAlert,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, React.createElement(Image, {\n        style: {\n          height: 30,\n          width: 30\n        },\n        source: cross,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }\n      }))), React.createElement(HTML, {\n        html: \"\" + htmlProps,\n        imagesMaxWidth: Dimensions.get('window').width,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }\n      }), React.createElement(View, {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }, React.createElement(TextInput, {\n        value: this.props.ProductConfirmationCheckInput,\n        onChangeText: this.props.handleProductConfirmationCheckInput,\n        placeholder: \"Enter Confirmation Code to Continue\",\n        autoFocus: true,\n        ref: this.typeScanFocus,\n        onSubmitEditing: this.props.ProductConfirmationCheckFun,\n        style: styles.typeScanCountInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }\n      }), this.props.errorMessageClickScanConfirmation && React.createElement(Text, {\n        style: {\n          padding: 5,\n          fontSize: 16,\n          color: \"#000\",\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }\n      }, \"Enter or scan your confirmation code to continue\"))));\n    }\n  }]);\n\n  return ProductConfirmationCheck;\n}(Component);\n\nexport { ProductConfirmationCheck as default };","map":{"version":3,"sources":["C:/Users/DELL PC/Downloads/GroovePacker/src/components/scanpack/productConfirmationCheck.js"],"names":["React","Component","useRef","styles","globalStyles","cross","HTML","HTMLView","WebView","ProductConfirmationCheck","props","typeScanFocus","createRef","current","focus","htmlProps","instruction","replace","typeScanContainer","typeScanBox","flexDirectionRow","scanCountText","closeAlert","height","width","Dimensions","get","display","alignItems","ProductConfirmationCheckInput","handleProductConfirmationCheckInput","ProductConfirmationCheckFun","typeScanCountInput","errorMessageClickScanConfirmation","padding","fontSize","color","textAlign"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,MAA5B,QAA0C,OAA1C;;;;;;;;AAEA,OAAOC,MAAP;AACA,OAAOC,YAAP;AACA,OAAOC,KAAP;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,OAAT,QAAwB,sBAAxB;;IAEqBC,wB;;;;;AACnB,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,aAAL,GAAqBX,KAAK,CAACY,SAAN,EAArB;AAFiB;AAGlB;;;;WAED,8BAAoB;AAClB,WAAKD,aAAL,CAAmBE,OAAnB,CAA2BC,KAA3B;AACD;;;WAED,kBAAQ;AACN,UAAIC,SAAS,GAAG,KAAKL,KAAL,CAAWM,WAAX,CAAuBA,WAAvB,CAAmCC,OAAnC,CAA2C,EAA3C,EAAgD,EAAhD,CAAhB;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEd,MAAM,CAACe,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEf,MAAM,CAACgB,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEf,YAAY,CAACgB,gBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEjB,MAAM,CAACkB,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEADF,EAIE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKX,KAAL,CAAWY,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAE,EAAT;AAAcC,UAAAA,KAAK,EAAE;AAArB,SAAd;AAAwC,QAAA,MAAM,EAAEnB,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJF,CADF,EASE,oBAAC,IAAD;AAAM,QAAA,IAAI,OAAKU,SAAf;AAA4B,QAAA,cAAc,EAAEU,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAUE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACG,UAAAA,OAAO,EAAE,MAAV;AAAmBC,UAAAA,UAAU,EAAE;AAA/B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWmB,6BAA7B;AACW,QAAA,YAAY,EAAE,KAAKnB,KAAL,CAAWoB,mCADpC;AAEW,QAAA,WAAW,EAAC,qCAFvB;AAGW,QAAA,SAAS,EAAE,IAHtB;AAIW,QAAA,GAAG,EAAE,KAAKnB,aAJrB;AAKW,QAAA,eAAe,EAAE,KAAKD,KAAL,CAAWqB,2BALvC;AAMW,QAAA,KAAK,EAAE5B,MAAM,CAAC6B,kBANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAUI,KAAKtB,KAAL,CAAWuB,iCAAX,IACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,OAAO,EAAE,CAAV;AAAcC,UAAAA,QAAQ,EAAE,EAAxB;AAA6BC,UAAAA,KAAK,EAAE,MAApC;AAA6CC,UAAAA,SAAS,EAAE;AAAxD,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAXJ,CAVF,CADF,CADF;AAqCD;;;;EAjDmDpC,S;;SAAjCQ,wB","sourcesContent":["import React, { Component , useRef } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, ScrollView, Dimensions , Image } from 'react-native';\nimport styles from '../../style/scanpack';\nimport globalStyles from '../../style/global';\nimport cross from \"../../../assets/close_black.png\";\nimport HTML from 'react-native-render-html';\nimport HTMLView from 'react-native-htmlview';\nimport { WebView } from 'react-native-webview';\n\nexport default class ProductConfirmationCheck extends Component{\n  constructor(props) {\n    super(props);\n    this.typeScanFocus = React.createRef();\n  }\n\n  componentDidUpdate(){\n    this.typeScanFocus.current.focus()\n  }\n\n  render(){\n    let htmlProps = this.props.instruction.instruction.replace(\"\" , '')\n    return (\n      <View style={styles.typeScanContainer}>\n        <View style={styles.typeScanBox}>\n          <View style={globalStyles.flexDirectionRow}>\n            <Text style={styles.scanCountText}>\n              Please acknowledge with your confirmation code to continue\n            </Text>\n            <TouchableOpacity onPress={this.props.closeAlert}>\n              <Image style={{height: 30 , width: 30}} source={cross} /> \n            </TouchableOpacity>\n          </View>\n          <HTML html={`${htmlProps}`} imagesMaxWidth={Dimensions.get('window').width} />\n          <View style={{display: \"flex\" , alignItems: \"center\"}}>\n            <TextInput value={this.props.ProductConfirmationCheckInput}\n                       onChangeText={this.props.handleProductConfirmationCheckInput}\n                       placeholder=\"Enter Confirmation Code to Continue\"\n                       autoFocus={true}\n                       ref={this.typeScanFocus}\n                       onSubmitEditing={this.props.ProductConfirmationCheckFun}\n                       style={styles.typeScanCountInput}>\n            </TextInput>\n            {\n              this.props.errorMessageClickScanConfirmation &&\n              <Text style={{padding: 5 , fontSize: 16 , color: \"#000\" , textAlign: \"center\"}}>\n                Enter or scan your confirmation code to continue\n              </Text>\n            }\n            {/*<TouchableOpacity onPress={this.props.clickScanConfirmFun}\n                              style={styles.scanCountSubmitBtnBox}>\n              <Text style={styles.scanCountSubmitBtn}>\n                Submit\n              </Text>\n            </TouchableOpacity>*/}\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}