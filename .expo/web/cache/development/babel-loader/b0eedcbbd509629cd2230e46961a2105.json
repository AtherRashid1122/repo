{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL PC\\\\Downloads\\\\GroovePacker\\\\src\\\\components\\\\scanpack\\\\scanpack_item.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Audio } from 'expo-av';\nimport { connect } from 'react-redux';\nimport Swiper from 'react-native-swiper/src';\nimport NetInfo from \"@react-native-community/netinfo\";\nimport completeSound from \"../../../assets/sounds/_order_complete.mp3\";\nimport scanSuccessSound from \"../../../assets/sounds/scan_success_pop.mp3\";\nimport scanFailSound from \"../../../assets/sounds/scan_fail_shorter.mp3\";\nimport notReady from \"../../../assets/sounds/not_ready.mp3\";\nimport closeButton from \"../../../assets/closeicon.png\";\nimport { SearchScanpackOrder } from \"../../actions/scanpackAction\";\nimport { GetOrderList, SearchOrder } from \"../../actions/orderActions\";\nimport { updateProductList, updateProductAlias } from \"../../actions/productAction\";\nimport { GetBothSettings } from \"../../actions/userAction\";\nimport { GetOrderDetail } from \"../../actions/orderActions\";\nimport { SetItem, GetItem } from \"../../actions/updateAsyncAction\";\nimport { SubmitLog } from \"../../actions/saveLogAction\";\nimport styles from \"../../style/scanpack\";\nimport UnscannedItems from \"./unscanned_items\";\nimport ScannedItems from \"./scanned_items\";\nimport NextItems from \"./next_items\";\nimport Notes from \"./internal_notes\";\nimport Alert from \"./alert\";\nimport AddBarcode from \"./addBarcode\";\nimport PopUpModel from \"./pop_up_model\";\nimport ShipmentRecord from \"./shipmentsRecord\";\nimport TypeScanAlert from \"./type_scan_alert\";\nimport ResponseView from \"./response_view\";\nimport LogView from \"./log\";\nimport SerialRecord from \"./serial_record\";\nimport ClickScanConfirmationPopUp from \"./click_scan_confirmation_pop_up\";\nimport ProductConfirmationCheck from \"./productConfirmationCheck\";\nimport ConfirmTrackingNumber from \"./confirmTrackingNumber\";\nimport OrderConfirmationPopUp from \"./orderConfirmationPopUp\";\nimport globalStyles from \"../../style/global\";\nimport SwipeGesture from \"../../helpers/swipe-gesture\";\nimport Hotkeys from 'react-hot-keys';\nimport ProductAlias from \"../Alias/productAlias\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { fontFamily } from \"../../helpers/fontFamily\";\nvar searchOrderCheck = false;\nvar updateProductInfoSuccess = false;\nvar ScanPackSettingsAccess = false;\nvar GeneralSettingAccess = false;\nvar orderSaveSuccess = false;\nvar updateLogSuccess = true;\nvar callOrderSuccess = true;\nvar formOrderDetailPage = true;\nvar updateSerialLog = {};\nvar enableSerial = false;\nvar myInput = \"\";\nvar ordersListSuccess = true;\nvar blockScan = false;\nvar confirmProductConfirmation = false;\nvar updateFromOrderDetailPage = true;\nvar searchOrderSuccess = false;\nvar updateFromProductSuccess = false;\nvar updateProductApi = false;\n\nvar ScanPackItem = function (_Component) {\n  _inherits(ScanPackItem, _Component);\n\n  var _super = _createSuper(ScanPackItem);\n\n  function ScanPackItem(props) {\n    var _this;\n\n    _classCallCheck(this, ScanPackItem);\n\n    _this = _super.call(this, props);\n\n    _this.getUserInfo = function _callee() {\n      var info, userInfo;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"userInfo\"));\n\n            case 2:\n              info = _context.sent;\n              userInfo = info && JSON.parse(info);\n\n              _this.setState({\n                userInfo: userInfo\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.apiCall = function () {\n      var fetchListData = _this.state.shipmentOrder;\n      fetchListData.input = _this.props.route.params.incrementID;\n      var data = _this.props.route.params.data;\n\n      _this.setState({\n        order: data\n      });\n\n      _this.props.GetBothSettings();\n\n      ordersListSuccess = false;\n    };\n\n    _this.addBarcode = function (item) {\n      if (item.barcodes && item.barcodes.length === 0) {\n        _this.setState({\n          addBarcodeWindow: true,\n          addBarcodeItem: item\n        });\n      }\n    };\n\n    _this.addBarcodeSubmit = function () {\n      var newHash = {\n        value: _this.state.addBarcodeText,\n        var: \"barcode\",\n        id: _this.state.addBarcodeItem.product_id\n      };\n\n      _this.props.updateProductList(newHash);\n\n      _this.setState({\n        updateProductApiCall: new Date()\n      });\n\n      updateProductApi = true;\n    };\n\n    _this.nav = function _callee2(order, completeOrder) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              completeOrder && _this.multipleTime();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.statusFunction = function (message) {\n      var data = _this.state.data;\n      data[\"input\"] = \"\";\n\n      _this.setState({\n        rfoTitle: message,\n        data: data\n      });\n    };\n\n    _this.responseAction = function (response, from) {\n      var _this$state$scan_pack = _this.state.scan_pack_settings,\n          play_success_sound = _this$state$scan_pack.play_success_sound,\n          show_success_image = _this$state$scan_pack.show_success_image,\n          success_image_time = _this$state$scan_pack.success_image_time,\n          play_fail_sound = _this$state$scan_pack.play_fail_sound,\n          show_fail_image = _this$state$scan_pack.show_fail_image,\n          fail_image_time = _this$state$scan_pack.fail_image_time,\n          play_order_complete_sound = _this$state$scan_pack.play_order_complete_sound,\n          show_order_complete_image = _this$state$scan_pack.show_order_complete_image,\n          order_complete_image_time = _this$state$scan_pack.order_complete_image_time;\n      var popup_show_time = 0.3;\n\n      if (response === \"not_ready\") {\n        popup_show_time = fail_image_time;\n        show_fail_image ? _this.setState({\n          scanFailAction: true,\n          responseShowAction: true\n        }) : null;\n        play_fail_sound ? _this.playSound(notReady) : null;\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      if (response === \"scan_fail\") {\n        popup_show_time = fail_image_time;\n        show_fail_image ? _this.setState({\n          scanFailAction: true,\n          responseShowAction: true\n        }) : null;\n        play_fail_sound ? _this.playSound(scanFailSound) : null;\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      if (response === \"scan_success\") {\n        popup_show_time = success_image_time;\n        show_success_image ? _this.setState({\n          scanSuccessAction: true,\n          responseShowAction: true\n        }) : null;\n        play_success_sound ? _this.playSound(scanSuccessSound) : null;\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      if (response === \"order_complete\") {\n        if (_this.state.scan_pack_settings.post_scanning_option === \"None\") {\n          response = \"complete_order\";\n        } else {\n          var scanType = _this.state.scan_pack_settings.post_scanning_option;\n\n          _this.postScanFunction(scanType);\n        }\n      }\n\n      if (response === \"complete_order\") {\n        popup_show_time = order_complete_image_time;\n        show_order_complete_image ? _this.setState({\n          orderCompleteAction: true,\n          responseShowAction: true\n        }) : null;\n        play_order_complete_sound ? _this.playSound(completeSound) : null;\n\n        _this.nav(_this.state.order, true);\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      if (response === \"restart_action_complete\") {\n        _this.nav(_this.state.order);\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      var showTime = popup_show_time * 300;\n      setTimeout(function () {\n        _this.setState({\n          scanFailAction: false,\n          scanSuccessAction: false,\n          orderCompleteAction: false,\n          responseShowAction: false\n        });\n      }, showTime);\n\n      _this.updateAction.bind(_assertThisInitialized(_this));\n\n      try {\n        if (from === \"serialRecord\") {\n          _this.serialRecord.current.focus();\n        } else {}\n      } catch (error) {}\n    };\n\n    _this.playSound = function _callee3(response) {\n      var sound;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              sound = new Audio.Sound();\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(sound.unloadAsync());\n\n            case 3:\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(sound.loadAsync(response));\n\n            case 5:\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(sound.playAsync());\n\n            case 7:\n              _this.currentFocus();\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.currentFocus = function () {};\n\n    _this.sleep = function _callee4(ms) {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", new Promise(function (resolve) {\n                setTimeout(resolve, ms);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.postScanFunction = function (type, timeSecond) {\n      var scanPack = _this.state.scan_pack_settings;\n      var Order = _this.state.order && _this.state.order.order;\n\n      if (timeSecond) {\n        if (type === \"Record\") {\n          _this.setState({\n            trackingNumberView: true,\n            timeSecond: true,\n            postScanningFieldLabel: \"Scan Tracking Number for Order \" + Order.increment_id,\n            postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\n          });\n        }\n\n        if (type === \"Verify\") {\n          Order.tracking_num !== null ? _this.setState({\n            trackingNumberView: true,\n            timeSecond: true,\n            postScanningFieldLabel: \"Scan Shipping Label for Order \" + Order.increment_id,\n            postScanningMessageDetail: \"Please scan the shipping label.\"\n          }) : _this.setState({\n            trackingNumberView: true,\n            timeSecond: true,\n            postScanningFieldLabel: \"Scan Shipping Label for Order \" + Order.increment_id,\n            postScanSecond: true,\n            postScanningMessageDetail: \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\n          });\n        }\n      } else {\n        if (type === \"Record\") {\n          _this.setState({\n            trackingNumberView: true,\n            postScanningFieldLabel: \"Scan Tracking Number for Order \" + Order.increment_id,\n            postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\n          });\n        }\n\n        if (type === \"Verify\") {\n          Order.tracking_num !== null ? _this.setState({\n            trackingNumberView: true,\n            postScanningFieldLabel: \"Scan Shipping Label for Order \" + Order.increment_id,\n            postScanningMessageDetail: \"Please scan the shipping label.\"\n          }) : _this.setState({\n            trackingNumberView: true,\n            postScanningFieldLabel: \"Scan Shipping Label for Order \" + Order.increment_id,\n            postScan: true,\n            postScanningMessageDetail: \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\n          });\n        }\n      }\n    };\n\n    _this.updateAction = function _callee5(time) {\n      var soundObject;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              soundObject = new Audio.Sound();\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(soundObject.unloadAsync());\n\n            case 3:\n              _this.setState({\n                bar_code: \"\"\n              });\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.multipleTime = function _callee6() {\n      var getItem, convert;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logsArray\"));\n\n            case 2:\n              getItem = _context6.sent;\n              convert = getItem && JSON.parse(getItem);\n\n              _this.props.SubmitLog(convert);\n\n              setTimeout(function () {\n                return _this.redirectFun();\n              }, 1000);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.submitAlert = function () {\n      var order_num = _this.state.order.order.id;\n      var order = _this.state.order;\n      var notes_fromPacker = _this.state.notes_fromPacker;\n      order.order.notes_fromPacker = notes_fromPacker;\n      var localLogs = _this.state.localLogs;\n      var temp_order = {};\n      var event = \"\";\n      temp_order[\"message\"] = notes_fromPacker;\n      temp_order[\"input\"] = \"\";\n      temp_order[\"id\"] = order_num;\n      temp_order[\"order_item_id\"] = \"\";\n      temp_order[\"time\"] = new Date();\n      temp_order[\"state\"] = \"\";\n      temp_order[\"event\"] = \"note\";\n      temp_order[\"SKU\"] = \"\";\n      temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n      temp_order[\"updated_at\"] = order.order.updated_at;\n      temp_order[\"increment_id\"] = order.order.increment_id;\n\n      if (_this.state.issueFlag) {\n        _this.updateLog(temp_order, \"issue\");\n      }\n\n      if (_this.state.noteFlag) {\n        _this.updateLog(temp_order, \"note\");\n      }\n\n      _this.setState({\n        issueFlag: false,\n        noteFlag: false,\n        alert: false,\n        notes_fromPacker: \"\",\n        order: order\n      });\n    };\n\n    _this.scanAllItem = function () {\n      var order = _this.state.order;\n      var count = parseInt(_this.state.typeScanCount);\n      var bar_code = _this.state.scan_pack_settings.type_scan_code;\n      var unscanned_items = order.order.unscanned_items;\n      var items = unscanned_items && unscanned_items[0];\n      var scanned_items = order.order.scanned_items;\n      var log = _this.state.log;\n      var order_num = order.order.id;\n      var next_state = order.next_state;\n      var general_settings = _this.state.general_settings;\n      var temp_order = {};\n      var itemFound = false;\n      var localLogs = _this.state.localLogs;\n      var SKU = \"\";\n      var orderComplete = false;\n\n      if (general_settings.conf_code_product_instruction === \"always\") {\n        _this.setState({\n          productConfirmationCheck: true,\n          blockItemType: \"bulk_scan\"\n        });\n\n        blockScan = true;\n      } else if (general_settings.conf_code_product_instruction === \"optional\") {\n        if (items.child_items && items.child_items.length >= 1) {\n          if (items.child_items[0].confirmation === true) {\n            _this.setState({\n              productConfirmationCheck: true,\n              blockItemToScan: items.child_items[0],\n              blockItemType: \"bulk_scan\"\n            });\n\n            blockScan = true;\n          } else if (items.confirmation === true) {\n            _this.setState({\n              productConfirmationCheck: true,\n              blockItemToScan: items,\n              blockItemType: \"bulk_scan\"\n            });\n\n            blockScan = true;\n          }\n        }\n      }\n\n      if (blockScan === false || confirmProductConfirmation === true) {\n        if (items.product_type === \"individual\" && items.child_items && items.child_items.length > 0) {\n          var serialScanAccess = false;\n\n          if (enableSerial || items.child_items[0].record_serial === false && items.child_items[0].second_record_serial === false) {\n            serialScanAccess = true;\n          } else {\n            if (items.child_items[0].record_serial || items.child_items[0].second_record_serial) {\n              var eventType = \"scan_all_item\";\n\n              _this.setState({\n                serialRecordPopUpShow: true,\n                type: eventType\n              });\n            }\n          }\n\n          if (serialScanAccess) {\n            items.child_items && items.child_items.length > 0 && items.child_items.map(function (childItem, index) {\n              if (index === 0) {\n                if (scanned_items.length > 0) {\n                  scanned_items.map(function (scan) {\n                    if (childItem.product_id === scan.product_id && itemFound === false) {\n                      scan.scanned_qty = childItem.scanned_qty + childItem.qty_remaining;\n                      childItem.qty_remaining = 0;\n                      items.child_items.splice(index, 1);\n                      itemFound = true;\n                      SKU = childItem.sku;\n                      items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                    } else {\n                      if (childItem.scanned_qty === 0 && itemFound === false) {\n                        childItem.scanned_qty = childItem.scanned_qty + childItem.qty_remaining;\n                        childItem.qty_remaining = 0;\n                        scanned_items.splice(0, 0, childItem);\n                        items.child_items.splice(index, 1);\n                        itemFound = true;\n                        SKU = childItem.sku;\n                        items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                      }\n                    }\n                  });\n                } else {\n                  if (itemFound === false) {\n                    childItem.scanned_qty = childItem.scanned_qty + childItem.qty_remaining;\n                    childItem.qty_remaining = 0;\n                    scanned_items.splice(0, 0, childItem);\n                    items.child_items.splice(index, 1);\n                    itemFound = true;\n                    SKU = childItem.sku;\n                    items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                  }\n                }\n\n                if (unscanned_items.length === 0) {\n                  orderComplete = true;\n                }\n              }\n\n              return childItem;\n            });\n          }\n        } else {\n          if (items && items.qty_remaining > 0) {\n            var _serialScanAccess = false;\n\n            if (enableSerial || items.record_serial === false && items.second_record_serial === false) {\n              _serialScanAccess = true;\n            } else {\n              if (items.record_serial || items.second_record_serial) {\n                var _eventType = \"submit_type_scan\";\n\n                _this.setState({\n                  serialRecordPopUpShow: true,\n                  type: _eventType\n                });\n              }\n            }\n\n            if (_serialScanAccess) {\n              unscanned_items.map(function (unscan, index) {\n                if (index === 0) {\n                  if (scanned_items.length > 0) {\n                    scanned_items.map(function (scan) {\n                      if (unscan.order_item_id === scan.order_item_id && itemFound === false) {\n                        scan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining;\n                        scan.qty_remaining = 0;\n                        unscanned_items.splice(index, 1);\n                        itemFound = true;\n                        SKU = unscan.sku;\n                      } else {\n                        if (unscan.scanned_qty === 0 && itemFound === false) {\n                          unscan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining;\n                          unscan.qty_remaining = 0;\n                          scanned_items.splice(0, 0, unscan);\n                          unscanned_items.splice(index, 1);\n                          itemFound = true;\n                          SKU = unscan.sku;\n                        }\n                      }\n                    });\n                  } else {\n                    unscan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining;\n                    unscan.qty_remaining = 0;\n                    scanned_items.splice(0, 0, unscan);\n                    unscanned_items.splice(index, 1);\n                    SKU = unscan.sku;\n                  }\n\n                  if (unscanned_items.length === 0) {\n                    orderComplete = true;\n                  }\n                }\n\n                return unscan;\n              });\n            }\n          }\n        }\n\n        if (_this.state.type == \"scan_all_item\") {} else {\n          temp_order[\"input\"] = bar_code;\n          temp_order[\"id\"] = order_num;\n          temp_order[\"order_item_id\"] = items && items.order_item_id;\n          temp_order[\"time\"] = new Date();\n          temp_order[\"state\"] = next_state;\n          temp_order[\"event\"] = \"bulk_scan\";\n          temp_order[\"SKU\"] = SKU ? SKU : \"\";\n          temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n          temp_order[\"updated_at\"] = order.order.updated_at;\n          temp_order[\"increment_id\"] = order.order.increment_id;\n\n          _this.updateLog(temp_order, \"skip_curser\");\n\n          localLogs.splice(0, 0, temp_order);\n        }\n\n        _this.setState({\n          typeScanAlert: false,\n          typeScanCount: \"\"\n        });\n\n        enableSerial = false;\n\n        if (orderComplete === true) {\n          _this.updateLog(temp_order, \"order_complete\");\n        } else {\n          _this.responseAction(\"scan_success\");\n        }\n\n        confirmProductConfirmation = false;\n      }\n    };\n\n    _this.submitTypeScan = function () {\n      var order = _this.state.order;\n      var count = parseInt(_this.state.typeScanCount);\n      var bar_code = _this.state.scan_pack_settings.type_scan_code;\n      var unscanned_items = order.order.unscanned_items;\n      var items = unscanned_items && unscanned_items[0];\n      var scanned_items = order.order.scanned_items;\n      var order_num = order.order.id;\n      var next_state = order.next_state;\n      var temp_order = {};\n      var remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null;\n      var scanAccess = false;\n      var scanpush = false;\n      var match = false;\n      var skip = false;\n      var localLogs = _this.state.localLogs;\n      var orderInputType = items.product_type === \"individual\" && items.child_items.length > 0 ? items.child_items[0].barcodes[0].barcode : items.barcodes[0].barcode;\n      var SKU = \"\";\n\n      if (_this.state.type === \"submit_type_scan\") {\n        count = 1;\n      } else {\n        count = _this.state.typeScanState !== _this.state.typeScanDeductCountState ? count - 1 : count;\n      }\n\n      if (items.product_type === \"individual\" && items.child_items.length > 0) {\n        if (items.child_items[0].qty_remaining >= count) {\n          var serialScanAccess = false;\n\n          if (enableSerial || items.child_items[0].record_serial === false && items.child_items[0].second_record_serial === false) {\n            serialScanAccess = true;\n          } else {\n            if (items.child_items[0].record_serial || items.child_items[0].second_record_serial) {\n              var eventType = \"submit_type_scan\";\n\n              _this.setState({\n                serialRecordPopUpShow: true,\n                type: eventType\n              });\n            }\n          }\n\n          if (serialScanAccess) {\n            items.child_items && items.child_items.map(function (child, index) {\n              if (index === 0) {\n                if (scanned_items.length > 0) {\n                  scanned_items.map(function (scan) {\n                    var count_item = count;\n\n                    if (child.product_id === scan.product_id) {\n                      child.qty_remaining = child.qty_remaining - count_item;\n                      child.scanned_qty = child.scanned_qty + count_item;\n                      scan.qty_remaining = child.qty_remaining;\n                      scan.scanned_qty = child.scanned_qty;\n                      child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                      SKU = child.sku;\n                    } else {\n                      if (child.qty_remaining === count && child.scanned_qty === 0) {\n                        child.qty_remaining = child.qty_remaining - count_item;\n                        child.scanned_qty = child.scanned_qty + count_item;\n                        scan.qty_remaining = child.qty_remaining;\n                        scan.scanned_qty = child.scanned_qty;\n                        scanned_items.splice(0, 0, child);\n                        child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                        items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                        SKU = child.sku;\n                      } else {\n                        if (child.qty_remaining >= count && child.scanned_qty === 0) {\n                          child.qty_remaining = child.qty_remaining - count_item;\n                          child.scanned_qty = child.scanned_qty + count_item;\n                          scan.qty_remaining = child.qty_remaining;\n                          scan.scanned_qty = child.scanned_qty;\n                          scanned_items.splice(0, 0, child);\n                          child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                          SKU = child.sku;\n                        }\n                      }\n                    }\n                  });\n\n                  if (child.qty_remaining === 0) {\n                    items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                  }\n                } else {\n                  if (child.qty_remaining === count) {\n                    var count_item = count;\n                    child.qty_remaining = child.qty_remaining - count_item;\n                    child.scanned_qty = child.scanned_qty + count_item;\n                    scanned_items.splice(0, 0, child);\n                    child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                    items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                    SKU = child.sku;\n                  } else {\n                    if (child.qty_remaining >= count && child.scanned_qty === 0) {\n                      var _count_item = count;\n                      child.qty_remaining = child.qty_remaining - _count_item;\n                      child.scanned_qty = child.scanned_qty + _count_item;\n                      child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                      scanned_items.splice(0, 0, child);\n                      SKU = child.sku;\n                    }\n                  }\n                }\n              }\n            });\n\n            if (unscanned_items.length > 0) {\n              _this.responseAction(\"scan_success\");\n            } else {\n              _this.responseAction(\"order_complete\");\n            }\n          }\n        } else {\n          _this.alertBox(\"The quantity entered exceeds the remaining \" + items.child_items[0].qty_remaining + \" pieces in the order. Please try again\", true);\n\n          skip = true;\n        }\n      } else {\n        if (items.qty_remaining >= count) {\n          var _serialScanAccess2 = false;\n\n          if (enableSerial || items.record_serial === false && items.second_record_serial === false) {\n            _serialScanAccess2 = true;\n          } else {\n            if (items.record_serial || items.second_record_serial) {\n              var _eventType2 = \"submit_type_scan\";\n\n              _this.setState({\n                serialRecordPopUpShow: true,\n                type: _eventType2\n              });\n            }\n          }\n\n          if (_serialScanAccess2) {\n            unscanned_items.map(function (unscan, index) {\n              if (index === 0) {\n                if (scanned_items.length > 0) {\n                  scanned_items.map(function (scan) {\n                    var count_item = count;\n\n                    if (unscan.order_item_id === scan.order_item_id) {\n                      unscan.qty_remaining = unscan.qty_remaining - count_item;\n                      unscan.scanned_qty = unscan.scanned_qty + count_item;\n                      scan.qty_remaining = unscan.qty_remaining;\n                      scan.scanned_qty = unscan.scanned_qty;\n                      SKU = unscan.sku;\n                    } else {\n                      if (unscan.qty_remaining === count && unscan.scanned_qty === 0) {\n                        unscan.qty_remaining = unscan.qty_remaining - count_item;\n                        unscan.scanned_qty = unscan.scanned_qty + count_item;\n                        scan.qty_remaining = unscan.qty_remaining;\n                        scan.scanned_qty = unscan.scanned_qty;\n                        scanned_items.splice(0, 0, unscan);\n                        unscanned_items.splice(index, 1);\n                        SKU = unscan.sku;\n                      } else {\n                        if (unscan.qty_remaining >= count && unscan.scanned_qty === 0) {\n                          unscan.qty_remaining = unscan.qty_remaining - count_item;\n                          unscan.scanned_qty = unscan.scanned_qty + count_item;\n                          scan.qty_remaining = unscan.qty_remaining;\n                          scan.scanned_qty = unscan.scanned_qty;\n                          scanned_items.splice(0, 0, unscan);\n                          SKU = unscan.sku;\n                        }\n                      }\n                    }\n                  });\n\n                  if (unscan.qty_remaining === 0) {\n                    unscanned_items.splice(index, 1);\n                  }\n                } else {\n                  if (unscan.qty_remaining === count) {\n                    var count_item = count;\n                    unscan.qty_remaining = unscan.qty_remaining - count_item;\n                    unscan.scanned_qty = unscan.scanned_qty + count_item;\n                    scanned_items.splice(0, 0, unscan);\n                    unscanned_items.splice(index, 1);\n                    SKU = unscan.sku;\n                  } else {\n                    if (unscan.qty_remaining >= count && unscan.scanned_qty === 0) {\n                      var _count_item2 = count;\n                      unscan.qty_remaining = unscan.qty_remaining - _count_item2;\n                      unscan.scanned_qty = unscan.scanned_qty + _count_item2;\n                      scanned_items.splice(0, 0, unscan);\n                      SKU = unscan.sku;\n                    }\n                  }\n                }\n\n                if (unscanned_items.length > 0) {\n                  _this.responseAction(\"scan_success\");\n                } else {\n                  _this.responseAction(\"order_complete\");\n                }\n              }\n            });\n          }\n        } else {\n          _this.alertBox(\"The quantity entered exceeds the remaining \" + items.qty_remaining + \" pieces in the order. Please try again\", true);\n\n          skip = true;\n        }\n      }\n\n      if (_this.state.type === \"submit_type_scan\") {} else {\n        temp_order[\"input\"] = orderInputType;\n        temp_order[\"id\"] = order_num;\n        temp_order[\"order_item_id\"] = items && items.order_item_id;\n        temp_order[\"time\"] = new Date();\n        temp_order[\"box_id\"] = null;\n        temp_order[\"state\"] = 'scanpack.rfp.default';\n        temp_order[\"count\"] = count;\n        temp_order[\"event\"] = \"type_scan\";\n        temp_order[\"SKU\"] = SKU ? SKU : \"\";\n        temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n        temp_order[\"updated_at\"] = order.order.updated_at;\n        temp_order[\"increment_id\"] = order.order.increment_id;\n\n        if (skip === false) {\n          _this.updateLog(temp_order);\n\n          localLogs.splice(0, 0, temp_order);\n        }\n      }\n\n      if (count <= remain_qty) {\n        _this.setState({\n          typeScanAlert: false,\n          typeScanCount: \"\"\n        });\n      }\n\n      enableSerial = false;\n\n      _this.setState({\n        typeScanCount: \"\",\n        typeScanDeductCountState: _this.state.typeScanState,\n        typeScanAlert: false\n      });\n    };\n\n    _this.alertBox = function (message, skip) {\n      _this.setState({\n        popUpModelShow: true,\n        message: message\n      });\n\n      setTimeout(function () {\n        this.setState({\n          popUpModelShow: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 4000);\n    };\n\n    _this.closeAlert = function () {\n      _this.setState({\n        alert: false,\n        notes_fromPacker: \"\",\n        typeScanAlert: false,\n        typeScanCount: 0,\n        popUpModelShow: false,\n        addBarcodeWindow: false,\n        message: \"\",\n        serialRecordPopUpShow: false,\n        serialRecordInput: \"\",\n        serialRecordTwo: \"\",\n        serialRecordOne: \"\",\n        clickScanConfirmation: false,\n        confirmationCheckItem: null,\n        clickScanConfirmInput: \"\",\n        productConfirmationCheck: false,\n        errorMessageProductConfirmationCheck: false,\n        errorMessageClickScanConfirmation: false,\n        orderConfirmPopUp: false\n      });\n\n      _this.currentFocus();\n\n      enableSerial = false;\n    };\n\n    _this.noBarcodeScan = function (item) {};\n\n    _this.clickScan = function (item, fromActionBarcode) {\n      var scan_pack_settings = _this.state.scan_pack_settings;\n      var access = fromActionBarcode === \"actionbarcode\" ? scan_pack_settings.click_scan : scan_pack_settings.enable_click_sku;\n\n      if (access && item) {\n        if (item.click_scan_enabled === \"on\" || item.click_scan_enabled === \"on_with_confirmation\") {\n          if (item.click_scan_enabled === \"on_with_confirmation\") {\n            _this.setState({\n              clickScanConfirmation: true,\n              confirmationCheckItem: item\n            });\n          } else {\n            var barcode = item.barcodes && item.barcodes.length === 0 ? \"noBarcode\" : item.barcodes[0].barcode;\n\n            _this.scanBarcode(barcode, \"item_present\");\n          }\n        } else {\n          _this.alertBox(\"Click scan is not enable\");\n        }\n      }\n\n      _this.props.updateProductList(null);\n    };\n\n    _this.clickScanConfirmFun = function () {\n      var userInfo = _this.state.userInfo;\n      var item = _this.state.confirmationCheckItem;\n\n      if (item && userInfo) {\n        if (_this.state.userInfo.confirmation_code === _this.state.clickScanConfirmInput) {\n          var barcode = item.barcodes[0].barcode;\n\n          _this.scanBarcode(barcode, \"item_present\");\n\n          _this.setState({\n            clickScanConfirmation: false,\n            confirmationCheckItem: null,\n            clickScanConfirmInput: \"\"\n          });\n        } else {\n          if (_this.state.general_settings && _this.state.general_settings.strict_cc) {\n            _this.setState({\n              errorMessageClickScanConfirmation: true\n            });\n          } else {\n            var _barcode = item.barcodes[0].barcode;\n\n            _this.scanBarcode(_barcode, \"item_present\");\n\n            _this.setState({\n              clickScanConfirmation: false,\n              confirmationCheckItem: null,\n              clickScanConfirmInput: \"\"\n            });\n          }\n        }\n      }\n    };\n\n    _this.handleClickScanConfirmInput = function (e) {\n      _this.setState({\n        clickScanConfirmInput: e,\n        errorMessageClickScanConfirmation: false\n      });\n    };\n\n    _this.ProductConfirmationCheckFun = function () {\n      var userCode = _this.state.userInfo.confirmation_code;\n      var userInput = _this.state.productConfirmationCheckInput;\n\n      if (userInput !== \"\") {\n        if (userCode === userInput) {\n          if (_this.state.blockItemType === \"item_present\") {\n            confirmProductConfirmation = true;\n\n            _this.clickScan(_this.state.blockItemToScan);\n          }\n\n          if (_this.state.blockItemType === \"barcode\") {\n            confirmProductConfirmation = true;\n\n            _this.scanBarcode();\n          }\n\n          if (_this.state.blockItemType === \"bulk_scan\") {\n            confirmProductConfirmation = true;\n\n            _this.scanAllItem();\n          }\n\n          _this.setState({\n            productConfirmationCheckInput: \"\",\n            productConfirmationCheck: false\n          });\n        } else {\n          _this.setState({\n            productConfirmationCheckInput: \"\"\n          });\n\n          _this.responseAction(\"scan_fail\");\n        }\n      } else {\n        if (_this.state.generalSettings.strict_cc === true) {\n          _this.responseAction(\"not_ready\");\n        } else {\n          if (_this.state.blockItemType === \"item_present\") {\n            confirmProductConfirmation = true;\n\n            _this.clickScan(_this.state.blockItemToScan);\n          }\n\n          if (_this.state.blockItemType === \"barcode\") {\n            confirmProductConfirmation = true;\n\n            _this.scanBarcode();\n          }\n\n          if (_this.state.blockItemType === \"bulk_scan\") {\n            confirmProductConfirmation = true;\n\n            _this.scanAllItem();\n          }\n\n          _this.setState({\n            productConfirmationCheckInput: \"\",\n            productConfirmationCheck: false\n          });\n        }\n      }\n    };\n\n    _this.handleProductConfirmationCheckInput = function (e) {\n      _this.setState({\n        productConfirmationCheckInput: e,\n        errorMessageProductConfirmationCheck: false\n      });\n    };\n\n    _this.OrderConfirmationCheckFun = function () {\n      var userCode = _this.state.userInfo.confirmation_code;\n      var userInput = _this.state.OrderConfirmationCheckInput;\n\n      if (userInput !== \"\") {\n        if (userCode === userInput) {\n          _this.setState({\n            orderConfirmPopUp: false\n          });\n        } else {\n          _this.setState({\n            OrderConfirmationCheckInput: \"\"\n          });\n\n          _this.responseAction(\"scan_fail\");\n        }\n      } else {\n        if (_this.state.generalSettings.strict_cc === true) {\n          _this.responseAction(\"not_ready\");\n        } else {\n          _this.setState({\n            orderConfirmPopUp: false\n          });\n\n          _this.currentFocus();\n        }\n      }\n    };\n\n    _this.handleOrderConfirmationCheckInput = function (e) {\n      _this.setState({\n        OrderConfirmationCheckInput: e,\n        errorMessageOrderConfirmationCheck: false\n      });\n    };\n\n    _this.restartButton = function () {\n      var order = _this.state.order;\n      var scanned_items = order.order.scanned_items;\n      var unscanned_items = order.order.unscanned_items;\n      var scan_pack_settings = _this.state.scan_pack_settings;\n      var order_num = order.order.id;\n      var Log_count = \"\";\n      var SKU = \"\";\n      var product_name = \"\";\n      var localLogs = _this.state.localLogs;\n      var remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null;\n      var temp_order = {};\n      var ActionBarcode = true;\n      temp_order[\"input\"] = scan_pack_settings.restart_code;\n      temp_order[\"id\"] = order_num;\n      temp_order[\"order_item_id\"] = unscanned_items.length > 0 ? unscanned_items[0].order_item_id : scanned_items.length > 0 ? scanned_items[0].order_item_id : \"\";\n      temp_order[\"time\"] = new Date();\n      temp_order[\"rem_qty\"] = remain_qty;\n      temp_order[\"SKU\"] = SKU ? SKU : unscanned_items[0].sku;\n      temp_order[\"Log_count\"] = Log_count;\n      temp_order[\"product_name\"] = product_name;\n      temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n      temp_order[\"state\"] = 'scanpack.rfp.default';\n      temp_order[\"event\"] = \"regular\";\n      temp_order[\"updated_at\"] = order.order.updated_at;\n      temp_order[\"increment_id\"] = order.order.increment_id;\n\n      _this.updateLog(temp_order, \"RESTART\");\n\n      if (_this.state.serialRecordInput === \"\") {\n        localLogs.splice(0, 0, temp_order);\n      }\n    };\n\n    _this.addNote = function () {\n      if (_this.state.order) {\n        var order = _this.state.order;\n        var notes_fromPacker = order.order.notes_fromPacker;\n\n        _this.setState({\n          alert: true,\n          notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker,\n          noteFlag: true\n        });\n      }\n    };\n\n    _this.saveChanges = function _callee7() {\n      var getItem, count;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logsArray\"));\n\n            case 2:\n              getItem = _context7.sent;\n              count = getItem !== null && JSON.parse(getItem);\n\n              if (count && count.length > 0) {\n                _this.alertBox(\"Save Changes Successful\", true);\n\n                _this.multipleTime();\n              }\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.scanBarcode = function (clickBarcode, type) {\n      if (_this.state.order) {\n        var order = _this.state.order;\n        var scan_pack_settings = _this.state.scan_pack_settings;\n        var localScannedItems = _this.state.scanned_items;\n        var scanned_items = order.order.scanned_items;\n        var notes_fromPacker = order.order.notes_fromPacker;\n        var unscanned_items = order.order.unscanned_items;\n        var bar_code = _this.state.bar_code;\n        var event_code = _this.state.bar_code;\n        var ActionBarcode = false;\n        var remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null;\n\n        if (type === \"item_present\") {\n          bar_code = clickBarcode;\n          event_code = clickBarcode;\n          var tempArr = [{\n            barcode: \"noBarcode\",\n            id: 0,\n            is_multipack_barcode: true,\n            packing_count: \"1\"\n          }];\n          order.order.unscanned_items.map(function (noCode, index) {\n            if (noCode.barcodes && noCode.barcodes.length === 0) {\n              noCode.barcodes = tempArr;\n            }\n          });\n        } else {\n          bar_code = _this.state.bar_code;\n        }\n\n        var findKit3 = false;\n        var log = _this.state.log;\n        var order_num = order.order.id;\n        var next_state = order.next_state;\n        var general_settings = _this.state.general_settings;\n        var master_switch = general_settings && general_settings.master_switch;\n        var temp_order = {};\n        var stop_add_log = false;\n        var lowercase = false;\n        var skipError = false;\n        var event_scanned = false;\n        var SKU = \"\";\n        var Log_count = \"\";\n        var localLogs = _this.state.localLogs;\n        var product_name = \"\";\n        var rejectLocalLog = true;\n        var Action_Type = \"\";\n        var order_complete_flag = false;\n        var qty_remain = 0;\n        var scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : \"\";\n\n        if (bar_code !== \"\") {\n          if (scan_pack_settings.escape_string_enabled && type !== \"item_present\") {\n            var removeSpaceBarCode = bar_code;\n\n            if (scan_pack_settings.first_escape_string_enabled) {\n              var check = scan_pack_settings.escape_string;\n\n              if (removeSpaceBarCode && removeSpaceBarCode.includes(check) && scan_pack_settings.first_escape_string_enabled !== \"\") {\n                var tempIndex = removeSpaceBarCode.indexOf(check);\n                bar_code = removeSpaceBarCode.slice(0, tempIndex);\n              }\n            }\n\n            if (scan_pack_settings.second_escape_string_enabled) {\n              var _check = scan_pack_settings.second_escape_string;\n\n              if (removeSpaceBarCode && removeSpaceBarCode.includes(_check) && scan_pack_settings.second_escape_string !== \"\") {\n                var _tempIndex = removeSpaceBarCode.indexOf(_check);\n\n                bar_code = removeSpaceBarCode.slice(0, _tempIndex);\n              }\n            }\n          }\n\n          if (scan_pack_settings.note_from_packer_code_enabled) {\n            if (scan_pack_settings.note_from_packer_code === bar_code) {\n              stop_add_log = true;\n              skipError = true;\n\n              _this.setState({\n                alert: true,\n                notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker,\n                noteFlag: true,\n                bar_code: \"\"\n              });\n            }\n          }\n\n          if (scan_pack_settings && scan_pack_settings.restart_code_enabled && scan_pack_settings.restart_code === bar_code) {\n            skipError = true;\n            Action_Type = \"RESTART\";\n            ActionBarcode = true;\n          }\n\n          if (scan_pack_settings.type_scan_code_enabled) {\n            if (scan_pack_settings.type_scan_code === bar_code) {\n              if (_this.state.typeScanState !== \"\") {\n                if (unscanned_items[0].product_type === \"individual\" && unscanned_items[0].child_items.length > 0) {\n                  if (_this.state.typeScanState === unscanned_items[0].child_items[0].sku) {\n                    if (unscanned_items[0].child_items[0].record_serial || unscanned_items[0].child_items[0].second_record_serial) {\n                      _this.setState({\n                        typeScanAlert: true,\n                        type: \"submit_type_scan\"\n                      });\n                    } else {\n                      _this.setState({\n                        typeScanAlert: true\n                      });\n                    }\n                  } else {\n                    _this.alertBox(\"Please scan the item once before triggering a type-in count.\");\n                  }\n                } else {\n                  if (_this.state.typeScanState === unscanned_items[0].sku) {\n                    if (unscanned_items[0].record_serial || unscanned_items[0].second_record_serial) {\n                      _this.setState({\n                        typeScanAlert: true,\n                        type: \"submit_type_scan\"\n                      });\n                    } else {\n                      _this.setState({\n                        typeScanAlert: true\n                      });\n                    }\n                  } else {\n                    _this.alertBox(\"Please scan the item once before triggering a type-in count.\");\n                  }\n                }\n              } else {\n                _this.alertBox(\"Please scan the item once before triggering a type-in count.\");\n              }\n\n              skipError = true;\n              stop_add_log = true;\n            }\n          }\n\n          if (scan_pack_settings.scanned) {\n            if (scan_pack_settings.scanned_barcode === bar_code) {\n              skipError = true;\n              event_scanned = true;\n              var Order = _this.state.order && _this.state.order.order;\n              Order[\"unscanned_items\"] = [];\n\n              _this.setState({\n                Order: Order\n              });\n\n              _this.responseAction(\"order_complete\");\n\n              ActionBarcode = true;\n            }\n          }\n\n          if (scan_pack_settings.service_issue_code_enabled) {\n            if (scan_pack_settings.service_issue_code === bar_code) {\n              _this.setState({\n                alert: true,\n                notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker,\n                issueFlag: true\n              });\n\n              skipError = true;\n            }\n          }\n\n          if (scan_pack_settings.click_scan) {\n            if (scan_pack_settings.click_scan_barcode === bar_code) {\n              var item = unscanned_items && unscanned_items[0];\n\n              _this.clickScan(item, \"actionbarcode\");\n\n              skipError = true;\n              ActionBarcode = true;\n            }\n          }\n\n          if (unscanned_items[0].product_type === \"individual\") {\n            if (unscanned_items[0].child_items && unscanned_items[0].child_items.length > 0) {\n              if (scan_pack_settings.remove_barcode && scan_pack_settings.remove_barcode === bar_code) {\n                unscanned_items[0].child_items.shift();\n                unscanned_items[0].child_items.length === 0 && unscanned_items.shift();\n\n                _this.responseAction(\"scan_success\");\n\n                skipError = true;\n                ActionBarcode = true;\n              }\n            }\n          } else {\n            if (unscanned_items && unscanned_items.length > 0) {\n              if (scan_pack_settings.remove_barcode && scan_pack_settings.remove_barcode === bar_code) {\n                unscanned_items.shift();\n\n                _this.responseAction(\"scan_success\");\n\n                skipError = true;\n                ActionBarcode = true;\n              }\n            }\n          }\n\n          if (scan_pack_settings.scanning_sequence === \"any_sequence\" && master_switch === false) {\n            bar_code = bar_code.toLowerCase();\n            lowercase = true;\n          }\n\n          if (unscanned_items.length > 0) {\n            if (scan_pack_settings.scanning_sequence === \"any_sequence\" ? \"any_sequence\" : \"items_sequence\") {\n              var scanpush = false;\n              var itemFound = false;\n              unscanned_items.length > 0 && unscanned_items.map(function (item, index) {\n                if (item.product_type === \"individual\" && item.child_items && item.child_items.length > 0) {\n                  if (item.child_items[0].skippable) {\n                    var skip_code = lowercase === true ? scan_pack_settings.skip_code.toLowerCase() : scan_pack_settings.skip_code;\n\n                    if (scan_pack_settings.skip_code_enabled && skip_code === bar_code) {\n                      item.child_items.splice(index, 1);\n                      itemFound = true;\n\n                      _this.responseAction(\"scan_success\");\n\n                      if (unscanned_items.length === 0) {\n                        order_complete_flag = true;\n                      }\n\n                      ActionBarcode = true;\n                    }\n                  }\n                } else {\n                  if (item.skippable) {\n                    var _skip_code = lowercase === true ? scan_pack_settings.skip_code.toLowerCase() : scan_pack_settings.skip_code;\n\n                    if (scan_pack_settings.skip_code_enabled && _skip_code === bar_code) {\n                      unscanned_items.splice(index, 1);\n                      itemFound = true;\n\n                      _this.responseAction(\"scan_success\");\n\n                      if (unscanned_items.length === 0) {\n                        order_complete_flag = true;\n                      }\n\n                      ActionBarcode = true;\n                    }\n                  }\n                }\n\n                scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : index;\n\n                if (index === scanAccess) {\n                  {\n                    item && item.product_type === \"individual\" && item.child_items && item.child_items.length > 0 ? item && item.child_items.map(function (childItem, childIndex) {\n                      scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : childIndex;\n\n                      if (childIndex === scanAccess) {\n                        childItem.barcodes.map(function (barcode) {\n                          var Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode;\n\n                          if (Barcode === bar_code && scanpush === false) {\n                            var serialScanAccess = false;\n\n                            if (enableSerial || childItem.record_serial === false && childItem.second_record_serial === false) {\n                              serialScanAccess = true;\n                            } else {\n                              if (childItem.record_serial || childItem.second_record_serial) {\n                                var eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n                                rejectLocalLog = false;\n\n                                _this.setState({\n                                  serialRecordPopUpShow: true,\n                                  type: eventType\n                                });\n                              }\n                            }\n\n                            if (confirmProductConfirmation === false) {\n                              if (general_settings.conf_code_product_instruction === \"always\") {\n                                _this.setState({\n                                  productConfirmationCheck: true,\n                                  blockItemToScan: childItem,\n                                  blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                                });\n\n                                skipError = true;\n                                blockScan = true;\n                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                                if (childItem.confirmation === true) {\n                                  _this.setState({\n                                    productConfirmationCheck: true,\n                                    blockItemToScan: childItem,\n                                    blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                                  });\n\n                                  skipError = true;\n                                  blockScan = true;\n                                }\n                              }\n                            }\n\n                            if (blockScan === false || confirmProductConfirmation === true) {\n                              if (serialScanAccess) {\n                                if (scanned_items.length > 0) {\n                                  scanned_items.map(function (scan, scanItemIndex) {\n                                    scan.barcodes.map(function (scancode) {\n                                      var Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode;\n\n                                      if (type === \"item_present\" ? childItem.qty_remaining >= 1 : childItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                        if (Scancode === Barcode && Barcode === bar_code && childItem.product_id === scan.product_id) {\n                                          if (scan.qty_remaining === 1 && scanpush === false) {\n                                            if (type === \"item_present\") {\n                                              childItem.qty_remaining = childItem.qty_remaining - 1;\n                                              childItem.scanned_qty = childItem.scanned_qty + 1;\n                                            } else {\n                                              if (childItem.qty_remaining > 0) {\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                              }\n                                            }\n\n                                            item.child_items.splice(scanAccess, 1);\n                                            item.child_items.length === 0 && unscanned_items.splice(index, 1);\n                                            scanned_items.splice(scanItemIndex, 1);\n                                            scanned_items.splice(0, 0, scan);\n\n                                            _this.setState({\n                                              typeScanState: childItem.sku\n                                            });\n\n                                            scanpush = true;\n                                            SKU = childItem.sku;\n                                            Log_count = barcode.packing_count;\n                                            product_name = childItem.name;\n                                            qty_remain = childItem.qty_remaining;\n                                          } else {\n                                            if (scan.qty_remaining > 0 && scanpush === false) {\n                                              if (type === \"item_present\") {\n                                                childItem.scanned_qty = childItem.scanned_qty + 1;\n                                                childItem.qty_remaining = childItem.qty_remaining - 1;\n                                              } else {\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                              }\n\n                                              scanned_items.splice(scanItemIndex, 1);\n                                              scanned_items.splice(0, 0, scan);\n\n                                              _this.setState({\n                                                typeScanState: childItem.sku\n                                              });\n\n                                              scanpush = true;\n                                              SKU = childItem.sku;\n                                              Log_count = barcode.packing_count;\n                                              product_name = childItem.name;\n                                              qty_remain = childItem.qty_remaining;\n                                            }\n\n                                            if (childItem.qty_remaining === 0) {\n                                              item.child_items.splice(scanAccess, 1);\n                                              item.child_items.length === 0 && unscanned_items.splice(index, 1);\n                                            }\n                                          }\n                                        } else {\n                                          if (scancode !== bar_code && childItem.scanned_qty === 0) {\n                                            if (childItem.qty_remaining === 1 && scanpush === false) {\n                                              if (type === \"item_present\") {\n                                                childItem.qty_remaining = childItem.qty_remaining - 1;\n                                                childItem.scanned_qty = childItem.scanned_qty + 1;\n                                              } else {\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                              }\n\n                                              scanned_items.splice(0, 0, childItem);\n                                              item.child_items.splice(scanAccess, 1);\n                                              item.child_items.length === 0 && unscanned_items.splice(index, 1);\n\n                                              _this.setState({\n                                                typeScanState: childItem.sku\n                                              });\n\n                                              scanpush = true;\n                                              SKU = childItem.sku;\n                                              Log_count = barcode.packing_count;\n                                              product_name = childItem.name;\n                                              qty_remain = childItem.qty_remaining;\n                                            } else {\n                                              if (scanpush === false) {\n                                                if (type === \"item_present\") {\n                                                  childItem.qty_remaining = childItem.qty_remaining - 1;\n                                                  childItem.scanned_qty = childItem.scanned_qty + 1;\n                                                } else {\n                                                  childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                                  childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                                }\n\n                                                scanned_items.splice(0, 0, childItem);\n\n                                                _this.setState({\n                                                  typeScanState: childItem.sku\n                                                });\n\n                                                scanpush = true;\n                                                SKU = childItem.sku;\n                                                Log_count = barcode.packing_count;\n                                                product_name = childItem.name;\n                                                qty_remain = childItem.qty_remaining;\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    });\n                                  });\n                                } else {\n                                  if (Barcode === bar_code && childItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                    if (childItem.qty_remaining === 1 && scanpush === false) {\n                                      if (type === \"item_present\") {\n                                        childItem.qty_remaining = childItem.qty_remaining - 1;\n                                        childItem.scanned_qty = childItem.scanned_qty + 1;\n                                      } else {\n                                        childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                        childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                      }\n\n                                      scanned_items.splice(0, 0, childItem);\n                                      item.child_items.splice(scanAccess, 1);\n                                      item.child_items.length === 0 && unscanned_items.splice(index, 1);\n\n                                      _this.setState({\n                                        typeScanState: childItem.sku\n                                      });\n\n                                      scanpush = true;\n                                      SKU = childItem.sku;\n                                      Log_count = barcode.packing_count;\n                                      product_name = childItem.name;\n                                      qty_remain = childItem.qty_remaining;\n                                    } else {\n                                      if (scanpush === false) {\n                                        if (type === \"item_present\") {\n                                          childItem.qty_remaining = childItem.qty_remaining - 1;\n                                          childItem.scanned_qty = childItem.scanned_qty + 1;\n                                        } else {\n                                          childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                          childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                        }\n\n                                        scanned_items.splice(0, 0, childItem);\n\n                                        _this.setState({\n                                          typeScanState: childItem.sku\n                                        });\n\n                                        scanpush = true;\n                                        SKU = childItem.sku;\n                                        Log_count = barcode.packing_count;\n                                        product_name = childItem.name;\n                                        qty_remain = childItem.qty_remaining;\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n\n                              if (unscanned_items.length > 0) {\n                                if (serialScanAccess) {\n                                  if (type === \"item_present\") {\n                                    _this.responseAction(\"scan_success\");\n                                  } else {\n                                    if (remain_qty >= parseInt(barcode.packing_count)) {\n                                      _this.responseAction(\"scan_success\");\n                                    } else {\n                                      _this.alertBox(\"The multi-pack barcode scanned exceeds the quantity remaining\");\n                                    }\n                                  }\n                                }\n                              } else {\n                                order_complete_flag = true;\n                              }\n\n                              if (_this.state.blockItemToScan && _this.state.blockItemToScan.name !== childItem.name || childItem.qty_remaining === 0) {\n                                confirmProductConfirmation = false;\n                              }\n\n                              itemFound = true;\n                            }\n                          }\n                        });\n                      }\n                    }) : item && item.product_type === \"depends\" ? item && item.barcodes.map(function (barcode, barcodeIndex) {\n                      var Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode;\n                      var mainItem = false;\n                      unscanned_items.map(function (un) {\n                        un.barcodes.map(function (bar) {\n                          if (bar.barcode === bar_code) {\n                            mainItem = true;\n                          }\n                        });\n                      });\n\n                      if (Barcode === bar_code && scanpush === false) {\n                        var serialScanAccess = false;\n\n                        if (enableSerial || item.record_serial === false && item.second_record_serial === false) {\n                          serialScanAccess = true;\n                        } else {\n                          if (item.record_serial || item.second_record_serial) {\n                            var eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n                            rejectLocalLog = false;\n\n                            _this.setState({\n                              serialRecordPopUpShow: true,\n                              type: eventType\n                            });\n                          }\n                        }\n\n                        if (confirmProductConfirmation === false) {\n                          if (general_settings.conf_code_product_instruction === \"always\") {\n                            _this.setState({\n                              productConfirmationCheck: true,\n                              blockItemToScan: item,\n                              blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                            });\n\n                            skipError = true;\n                            blockScan = true;\n                          } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                            if (item.confirmation === true) {\n                              _this.setState({\n                                productConfirmationCheck: true,\n                                blockItemToScan: item,\n                                blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                              });\n\n                              skipError = true;\n                              blockScan = true;\n                            }\n                          }\n                        }\n\n                        if (blockScan === false || confirmProductConfirmation === true) {\n                          if (serialScanAccess) {\n                            if (scanned_items.length > 0) {\n                              scanned_items.map(function (scan, scanIndex) {\n                                scan.barcodes.map(function (scancode, scancodeIndex) {\n                                  var Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode;\n\n                                  if (type === \"item_present\" ? item.qty_remaining >= 1 : item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                    if (Scancode === Barcode && Barcode === bar_code && item.order_item_id === scan.order_item_id) {\n                                      if (scan.qty_remaining === 1 && scanpush === false) {\n                                        if (type === \"item_present\") {\n                                          item.qty_remaining = item.qty_remaining - 1;\n                                          item.scanned_qty = item.scanned_qty + 1;\n                                          scan.qty_remaining = item.qty_remaining;\n                                          scan.scanned_qty = item.scanned_qty;\n                                        } else {\n                                          item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                          item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                          scan.qty_remaining = item.qty_remaining;\n                                          scan.scanned_qty = item.scanned_qty;\n                                        }\n\n                                        unscanned_items.splice(scanAccess, 1);\n                                        scanned_items.splice(scanIndex, 1);\n                                        scanned_items.splice(0, 0, scan);\n\n                                        _this.setState({\n                                          typeScanState: item.sku\n                                        });\n\n                                        scanpush = true;\n                                        SKU = item.sku;\n                                        Log_count = barcode.packing_count;\n                                        product_name = item.name;\n                                        qty_remain = item.qty_remaining;\n                                      } else {\n                                        if (scan.qty_remaining > 0 && scanpush === false) {\n                                          if (type === \"item_present\") {\n                                            item.scanned_qty = item.scanned_qty + 1;\n                                            item.qty_remaining = item.qty_remaining - 1;\n                                            scan.qty_remaining = item.qty_remaining;\n                                            scan.scanned_qty = item.scanned_qty;\n                                          } else {\n                                            item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                            item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                            scan.qty_remaining = item.qty_remaining;\n                                            scan.scanned_qty = item.scanned_qty;\n                                          }\n\n                                          scanned_items.splice(scanIndex, 1);\n                                          scanned_items.splice(0, 0, scan);\n\n                                          _this.setState({\n                                            typeScanState: item.sku\n                                          });\n\n                                          scanpush = true;\n                                          SKU = item.sku;\n                                          Log_count = barcode.packing_count;\n                                          product_name = item.name;\n                                          qty_remain = item.qty_remaining;\n                                        }\n\n                                        if (item.qty_remaining === 0) {\n                                          unscanned_items.splice(scanAccess, 1);\n                                        }\n                                      }\n                                    } else {\n                                      if (scancode !== bar_code && item.scanned_qty === 0) {\n                                        if (item.qty_remaining === 1 && scanpush === false) {\n                                          if (type === \"item_present\") {\n                                            item.qty_remaining = item.qty_remaining - 1;\n                                            item.scanned_qty = item.scanned_qty + 1;\n                                            scan.qty_remaining = item.qty_remaining;\n                                            scan.scanned_qty = item.scanned_qty;\n                                          } else {\n                                            item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                            item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                            scan.qty_remaining = item.qty_remaining;\n                                            scan.scanned_qty = item.scanned_qty;\n                                          }\n\n                                          scanned_items.splice(0, 0, item);\n                                          unscanned_items.splice(scanAccess, 1);\n\n                                          _this.setState({\n                                            typeScanState: item.sku\n                                          });\n\n                                          scanpush = true;\n                                          SKU = item.sku;\n                                          Log_count = barcode.packing_count;\n                                          product_name = item.name;\n                                          qty_remain = item.qty_remaining;\n                                        } else {\n                                          if (scanpush === false) {\n                                            if (type === \"item_present\") {\n                                              item.qty_remaining = item.qty_remaining - 1;\n                                              item.scanned_qty = item.scanned_qty + 1;\n                                              scan.qty_remaining = item.qty_remaining;\n                                              scan.scanned_qty = item.scanned_qty;\n                                            } else {\n                                              item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                              item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                              scan.qty_remaining = item.qty_remaining;\n                                              scan.scanned_qty = item.scanned_qty;\n                                            }\n\n                                            scanned_items.splice(0, 0, item);\n\n                                            _this.setState({\n                                              typeScanState: item.sku\n                                            });\n\n                                            scanpush = true;\n                                            SKU = item.sku;\n                                            Log_count = barcode.packing_count;\n                                            product_name = item.name;\n                                            qty_remain = item.qty_remaining;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                });\n                              });\n                            } else {\n                              if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                if (item.qty_remaining === 1 && scanpush === false) {\n                                  if (type === \"item_present\") {\n                                    item.qty_remaining = item.qty_remaining - 1;\n                                    item.scanned_qty = item.scanned_qty + 1;\n                                  } else {\n                                    item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                    item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                  }\n\n                                  scanned_items.splice(0, 0, item);\n                                  unscanned_items.splice(scanAccess, 1);\n\n                                  _this.setState({\n                                    typeScanState: item.sku\n                                  });\n\n                                  scanpush = true;\n                                  SKU = item.sku;\n                                  Log_count = barcode.packing_count;\n                                  product_name = item.name;\n                                  qty_remain = item.qty_remaining;\n                                } else {\n                                  if (scanpush === false) {\n                                    if (type === \"item_present\") {\n                                      item.qty_remaining = item.qty_remaining - 1;\n                                      item.scanned_qty = item.scanned_qty + 1;\n                                    } else {\n                                      item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                      item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                    }\n\n                                    scanned_items.splice(0, 0, item);\n\n                                    _this.setState({\n                                      typeScanState: item.sku\n                                    });\n\n                                    scanpush = true;\n                                    SKU = item.sku;\n                                    Log_count = barcode.packing_count;\n                                    product_name = item.name;\n                                    qty_remain = item.qty_remaining;\n                                  }\n                                }\n                              }\n                            }\n                          }\n\n                          if (unscanned_items.length > 0) {\n                            if (serialScanAccess) {\n                              if (type === \"item_present\") {\n                                _this.responseAction(\"scan_success\");\n                              } else {\n                                if (remain_qty >= parseInt(barcode.packing_count)) {\n                                  _this.responseAction(\"scan_success\");\n                                } else {\n                                  _this.alertBox(\"The multi-pack barcode scanned exceeds the quantity remaining\");\n                                }\n                              }\n                            }\n                          } else {\n                            order_complete_flag = true;\n                          }\n\n                          itemFound = true;\n\n                          if (_this.state.blockItemToScan && _this.state.blockItemToScan.name !== item.name || item.qty_remaining === 0) {\n                            confirmProductConfirmation = false;\n                          }\n                        }\n                      } else {\n                        if (item.product_type === \"depends\" && mainItem === false) {\n                          item && item.child_items.map(function (childItem, childItemIndex) {\n                            childItem.barcodes.map(function (childItemBarcode, childItemBarcodeIndex) {\n                              var Barcode = lowercase === true ? childItemBarcode.barcode.toLowerCase() : childItemBarcode.barcode;\n\n                              if (Barcode === bar_code && scanpush === false && item.qty_remaining > 0) {\n                                var _serialScanAccess3 = false;\n\n                                if (enableSerial || childItem.record_serial === false && childItem.second_record_serial === false) {\n                                  _serialScanAccess3 = true;\n                                } else {\n                                  if (childItem.record_serial || childItem.second_record_serial) {\n                                    var _eventType3 = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n\n                                    rejectLocalLog = false;\n\n                                    _this.setState({\n                                      serialRecordPopUpShow: true,\n                                      type: _eventType3\n                                    });\n                                  }\n                                }\n\n                                if (_serialScanAccess3) {\n                                  var tempItem = _extends({}, item);\n\n                                  var tempItem1 = _extends({}, item);\n\n                                  var tempItemChildArr = [];\n                                  var tempItem1ChildArr = [];\n                                  var arr = [];\n                                  tempItem.qty_remaining = 1;\n                                  tempItem.product_type = \"individual\";\n                                  var kitDivide = tempItem1.qty_remaining;\n                                  tempItem.child_items.map(function (child) {\n                                    var newCopy = _extends({}, child);\n\n                                    newCopy.qty_remaining = newCopy.qty_remaining / kitDivide;\n                                    tempItemChildArr.push(newCopy);\n                                  });\n                                  tempItem.child_items = tempItemChildArr;\n                                  tempItem1.qty_remaining = tempItem1.qty_remaining - 1;\n                                  tempItem1.child_items.map(function (childTemp) {\n                                    var newCopy = _extends({}, childTemp);\n\n                                    var sub = newCopy.qty_remaining / kitDivide;\n                                    var final = newCopy.qty_remaining - sub;\n                                    newCopy.qty_remaining = final;\n                                    tempItem1ChildArr.push(newCopy);\n                                    tempItem1.child_items = tempItem1ChildArr;\n                                    arr.push(tempItem, tempItem1);\n                                  });\n                                  unscanned_items.splice(index, 1, arr[0], arr[1]);\n                                }\n\n                                unscanned_items.map(function (updateProduct, updateProductIndex) {\n                                  updateProduct && updateProduct.child_items && updateProduct.child_items.map(function (updateChildItem, updatedChildItemIndex) {\n                                    updateChildItem.barcodes.map(function (barcode) {\n                                      var Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode;\n\n                                      if (Barcode === bar_code && scanpush === false) {\n                                        var _serialScanAccess4 = false;\n\n                                        if (enableSerial || updateChildItem.record_serial === false && updateChildItem.second_record_serial === false) {\n                                          _serialScanAccess4 = true;\n                                        } else {\n                                          if (updateChildItem.record_serial || updateChildItem.second_record_serial) {\n                                            var _eventType4 = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n\n                                            rejectLocalLog = false;\n\n                                            _this.setState({\n                                              serialRecordPopUpShow: true,\n                                              type: _eventType4\n                                            });\n                                          }\n                                        }\n\n                                        if (confirmProductConfirmation === false) {\n                                          if (general_settings.conf_code_product_instruction === \"always\") {\n                                            _this.setState({\n                                              productConfirmationCheck: true,\n                                              blockItemToScan: childItem,\n                                              blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                                            });\n\n                                            skipError = true;\n                                            blockScan = true;\n                                          } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                                            if (childItem.confirmation === true) {\n                                              _this.setState({\n                                                productConfirmationCheck: true,\n                                                blockItemToScan: childItem,\n                                                blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                                              });\n\n                                              skipError = true;\n                                              blockScan = true;\n                                            }\n                                          }\n                                        }\n\n                                        if (blockScan === false || confirmProductConfirmation === true) {\n                                          if (_serialScanAccess4) {\n                                            if (scanned_items.length > 0) {\n                                              scanned_items.map(function (scan, scanIndex) {\n                                                scan.barcodes.map(function (scancode) {\n                                                  var Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode;\n\n                                                  if (type === \"item_present\" ? updateChildItem.qty_remaining >= 1 : updateChildItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                                    if (Scancode === Barcode && Scancode === bar_code && scan.order_item_id === item.order_item_id) {\n                                                      if (scan.qty_remaining === 1 && scanpush === false) {\n                                                        if (type === \"item_present\") {\n                                                          updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                          updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                        } else {\n                                                          updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                          updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                        }\n\n                                                        updateProduct.child_items.splice(updatedChildItemIndex, 1);\n                                                        scanned_items.splice(scanIndex, 1);\n                                                        scanned_items.splice(0, 0, scan);\n\n                                                        _this.setState({\n                                                          typeScanState: updateChildItem.sku\n                                                        });\n\n                                                        scanpush = true;\n                                                        SKU = updateChildItem.sku;\n                                                        Log_count = barcode.packing_count;\n                                                        product_name = updateChildItem.name;\n                                                        qty_remain = updateChildItem.qty_remaining;\n                                                      } else {\n                                                        if (scan.qty_remaining > 0 && scanpush === false) {\n                                                          if (type === \"item_present\") {\n                                                            updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                            updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                            updateChildItem.qty_remaining === 0 && updateProduct.child_items.splice(index, 1);\n                                                          } else {\n                                                            updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                            updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                            updateChildItem.qty_remaining === 0 && updateProduct.child_items.splice(index, 1);\n                                                          }\n\n                                                          scanned_items.splice(scanIndex, 1);\n                                                          scanned_items.splice(0, 0, scan);\n\n                                                          _this.setState({\n                                                            typeScanState: updateChildItem.sku\n                                                          });\n\n                                                          scanpush = true;\n                                                          SKU = updateChildItem.sku;\n                                                          Log_count = barcode.packing_count;\n                                                          product_name = updateChildItem.name;\n                                                          qty_remain = updateChildItem.qty_remaining;\n                                                        }\n\n                                                        if (updateChildItem.qty_remaining === 0) {\n                                                          item.child_items.splice(scanAccess, 1);\n                                                          item.child_items.length === 0 && unscanned_items.splice(index, 1);\n                                                        }\n                                                      }\n                                                    } else {\n                                                      if (Barcode === bar_code && updateChildItem.qty_remaining >= 1) {\n                                                        if (updateChildItem.qty_remaining === 1 && scanpush === false) {\n                                                          if (type === \"item_present\") {\n                                                            updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                            updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                          } else {\n                                                            updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                            updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                          }\n\n                                                          scanned_items.splice(0, 0, updateChildItem);\n                                                          updateProduct.child_items.splice(updatedChildItemIndex, 1);\n\n                                                          _this.setState({\n                                                            typeScanState: updateChildItem.sku\n                                                          });\n\n                                                          scanpush = true;\n                                                          SKU = updateChildItem.sku;\n                                                          Log_count = barcode.packing_count;\n                                                          product_name = updateChildItem.name;\n                                                          qty_remain = updateChildItem.qty_remaining;\n                                                        } else {\n                                                          if (scanpush === false) {\n                                                            if (type === \"item_present\") {\n                                                              updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                              updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                            } else {\n                                                              updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                              updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                            }\n\n                                                            scanned_items.splice(0, 0, updateChildItem);\n\n                                                            _this.setState({\n                                                              typeScanState: updateChildItem.sku\n                                                            });\n\n                                                            scanpush = true;\n                                                            SKU = updateChildItem.sku;\n                                                            Log_count = barcode.packing_count;\n                                                            product_name = updateChildItem.name;\n                                                            qty_remain = updateChildItem.qty_remaining;\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                });\n                                              });\n                                            } else {\n                                              if (Barcode === bar_code && updateChildItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                                if (updateChildItem.qty_remaining === 1 && scanpush === false) {\n                                                  if (type === \"item_present\") {\n                                                    updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                    updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                  } else {\n                                                    updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                    updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                  }\n\n                                                  scanned_items.splice(0, 0, updateChildItem);\n                                                  updateProduct.child_items.splice(updatedChildItemIndex, 1);\n\n                                                  _this.setState({\n                                                    typeScanState: updateChildItem.sku\n                                                  });\n\n                                                  scanpush = true;\n                                                  SKU = updateChildItem.sku;\n                                                  Log_count = barcode.packing_count;\n                                                  product_name = updateChildItem.name;\n                                                  qty_remain = updateChildItem.qty_remaining;\n                                                } else {\n                                                  if (scanpush === false) {\n                                                    if (type === \"item_present\") {\n                                                      updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                      updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                    } else {\n                                                      updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                      updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                    }\n\n                                                    scanned_items.splice(0, 0, updateChildItem);\n\n                                                    _this.setState({\n                                                      typeScanState: updateChildItem.sku\n                                                    });\n\n                                                    scanpush = true;\n                                                    SKU = updateChildItem.sku;\n                                                    Log_count = barcode.packing_count;\n                                                    product_name = updateChildItem.name;\n                                                    qty_remain = updateChildItem.qty_remaining;\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n\n                                          if (unscanned_items.length > 0) {\n                                            if (_serialScanAccess4) {\n                                              if (type === \"item_present\") {\n                                                _this.responseAction(\"scan_success\");\n                                              } else {\n                                                if (remain_qty >= parseInt(barcode.packing_count)) {\n                                                  _this.responseAction(\"scan_success\");\n                                                } else {\n                                                  _this.alertBox(\"The multi-pack barcode scanned exceeds the quantity remaining\");\n                                                }\n                                              }\n                                            }\n                                          } else {\n                                            order_complete_flag = true;\n                                          }\n\n                                          itemFound = true;\n\n                                          if (_this.state.blockItemToScan && _this.state.blockItemToScan.name !== updateChildItem.name || updateChildItem.qty_remaining === 0) {\n                                            confirmProductConfirmation = false;\n                                          }\n                                        }\n                                      }\n                                    });\n                                  });\n                                });\n                              }\n                            });\n                          });\n                          item.qty_remaining === 0 && unscanned_items.splice(index, 1);\n                        }\n                      }\n                    }) : item && item.barcodes.map(function (barcode) {\n                      var Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode;\n\n                      if (Barcode === bar_code && scanpush === false) {\n                        var serialScanAccess = false;\n\n                        if (enableSerial || item.record_serial === false && item.second_record_serial === false) {\n                          serialScanAccess = true;\n                        } else {\n                          if (item.record_serial || item.second_record_serial) {\n                            var eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n                            rejectLocalLog = false;\n\n                            _this.setState({\n                              serialRecordPopUpShow: true,\n                              type: eventType\n                            });\n                          }\n                        }\n\n                        if (confirmProductConfirmation === false) {\n                          if (general_settings.conf_code_product_instruction === \"always\") {\n                            _this.setState({\n                              productConfirmationCheck: true,\n                              blockItemToScan: item,\n                              blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                            });\n\n                            skipError = true;\n                            blockScan = true;\n                          } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                            if (item.confirmation === true) {\n                              _this.setState({\n                                productConfirmationCheck: true,\n                                blockItemToScan: item,\n                                blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                              });\n\n                              skipError = true;\n                              blockScan = true;\n                            }\n                          }\n                        }\n\n                        if (blockScan === false || confirmProductConfirmation === true) {\n                          if (serialScanAccess) {\n                            if (scanned_items.length > 0) {\n                              scanned_items.map(function (scan, scanItemIndex) {\n                                if (scan.order_item_id === item.order_item_id) {\n                                  scan.barcodes.map(function (scancode) {\n                                    var Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode;\n\n                                    if (type === \"item_present\" ? item.qty_remaining >= 1 : item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                      if (Scancode === Barcode && Barcode === bar_code && item.order_item_id === scan.order_item_id) {\n                                        if (scan.qty_remaining === 1 && scanpush === false) {\n                                          if (type === \"item_present\") {\n                                            item.qty_remaining = item.qty_remaining - 1;\n                                            item.scanned_qty = item.scanned_qty + 1;\n                                          } else {\n                                            if (item.qty_remaining > 0) {\n                                              item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                              item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                            }\n                                          }\n\n                                          unscanned_items.splice(scanAccess, 1);\n                                          scanned_items.splice(scanItemIndex, 1);\n                                          scanned_items.splice(0, 0, scan);\n\n                                          _this.setState({\n                                            typeScanState: item.sku\n                                          });\n\n                                          scanpush = true;\n                                          SKU = item.sku;\n                                          Log_count = barcode.packing_count;\n                                          product_name = item.name;\n                                          qty_remain = item.qty_remaining;\n                                        } else {\n                                          if (scan.qty_remaining > 1 && scanpush === false) {\n                                            if (type === \"item_present\" && item.qty_remaining > 0) {\n                                              item.qty_remaining = item.qty_remaining - 1;\n                                              item.scanned_qty = item.scanned_qty + 1;\n                                            } else {\n                                              if (item.qty_remaining > 0) {\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                              }\n                                            }\n\n                                            scanned_items.splice(scanItemIndex, 1);\n                                            scanned_items.splice(0, 0, scan);\n\n                                            _this.setState({\n                                              typeScanState: item.sku\n                                            });\n\n                                            scanpush = true;\n                                            SKU = item.sku;\n                                            Log_count = barcode.packing_count;\n                                            product_name = item.name;\n                                            qty_remain = item.qty_remaining;\n                                          }\n\n                                          if (item.qty_remaining === 0) {\n                                            unscanned_items.splice(scanAccess, 1);\n                                          }\n                                        }\n                                      } else {\n                                        if (Scancode !== bar_code && item.scanned_qty === 0) {\n                                          if (item.qty_remaining === 1 && scanpush === false) {\n                                            if (type === \"item_present\") {\n                                              item.qty_remaining = item.qty_remaining - 1;\n                                              item.scanned_qty = item.scanned_qty + 1;\n                                            } else {\n                                              if (item.qty_remaining > 0) {\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                              }\n                                            }\n\n                                            scanned_items.splice(0, 0, item);\n                                            unscanned_items.splice(scanAccess, 1);\n\n                                            _this.setState({\n                                              typeScanState: item.sku\n                                            });\n\n                                            scanpush = true;\n                                            SKU = item.sku;\n                                            Log_count = barcode.packing_count;\n                                            product_name = item.name;\n                                            qty_remain = item.qty_remaining;\n                                          } else {\n                                            if (scanpush === false && item.qty_remaining > 0) {\n                                              if (type === \"item_present\") {\n                                                item.qty_remaining = item.qty_remaining - 1;\n                                                item.scanned_qty = item.scanned_qty + 1;\n                                              } else {\n                                                if (item.qty_remaining > 0) {\n                                                  item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                                  item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                                }\n                                              }\n\n                                              scanned_items.splice(0, 0, item);\n\n                                              _this.setState({\n                                                typeScanState: item.sku\n                                              });\n\n                                              scanpush = true;\n                                              SKU = item.sku;\n                                              Log_count = barcode.packing_count;\n                                              product_name = item.name;\n                                              qty_remain = item.qty_remaining;\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  });\n                                } else {\n                                  if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                    if (item.qty_remaining === 1 && scanpush === false) {\n                                      if (type === \"item_present\") {\n                                        item.qty_remaining = item.qty_remaining - 1;\n                                        item.scanned_qty = item.scanned_qty + 1;\n                                      } else {\n                                        if (item.qty_remaining > 0) {\n                                          item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                          item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                        }\n                                      }\n\n                                      scanned_items.splice(0, 0, item);\n                                      unscanned_items.splice(scanAccess, 1);\n\n                                      _this.setState({\n                                        typeScanState: item.sku\n                                      });\n\n                                      scanpush = true;\n                                      SKU = item.sku;\n                                      Log_count = barcode.packing_count;\n                                      product_name = item.name;\n                                      qty_remain = item.qty_remaining;\n                                    } else {\n                                      if (scanpush === false && item.qty_remaining > 0) {\n                                        if (type === \"item_present\") {\n                                          item.qty_remaining = item.qty_remaining - 1;\n                                          item.scanned_qty = item.scanned_qty + 1;\n                                        } else {\n                                          if (item.qty_remaining > 0) {\n                                            item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                            item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                          }\n                                        }\n\n                                        scanned_items.splice(0, 0, item);\n\n                                        _this.setState({\n                                          typeScanState: item.sku\n                                        });\n\n                                        scanpush = true;\n                                        SKU = item.sku;\n                                        Log_count = barcode.packing_count;\n                                        product_name = item.name;\n                                        qty_remain = item.qty_remaining;\n                                      }\n                                    }\n                                  }\n                                }\n                              });\n                            } else {\n                              if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                if (item.qty_remaining === 1 && scanpush === false) {\n                                  if (type === \"item_present\") {\n                                    item.qty_remaining = item.qty_remaining - 1;\n                                    item.scanned_qty = item.scanned_qty + 1;\n                                  } else {\n                                    if (item.qty_remaining > 0) {\n                                      item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                      item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                    }\n                                  }\n\n                                  scanned_items.splice(0, 0, item);\n                                  unscanned_items.splice(scanAccess, 1);\n\n                                  _this.setState({\n                                    typeScanState: item.sku\n                                  });\n\n                                  scanpush = true;\n                                  SKU = item.sku;\n                                  Log_count = barcode.packing_count;\n                                  product_name = item.name;\n                                  qty_remain = item.qty_remaining;\n                                } else {\n                                  if (scanpush === false && item.qty_remaining > 0) {\n                                    if (type === \"item_present\") {\n                                      item.qty_remaining = item.qty_remaining - 1;\n                                      item.scanned_qty = item.scanned_qty + 1;\n                                    } else {\n                                      if (item.qty_remaining > 0) {\n                                        item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                        item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                      }\n                                    }\n\n                                    scanned_items.splice(0, 0, item);\n\n                                    _this.setState({\n                                      typeScanState: item.sku\n                                    });\n\n                                    scanpush = true;\n                                    SKU = item.sku;\n                                    Log_count = barcode.packing_count;\n                                    product_name = item.name;\n                                    qty_remain = item.qty_remaining;\n                                  }\n                                }\n                              }\n                            }\n                          }\n\n                          if (unscanned_items.length > 0) {\n                            if (serialScanAccess) {\n                              if (type === \"item_present\") {\n                                _this.responseAction(\"scan_success\");\n                              } else {\n                                if (remain_qty >= parseInt(barcode.packing_count)) {\n                                  _this.responseAction(\"scan_success\");\n                                } else {\n                                  _this.alertBox(\"The multi-pack barcode scanned exceeds the quantity remaining\");\n                                }\n                              }\n                            }\n                          } else {\n                            order_complete_flag = true;\n                          }\n\n                          if (_this.state.blockItemToScan && _this.state.blockItemToScan.name !== item.name || item.qty_remaining === 0) {\n                            confirmProductConfirmation = false;\n                          }\n\n                          itemFound = true;\n                        }\n                      }\n                    });\n                  }\n                }\n\n                return item;\n              });\n\n              if (skipError === false) {\n                itemFound === false ? _this.responseAction(\"scan_fail\") : \"\";\n              }\n            }\n          } else {\n            order_complete_flag = true;\n          }\n\n          order.order.unscanned_items.map(function (noCode, index) {\n            if (noCode.barcodes && noCode.barcodes.length === 1 && noCode.barcodes[0].barcode === \"noBarcode\") {\n              noCode.barcodes = [];\n            }\n          });\n\n          if (_this.state.serialRecordInput !== \"\") {\n            temp_order = updateSerialLog;\n          } else {\n            temp_order[\"input\"] = event_code;\n            temp_order[\"id\"] = order_num;\n            temp_order[\"order_item_id\"] = unscanned_items.length > 0 ? unscanned_items[0].order_item_id : scanned_items.length > 0 ? scanned_items[0].order_item_id : \"\";\n            temp_order[\"time\"] = new Date();\n            temp_order[\"rem_qty\"] = remain_qty;\n            temp_order[\"qty_rem\"] = qty_remain;\n            temp_order[\"SKU\"] = SKU ? SKU : unscanned_items.length > 0 && unscanned_items[0].sku;\n            temp_order[\"Log_count\"] = Log_count;\n            temp_order[\"product_name\"] = product_name;\n            temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n            temp_order[\"actionBarcode\"] = ActionBarcode;\n\n            if (type !== \"item_present\") {\n              temp_order[\"state\"] = 'scanpack.rfp.default';\n            }\n\n            temp_order[\"increment_id\"] = order.order.increment_id;\n            temp_order[\"event\"] = _this.state.bar_code ? \"regular\" : \"click_scan\";\n            temp_order[\"updated_at\"] = order.order.updated_at;\n            event_scanned === true ? temp_order[\"event\"] = \"regular\" : temp_order[\"event\"];\n          }\n\n          if (stop_add_log !== true && temp_order !== undefined) {\n            if (order_complete_flag) {\n              _this.updateLog(temp_order, \"order_complete\");\n            } else {\n              _this.updateLog(temp_order, Action_Type);\n            }\n\n            if (_this.state.serialRecordInput === \"\" && rejectLocalLog) {\n              localLogs.splice(0, 0, temp_order);\n            }\n          }\n\n          _this.setState({\n            scanned_items: scanned_items,\n            serialRecordInput: \"\"\n          });\n\n          blockScan = false;\n        } else {\n          if (event.keyCode === 13 && bar_code === \"\") {\n            _this.responseAction(\"not_ready\");\n          }\n        }\n      }\n\n      try {} catch (error) {}\n\n      enableSerial = false;\n    };\n\n    _this.updateLog = function _callee8(logData, type) {\n      var temp, getItem, logging, LoggingArray, indexToRemove, numberToRemove, getTemp, arr;\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              temp = [];\n              _context8.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logsArray\"));\n\n            case 3:\n              getItem = _context8.sent;\n              _context8.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"Logging\"));\n\n            case 6:\n              logging = _context8.sent;\n              LoggingArray = JSON.parse(logging);\n\n              if (LoggingArray && LoggingArray.length >= 80) {\n                indexToRemove = 0;\n                numberToRemove = 1;\n                LoggingArray.splice(indexToRemove, numberToRemove);\n              }\n\n              LoggingArray && LoggingArray.length > 0 ? LoggingArray.push(logData) : LoggingArray = [logData];\n              getTemp = getItem !== \"undefined\" && JSON.parse(getItem);\n              arr = getTemp ? temp.concat(getTemp) : temp;\n              arr.push(logData);\n              console.log(arr);\n              _context8.next = 16;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"logsArray\", JSON.stringify(arr)));\n\n            case 16:\n              if (logData && logData.event === \"scanned\") {\n                _this.multipleTime();\n              }\n\n              if (type === \"issue\") {\n                _this.multipleTime();\n\n                _this.nav(_this.state.order);\n              }\n\n              if (type === \"RESTART\") {\n                _this.multipleTime();\n\n                _this.nav(_this.state.order);\n              }\n\n              if (type === \"order_complete\") {\n                if (_this.state.scan_pack_settings.post_scanning_option === \"None\") {\n                  _this.responseAction(\"complete_order\");\n                }\n              }\n\n              if (type === \"recordTracking\") {\n                _this.responseAction(\"complete_order\");\n\n                _this.setState({\n                  trackingOrderInput: \"\"\n                });\n              }\n\n              _context8.next = 23;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"Logging\", JSON.stringify(LoggingArray)));\n\n            case 23:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.close = function (type) {\n      if (_this.state.order) {\n        var scan_pack_settings = _this.state.scan_pack_settings;\n\n        if (type === \"show_customer_notes\") {\n          scan_pack_settings['show_customer_notes'] = false;\n        }\n\n        if (type === \"show_internal_notes\") {\n          scan_pack_settings['show_internal_notes'] = false;\n        }\n\n        if (type === \"notes_toPacker\") {\n          _this.setState({\n            notes_toPacker_enable: false\n          });\n        }\n\n        _this.setState({\n          scan_pack_settings: scan_pack_settings\n        });\n      }\n    };\n\n    _this.leaveComponent = function _callee9(order, type) {\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (type === \"submitLog\") {\n                _this.multipleTime();\n              }\n\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.hideShipment = function () {\n      _this.setState({\n        showshipments: false\n      });\n    };\n\n    _this.callShipmentOrder = function (order) {\n      var shipmentOrder = _this.state.shipmentOrder;\n\n      if (order.increment_id !== \"\") {\n        callOrderSuccess = true;\n        shipmentOrder.input = order.increment_id;\n\n        _this.hitApi(shipmentOrder);\n      }\n    };\n\n    _this.hitApi = function (shipmentOrder) {\n      if (Platform.OS === \"ios\" || Platform.OS === \"android\") {\n        _this.InternetCheck(shipmentOrder);\n      } else {\n        _this.props.SearchScanpackOrder(shipmentOrder);\n      }\n    };\n\n    _this.InternetCheck = function _callee10(shipmentOrder) {\n      var connectionInfo;\n      return _regeneratorRuntime.async(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regeneratorRuntime.awrap(NetInfo.fetch());\n\n            case 2:\n              connectionInfo = _context10.sent;\n\n              if (connectionInfo.isConnected) {\n                _this.props.SearchScanpackOrder(shipmentOrder);\n              } else {\n                _this.setState({\n                  errorMessageShow: true\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.updateSerialLog = function _callee11(logData) {\n      var temp, getItem, getTemp, arr;\n      return _regeneratorRuntime.async(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              temp = [];\n              _context11.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logsArray\"));\n\n            case 3:\n              getItem = _context11.sent;\n              getTemp = getItem !== \"undefined\" && JSON.parse(getItem);\n              arr = getTemp ? temp.concat(getTemp) : temp;\n              arr.push(logData);\n              _context11.next = 9;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"logsArray\", JSON.stringify(arr)));\n\n            case 9:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.allTypeScan = function (type, item, recordSerial) {\n      if (type === \"clickscan\") {\n        _this.clickScan(item);\n      }\n\n      if (type === \"barcode\") {\n        _this.scanBarcode();\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      if (type === \"scan_all_item\") {\n        _this.scanAllItem(\"scan_all_item\");\n      }\n\n      if (type === \"submit_type_scan\") {\n        _this.submitTypeScan(\"submit_type_scan\");\n      }\n    };\n\n    _this.handleSerialRecordInput = function (e) {\n      _this.setState({\n        serialRecordInput: e\n      });\n    };\n\n    _this.navButton = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedItemShow: false,\n        nextItemShow: true,\n        scannedItemShow: false\n      }, function () {\n        console.log(\"Update\");\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.navButtonLeft = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedItemShow: true,\n        nextItemShow: false,\n        scannedItemShow: false\n      }, function () {\n        console.log(\"Update\");\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.showScannedList = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedList: false,\n        scannedList: true,\n        logList: false\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.showUnscannedList = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedList: true,\n        scannedList: false,\n        logList: false\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.showLogList = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedList: false,\n        scannedList: false,\n        logList: true\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.showNotesToPacker = function () {\n      _this.setState({\n        notes_toPackerFlag: false\n      });\n\n      _this.currentFocus();\n    };\n\n    _this.assignUniquebarcode = function () {\n      _this.setState({\n        shareBarcodeShow: false,\n        alias: false,\n        addBarcodeWindow: false,\n        addBarcodeText: \"\"\n      });\n    };\n\n    _this.proceedAliasing = function () {\n      var alias_product_data_id = _this.state.updateProduct.alias_product_data.id;\n      var current_product_data_id = [];\n      current_product_data_id.push(_this.state.updateProduct.current_product_data.id);\n      var details = {\n        product_alias_ids: current_product_data_id\n      };\n\n      _this.props.updateProductAlias(alias_product_data_id, details);\n\n      updateProductInfoSuccess = true;\n    };\n\n    _this.sameBarcode = function () {\n      var newHash = {\n        value: _this.state.addBarcodeText,\n        var: \"barcode\",\n        id: _this.state.addBarcodeItem.product_id,\n        permit_same_barcode: true\n      };\n\n      _this.props.updateProductList(newHash);\n\n      _this.setState({\n        updateProductApiCall: new Date(),\n        shareBarcodeShow: false,\n        alias: false\n      });\n\n      updateProductApi = true;\n    };\n\n    _this.state = {\n      shipmentOrder: {\n        \"input\": \"\",\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null,\n        \"app\": \"app\"\n      },\n      data: {\n        \"input\": \"\",\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null\n      },\n      orderList: {\n        \"filter\": \"awaiting\",\n        \"order\": \"DESC\",\n        \"limit\": \"1\",\n        \"offset\": \"0\",\n        \"app\": \"app\",\n        \"count\": 0\n      },\n      orderDetail: {\n        \"filter\": \"awaiting\",\n        \"order\": \"DESC\",\n        \"limit\": \"1\",\n        \"offset\": \"0\",\n        \"type\": \"app\"\n      },\n      type: \"\",\n      log: [],\n      localLogs: [],\n      firstScreen: true,\n      secondScreen: false,\n      thirdScreen: false,\n      logScreen: false,\n      bar_code: \"\",\n      alert: false,\n      notes_fromPacker: \"\",\n      typeScanAlert: false,\n      typeScanCount: \"\",\n      notes_toPacker_enable: true,\n      showshipments: true,\n      errorMessage: \"Please check the internet connection\",\n      errorMessageShow: false,\n      matchOrderShow: true,\n      typeScanState: \"\",\n      message: \"\",\n      unscannedItemShow: false,\n      nextItemShow: true,\n      scannedItemShow: false,\n      typeScanDeductCountState: \"\",\n      issueFlag: false,\n      noteFlag: false,\n      trackingOrderInput: \"\",\n      trackingNumberView: false,\n      postScanningFieldLabel: \"\",\n      postScanningMessageDetail: \"\",\n      timeSecond: false,\n      postScan: false,\n      serialRecordPopUpShow: false,\n      serialRecordInput: \"\",\n      serialRecordTwo: \"\",\n      clickScanConfirmInput: \"\",\n      serialRecordOne: \"\",\n      notes_toPackerFlag: true,\n      notes_internalFlag: true,\n      customer_commentsFlag: true,\n      scanSuccessAction: false,\n      scanFailAction: false,\n      orderCompleteAction: false,\n      responseShowAction: false,\n      errorMessageClickScanConfirmation: false,\n      loadOrderSpinner: false,\n      loader: false,\n      unscannedItemPerPage: 1,\n      scannedItemPerPage: 1,\n      productConfirmationCheck: false,\n      productConfirmationCheckInput: \"\",\n      errorMessageProductConfirmationCheck: false,\n      blockScan: false,\n      orderConfirmPopUp: false,\n      OrderConfirmationCheckInput: \"\",\n      errorMessageOrderConfirmationCheck: false,\n      popUpModelShow: false,\n      reRenderFocus: false,\n      clickScanConfirmation: false,\n      focusBarcode: false,\n      scannedList: true,\n      unscannedList: false,\n      logList: false,\n      addBarcodeWindow: false,\n      alias: false,\n      Product: []\n    };\n    _this.barcode = React.createRef();\n    _this.serialRecord = React.createRef();\n    _this.multipleTime = _this.multipleTime.bind(_assertThisInitialized(_this));\n    _this.responseAction = _this.responseAction.bind(_assertThisInitialized(_this));\n    _this.redirectFun = _this.redirectFun.bind(_assertThisInitialized(_this));\n    _this.InputField = React.createRef();\n    return _this;\n  }\n\n  _createClass(ScanPackItem, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        loader: true\n      });\n      this.getUserInfo();\n      this.apiCall();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var searchOrder = this.props.searchOrder;\n      var searchData = searchOrder && searchOrder.data;\n      var asyncData = this.props && this.props.bothSettings;\n      var updateLog = this.props && this.props.updateLog;\n      var order = {\n        \"order\": this.props && this.props.route.params && this.props.route.params.data\n      };\n      var setFocus = this.state.orderConfirmPopUp === false && this.state.addBarcodeWindow === false && this.state.responseShowAction === false && this.state.typeScanAlert === false && this.state.popUpModelShow === false && this.state.reRenderFocus === false && this.state.serialRecordPopUpShow === false && this.state.clickScanConfirmation === false && this.state.productConfirmationCheck === false;\n\n      if (setFocus === true || setFocus === true && this.state.focusBarcode) {\n        try {\n          this.InputField.current.focus();\n        } catch (error) {}\n      }\n\n      if (this.props && this.props.route && this.props.route.params && this.props.route.params.data && this.props.route.params.data.from === \"productDetailPage\" && this.props.route.params.data !== this.state.productDetail) {\n        var data = {\n          \"input\": this.props.route.params.data.increment_id,\n          \"state\": \"scanpack.rfo\",\n          \"id\": null,\n          \"box_id\": null,\n          \"store_order_id\": null,\n          \"app\": \"app\"\n        };\n        updateFromProductSuccess = true;\n        this.props.SearchScanpackOrder(data);\n        this.setState({\n          productDetail: this.props.route.params.data,\n          loader: true,\n          apiCallTime: new Date()\n        });\n      }\n\n      if (updateFromProductSuccess && this.props && this.props.searchOrder && this.props.searchOrder) {\n        var searchResult = this.props.searchOrder && this.props.searchOrder.searchOrder;\n\n        var _order = searchResult && searchResult.data.order && searchResult.data.order[0];\n\n        if (searchResult) {\n          if (searchResult.matched) {\n            debugger;\n\n            if (searchResult.data.status === \"awaiting\" && this.props.route.params.data.increment_id === this.props.searchOrder.searchOrder.data.order_num) {\n              this.setState({\n                oldOne: this.props.searchOrder,\n                loader: false,\n                order: this.props.searchOrder.searchOrder.data.order[0].scan_hash.data\n              });\n              updateFromProductSuccess = false;\n            }\n\n            if (searchResult.data.status === \"onhold\" && this.props.route.params.data.order.increment_id === this.props.searchOrder.searchOrder.data.order_num) {\n              this.setState({\n                oldOne: this.props.searchOrder,\n                loader: false,\n                order: this.props.searchOrder.searchOrder.data.order[0].scan_hash.data\n              });\n              updateFromProductSuccess = false;\n            }\n          }\n        }\n      }\n\n      if (this.props && this.props.route && this.props.route.params && this.props.route.params.data && this.props.route.params.data.from === \"orderDetailPage\" && this.props.route.params.data !== this.state.detailData) {\n        this.setState({\n          order: this.props.route.params.data,\n          detailData: this.props.route.params.data,\n          notes_toPackerFlag: true,\n          notes_internalFlag: true,\n          customer_commentsFlag: true\n        });\n        updateFromOrderDetailPage = false;\n      }\n\n      if (this.props && this.props.bothSettings && this.props.bothSettings !== this.state.bothSettings) {\n        this.setState({\n          scanpackSettings: this.props.bothSettings.data.data.scanpack_setting,\n          generalSettings: this.props.bothSettings.data.data.general_setting,\n          scan_pack_settings: this.props.bothSettings.data.data.scanpack_setting,\n          general_settings: this.props.bothSettings.data.data.general_setting,\n          bothSettings: this.props.bothSettings,\n          loader: false\n        });\n\n        if (this.props.bothSettings.data.data.general_setting.conf_req_on_notes_to_packer === \"always\") {\n          this.setState({\n            orderConfirmPopUp: true\n          });\n        }\n\n        if (this.props.bothSettings.data.data.general_setting.conf_req_on_notes_to_packer === \"optional\") {\n          if (order.order.order.note_confirmation) {\n            this.setState({\n              orderConfirmPopUp: true\n            });\n          }\n        }\n      }\n\n      if (updateProductInfoSuccess === true && this.props && this.props.updateProduct && this.props.updateProduct.data) {\n        updateProductInfoSuccess = false;\n        this.setState({\n          alias: false\n        });\n        var _data = {\n          \"input\": this.props.route.params.data.order.increment_id,\n          \"state\": \"scanpack.rfo\",\n          \"id\": null,\n          \"box_id\": null,\n          \"store_order_id\": null,\n          \"app\": \"app\"\n        };\n        this.props.SearchScanpackOrder(_data);\n        updateFromProductSuccess = true;\n      }\n\n      if (asyncData !== \"\") {\n        var convert = asyncData;\n        var scData = convert && convert.data && convert.data.data && convert.data.data.scanpack_setting;\n        var gsData = convert && convert.data && convert.data.data && convert.data.data.general_setting;\n\n        if (ScanPackSettingsAccess === false && scData) {\n          ScanPackSettingsAccess = true;\n\n          if (scData && scData.post_scanning_option !== \"None\") {\n            var type = scData.post_scanning_option;\n\n            if (type === \"Record\") {\n              this.setState({\n                notes_toPackerFlag: false,\n                notes_internalFlag: false,\n                customer_commentsFlag: false,\n                postScanningFieldLabel: \"Scan Tracking Number for Order \" + order.order.order.increment_id,\n                postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\n              });\n            }\n\n            if (type === \"Verify\") {\n              var postScanMessage = \"\";\n\n              if (order.order.order.tracking_num !== null && order.order.order.tracking_num !== \"\") {\n                postScanMessage = \"Please scan the shipping label.\";\n              } else {\n                postScanMessage = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\";\n              }\n\n              this.setState({\n                notes_toPackerFlag: false,\n                notes_internalFlag: false,\n                customer_commentsFlag: false,\n                postScanningFieldLabel: \"Scan Shipping Label for Order \" + order.order.order.increment_id,\n                postScanningMessageDetail: postScanMessage\n              });\n            }\n          }\n\n          this.setState({\n            scan_pack_settings: scData\n          });\n          this.props.GetItem(\"GeneralSetting\");\n        }\n\n        if (GeneralSettingAccess === false && gsData !== undefined) {\n          GeneralSettingAccess = true;\n          this.setState({\n            general_settings: gsData\n          });\n        }\n      }\n\n      if (this.props.updateLog.time !== this.state.logTime) {\n        if (this.props.updateLog && this.props.updateLog.logs && this.props.updateLog.logs.status === \"OK\" && this.props.updateLog.updateLog && this.props.updateLog.time) {\n          this.setState({\n            logTime: this.props.updateLog.time\n          });\n        }\n      }\n\n      if (this.props.route.params.restart === true) {\n        this.props.route.params.restartButton;\n      }\n\n      if (updateProductApi === true && this.props && this.props.updateProduct && this.props.updateProduct.data !== \"\" && this.props.updateProduct.time >= this.state.updateProductApiCall) {\n        updateProductApi = false;\n        var productID = this.state.addBarcodeItem && this.state.addBarcodeItem.product_id;\n        var _order2 = this.state.order;\n\n        if (this.props.updateProduct.data.show_alias_popup) {\n          this.setState({\n            alias: true,\n            addBarcodeWindow: false,\n            Product: this.props.updateProduct.data,\n            updateProduct: this.props.updateProduct.data\n          });\n        } else {\n          _order2.order.unscanned_items && _order2.order.unscanned_items.length > 0 && _order2.order.unscanned_items.map(function (item, index) {\n            if (item.child_items.length > 0) {\n              item.child_items.map(function (child, index) {\n                if (child.product_id === productID) {\n                  child.barcodes = [{\n                    barcode: _this2.state.addBarcodeText,\n                    created_at: \"\",\n                    id: 0,\n                    packing_count: \"1\",\n                    product_id: productID,\n                    updated_at: new Date()\n                  }];\n                }\n              });\n            } else {\n              if (item.product_id === productID) {\n                item.barcodes = [{\n                  barcode: _this2.state.addBarcodeText,\n                  created_at: \"\",\n                  id: 0,\n                  packing_count: \"1\",\n                  product_id: productID,\n                  updated_at: new Date()\n                }];\n              }\n            }\n          });\n          var unItem = _order2.order.unscanned_items.length > 0 && _order2.order.unscanned_items[0];\n          var item = unItem.child_items.length > 0 ? unItem.child_items[0] : unItem;\n          this.clickScan(item);\n          this.setState({\n            addBarcodeWindow: false,\n            addBarcodeText: \"\",\n            addBarcodeItem: \"\",\n            order: _order2,\n            updateProductApiCall: \"\"\n          });\n        }\n      }\n    }\n  }, {\n    key: \"redirectFun\",\n    value: function redirectFun() {\n      this.props.SearchScanpackOrder(\"\", false);\n      this.props.navigation.navigate(\"ScanPack\", {\n        update: true,\n        time: new Date()\n      });\n    }\n  }, {\n    key: \"trackingSubmit\",\n    value: function trackingSubmit(trackingNumber) {\n      var setting = this.state.scan_pack_settings;\n      var trackingLength = trackingNumber.length;\n      var temp_order = {};\n      var num = \"\";\n      var order = this.state.order;\n      var order_num = order.order.id;\n      var localLogs = this.state.localLogs;\n      var strict_cc = this.state.general_settings.strict_cc;\n\n      if (setting.post_scanning_option !== \"None\") {\n        if (this.state.timeSecond === true) {\n          var type = setting.post_scanning_option_second;\n\n          if (type === \"Record\") {\n            if (setting.tracking_number_validation_enabled) {\n              var prefix = setting.tracking_number_validation_prefixes.split(\",\");\n              var validate = \"\";\n              var scan = false;\n              var scanAccess = false;\n              prefix.map(function (prefix, index) {\n                var prefixLength = prefix.length;\n                validate = trackingNumber.slice(0, prefixLength);\n\n                if (scanAccess === false) {\n                  if (validate === prefix) {\n                    temp_order[\"id\"] = order_num;\n                    temp_order[\"input\"] = trackingNumber;\n                    temp_order[\"state\"] = 'scanpack.rfp.default';\n                    temp_order[\"event\"] = \"record\";\n                    temp_order[\"updated_at\"] = order.order.updated_at;\n                    temp_order[\"increment_id\"] = order.order.increment_id;\n                    localLogs.splice(0, 0, temp_order);\n                    scan = true;\n                    scanAccess = true;\n                  } else {\n                    scan = false;\n                  }\n                }\n              });\n\n              if (scan === true) {\n                localLogs.splice(0, 0, temp_order);\n                this.updateLog(temp_order, \"recordTracking\");\n              } else {\n                this.responseAction(\"scan_fail\");\n                this.alertBox(\"The tracking number barcode you scanned does not match any of the saved prefixes. Please check your tracking validation settings or contact an admin.\", true);\n              }\n            } else {\n              temp_order[\"id\"] = order_num;\n              temp_order[\"input\"] = trackingNumber;\n              temp_order[\"state\"] = 'scanpack.rfp.default';\n              temp_order[\"event\"] = \"record\";\n              temp_order[\"updated_at\"] = order.order.updated_at;\n              temp_order[\"increment_id\"] = order.order.increment_id;\n              localLogs.splice(0, 0, temp_order);\n              this.updateLog(temp_order, \"recordTracking\");\n            }\n          }\n\n          if (type === \"Verify\") {\n            var trackNumber = order.order.tracking_num;\n\n            if (setting.post_scanning_option === \"Record\" && setting.post_scanning_option_second === \"Verify\") {\n              trackNumber = 123;\n            }\n\n            if (trackNumber !== null) {\n              var _scan = false;\n\n              if (this.state.scanSecondTime === true) {\n                if (trackingNumber === this.state.userInfo.confirmation_code || strict_cc === false && trackingNumber === \"\") {\n                  _scan = true;\n                }\n              }\n\n              if (trackingNumber === trackNumber || _scan === true) {\n                temp_order[\"id\"] = order_num;\n                temp_order[\"input\"] = trackingNumber;\n                temp_order[\"state\"] = this.state.trackingStateSecond === \"scanpack.rfp.no_match\" ? \"scanpack.rfp.no_match\" : \"scanpack.rfp.verifying\";\n                temp_order[\"state\"] = temp_order[\"event\"] = \"verify\";\n                temp_order[\"updated_at\"] = order.order.updated_at;\n                temp_order[\"increment_id\"] = order.order.increment_id;\n                localLogs.splice(0, 0, temp_order);\n                this.updateLog(temp_order, \"recordTracking\");\n                this.setState({\n                  trackingStateSecond: \"\"\n                });\n              } else {\n                this.responseAction(\"scan_fail\");\n                this.setState({\n                  trackingStateSecond: \"scanpack.rfp.no_match\",\n                  scanSecondTime: true,\n                  postScanningMessageDetail: \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\n                });\n              }\n            } else {\n              var message = \"\";\n\n              if (order.order.tracking_num !== null && order.order.tracking_num !== \"\") {\n                message = \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\";\n              } else {\n                message = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\";\n              }\n\n              if (this.state.postScanSecond) {\n                if (trackingNumber === this.state.userInfo.confirmation_code || strict_cc === false && trackingNumber === \"\") {\n                  temp_order[\"id\"] = order_num;\n                  temp_order[\"input\"] = trackingNumber;\n                  temp_order[\"state\"] = 'scanpack.rfp.no_tracking_info';\n                  temp_order[\"event\"] = \"verify\";\n                  temp_order[\"updated_at\"] = order.order.updated_at;\n                  temp_order[\"increment_id\"] = order.order.increment_id;\n                  localLogs.splice(0, 0, temp_order);\n                  this.updateLog(temp_order, \"recordTracking\");\n                  this.setState({\n                    postScanSecond: false\n                  });\n                } else {\n                  this.responseAction(\"scan_fail\");\n                }\n              }\n\n              this.setState({\n                postScanSecond: true,\n                postScanningMessageDetail: message\n              });\n            }\n          }\n        } else {\n          var _type = setting.post_scanning_option;\n\n          if (_type === \"Record\") {\n            if (setting.tracking_number_validation_enabled) {\n              var _prefix = setting.tracking_number_validation_prefixes.split(\",\");\n\n              var _validate = \"\";\n              var _scan2 = false;\n              var _scanAccess = false;\n\n              _prefix.map(function (prefix, index) {\n                var prefixLength = prefix.length;\n                _validate = trackingNumber.slice(0, prefixLength);\n\n                if (_scanAccess === false) {\n                  if (_validate === prefix) {\n                    temp_order[\"id\"] = order_num;\n                    temp_order[\"input\"] = trackingNumber;\n                    temp_order[\"state\"] = 'scanpack.rfp.default';\n                    temp_order[\"event\"] = \"record\";\n                    temp_order[\"updated_at\"] = order.order.updated_at;\n                    temp_order[\"increment_id\"] = order.order.increment_id;\n                    _scan2 = true;\n                    _scanAccess = true;\n                  } else {\n                    _scan2 = false;\n                  }\n                }\n              });\n\n              if (_scan2 === true) {\n                localLogs.splice(0, 0, temp_order);\n                this.updateLog(temp_order, \"recordTracking\");\n\n                if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                  this.postScanFunction(setting.post_scanning_option_second, true);\n                  this.setState({\n                    trackingOrderInput: \"\"\n                  });\n                  this.updateLog(temp_order, \"tracking\");\n                } else {\n                  this.updateLog(temp_order, \"recordTracking\");\n                }\n              } else {\n                this.responseAction(\"scan_fail\");\n                this.alertBox(\"The tracking number barcode you scanned does not match any of the saved prefixes. Please check your tracking validation settings or contact an admin.\", true);\n              }\n            } else {\n              temp_order[\"id\"] = order_num;\n              temp_order[\"input\"] = trackingNumber;\n              temp_order[\"state\"] = 'scanpack.rfp.default';\n              temp_order[\"event\"] = \"record\";\n              temp_order[\"updated_at\"] = order.order.updated_at;\n              temp_order[\"increment_id\"] = order.order.increment_id;\n\n              if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                this.postScanFunction(setting.post_scanning_option_second, true);\n                this.setState({\n                  trackingOrderInput: \"\"\n                });\n                this.updateLog(temp_order, \"tracking\");\n              } else {\n                localLogs.splice(0, 0, temp_order);\n                this.updateLog(temp_order, \"recordTracking\");\n              }\n            }\n          }\n\n          if (_type === \"Verify\") {\n            var _trackNumber = order.order.tracking_num;\n\n            if (order.order.tracking_num !== null) {\n              var _scan3 = false;\n\n              if (this.state.scanSecondTime === true) {\n                if (trackingNumber === this.state.userInfo.confirmation_code || strict_cc === false && trackingNumber === \"\") {\n                  _scan3 = true;\n                }\n              }\n\n              if (trackingNumber.length > order.order.tracking_num.length || trackingNumber.length === order.order.tracking_num.length) {\n                var tempNum = trackingLength - order.order.tracking_num.length;\n                num = trackingNumber.slice(tempNum);\n              }\n\n              if (num === order.order.tracking_num || _scan3 === true) {\n                temp_order[\"id\"] = order_num;\n                temp_order[\"input\"] = trackingNumber;\n                temp_order[\"state\"] = this.state.trackingState === \"scanpack.rfp.no_match\" ? \"scanpack.rfp.no_match\" : \"scanpack.rfp.verifying\";\n                temp_order[\"event\"] = \"verify\";\n                temp_order[\"updated_at\"] = order.order.updated_at;\n                temp_order[\"increment_id\"] = order.order.increment_id;\n\n                if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                  this.postScanFunction(setting.post_scanning_option_second, true);\n                  this.updateLog(temp_order, \"tracking\");\n                } else {\n                  localLogs.splice(0, 0, temp_order);\n                  this.updateLog(temp_order, \"recordTracking\");\n                }\n              } else {\n                this.responseAction(\"scan_fail\");\n                this.setState({\n                  trackingState: \"scanpack.rfp.no_match\",\n                  scanSecondTime: true,\n                  postScanningMessageDetail: \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\n                });\n              }\n            } else {\n              var _message = \"\";\n\n              if (order.order.tracking_num !== null && order.order.tracking_num !== \"\") {\n                _message = \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\";\n              } else {\n                _message = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\";\n              }\n\n              if (this.state.postScan) {\n                if (trackingNumber === this.state.userInfo.confirmation_code || strict_cc === false && trackingNumber === \"\") {\n                  temp_order[\"id\"] = order_num;\n                  temp_order[\"input\"] = trackingNumber;\n                  temp_order[\"state\"] = 'scanpack.rfp.no_tracking_info';\n                  temp_order[\"event\"] = \"verify\";\n                  temp_order[\"updated_at\"] = order.order.updated_at;\n                  temp_order[\"increment_id\"] = order.order.increment_id;\n\n                  if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                    this.postScanFunction(setting.post_scanning_option_second, true);\n                    this.setState({\n                      postScan: false\n                    });\n                    this.updateLog(temp_order, \"tracking\");\n                  } else {\n                    localLogs.splice(0, 0, temp_order);\n                    this.updateLog(temp_order, \"recordTracking\");\n                    this.setState({\n                      postScan: false\n                    });\n                  }\n                } else {\n                  this.responseAction(\"scan_fail\");\n                  this.setState({\n                    postScanningMessageDetail: _message\n                  });\n                }\n              }\n\n              this.setState({\n                postScan: true,\n                postScanningMessageDetail: _message\n              });\n            }\n          }\n        }\n      }\n\n      this.setState({\n        trackingOrderInput: \"\"\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var Order = this.state.order;\n      searchOrderCheck = false;\n      ScanPackSettingsAccess = false;\n      GeneralSettingAccess = false;\n      orderSaveSuccess = false;\n      updateLogSuccess = true;\n\n      if (Order) {\n        this.leaveComponent(Order);\n      }\n    }\n  }, {\n    key: \"enableToggle\",\n    value: function enableToggle(e) {\n      if (this.props.route && this.props.route.params) {\n        if (e === 1) {\n          this.props.route.params.item(true);\n        } else {\n          this.props.route.params.item(false);\n        }\n      }\n    }\n  }, {\n    key: \"serialLogUpdate\",\n    value: function serialLogUpdate(type, item, recordFrom, order_id, both) {\n      var temp = {};\n      var localLog = {};\n      var localLogs = this.state.localLogs;\n      temp[\"clicked\"] = type === \"clickscan\" ? true : false;\n      temp[\"barcode\"] = item.barcodes[0].barcode;\n      temp[\"order_id\"] = order_id;\n      temp[\"order_item_id\"] = item.order_item_id;\n      temp[\"product_lot_id\"] = null;\n      temp[\"ask\"] = recordFrom === \"recordOne\" ? true : false;\n      temp[\"ask_2\"] = recordFrom === \"recordTwo\" ? true : false;\n      temp[\"product_id\"] = item.product_id;\n\n      if (both === false) {\n        temp[\"is_scan\"] = true;\n        temp[\"second_serial\"] = false;\n      } else {\n        if (recordFrom === \"recordOne\") {\n          temp[\"is_scan\"] = false;\n          temp[\"second_serial\"] = false;\n        } else {\n          temp[\"is_scan\"] = true;\n          temp[\"second_serial\"] = true;\n        }\n      }\n\n      temp[\"box_id\"] = null;\n      temp[\"serial\"] = this.state.serialRecordInput;\n      temp[\"event\"] = \"serial_scan\";\n      updateSerialLog = temp;\n      localLog[\"order_item_id\"] = item && item.order_item_id;\n      localLog[\"time\"] = new Date();\n      localLog[\"event\"] = \"serial_scan\";\n      localLog[\"SKU\"] = item.sku ? item.sku : \"\";\n      localLog[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\";\n\n      if (both) {\n        if (recordFrom === \"recordTwo\") {\n          localLogs.splice(0, 0, localLog);\n        }\n      } else {\n        localLogs.splice(0, 0, localLog);\n      }\n\n      this.updateSerialLog(temp);\n    }\n  }, {\n    key: \"serialRecordFun\",\n    value: function serialRecordFun() {\n      var Order = this.state.order && this.state.order.order;\n      var scanPackSetting = this.state.scan_pack_settings;\n      var input = this.state.serialRecordInput;\n      var inputLength = input.length;\n      var match = false;\n\n      if (scanPackSetting.require_serial_lot) {\n        if (scanPackSetting.valid_prefixes) {\n          var prefix = scanPackSetting.valid_prefixes.split(',');\n          var prefixLength;\n          var userInput;\n          var access = false;\n          prefix && prefix.length > 0 && prefix.map(function (serial) {\n            prefixLength = serial.length;\n            userInput = input.slice(0, prefixLength);\n\n            if (userInput === serial) {\n              access = true;\n            }\n          });\n\n          if (access) {\n            match = true;\n            enableSerial = true;\n          } else {\n            this.responseAction(\"scan_fail\", \"serialRecord\");\n            this.alertBox(\"The Value Scanned does not appear to be a Valid serial or lot number. Please check the 'Require Serial/Lot Prefix' setting in your scan and pack options.\");\n            this.setState({\n              type: this.state.type,\n              serialRecordInput: \"\",\n              serialRecordOne: \"\",\n              serialRecordTwo: \"\"\n            });\n            match = false;\n            enableSerial = false;\n          }\n        }\n      } else {\n        match = true;\n        enableSerial = true;\n      }\n\n      var type = this.state.type;\n      var item = this.state.order && this.state.order.order && this.state.order.order.unscanned_items && this.state.order.order.unscanned_items[0];\n      var order_id = this.state.order && this.state.order.order && this.state.order.order.id;\n\n      if (match) {\n        if (item.child_items && item.child_items.length > 0 && item.child_items[0]) {\n          if (item.child_items[0].record_serial && item.child_items[0].second_record_serial) {\n            if (item.child_items[0].record_serial && this.state.serialRecordOne === \"\") {\n              this.setState({\n                serialRecordOne: this.state.serialRecordInput\n              });\n              this.setState({\n                serialRecordInput: \"\"\n              });\n              this.serialLogUpdate(type, item.child_items[0], \"recordOne\", order_id, true);\n            } else {\n              this.setState({\n                serialRecordTwo: this.state.serialRecordInput\n              });\n              enableSerial = true;\n              this.allTypeScan(type, item.child_items[0]);\n              this.setState({\n                serialRecordPopUpShow: false,\n                type: \"\",\n                serialRecordInput: \"\",\n                serialRecordOne: \"\",\n                serialRecordTwo: \"\"\n              });\n              this.serialLogUpdate(type, item.child_items[0], \"recordTwo\", order_id, true);\n            }\n          } else {\n            if (item.child_items[0].record_serial) {\n              this.setState({\n                serialRecordOne: this.state.serialRecordInput\n              });\n              this.serialLogUpdate(type, item.child_items[0], \"recordOne\", order_id, false);\n            } else {\n              this.setState({\n                serialRecordTwo: this.state.serialRecordInput\n              });\n              this.serialLogUpdate(type, item.child_items[0], \"recordTwo\", order_id, false);\n            }\n\n            this.allTypeScan(type, item.child_items[0]);\n            this.setState({\n              serialRecordPopUpShow: false,\n              type: \"\",\n              serialRecordInput: \"\"\n            });\n          }\n        } else {\n          if (item.record_serial && item.second_record_serial) {\n            if (this.state.serialRecordOne === \"\") {\n              this.setState({\n                serialRecordOne: this.state.serialRecordInput\n              });\n              this.setState({\n                serialRecordInput: \"\"\n              });\n              this.serialLogUpdate(type, item, \"recordOne\", order_id, true);\n            } else {\n              this.setState({\n                serialRecordTwo: this.state.serialRecordInput\n              });\n              enableSerial = true;\n              this.setState({\n                serialRecordPopUpShow: false,\n                type: \"\",\n                serialRecordInput: \"\",\n                serialRecordOne: \"\",\n                serialRecordTwo: \"\"\n              });\n              this.serialLogUpdate(type, item, \"recordTwo\", order_id, true);\n              this.allTypeScan(type, item);\n            }\n          } else {\n            if (item.record_serial) {\n              this.serialLogUpdate(type, item, \"recordOne\", order_id, false);\n            } else {\n              this.serialLogUpdate(type, item, \"recordTwo\", order_id, false);\n            }\n\n            this.allTypeScan(type, item);\n            this.setState({\n              serialRecordPopUpShow: false,\n              type: \"\",\n              serialRecordInput: \"\"\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"redirectToItemDetail\",\n    value: function redirectToItemDetail(product) {\n      if (product && product.product_id) {\n        this.props.navigation.navigate(\"ProductDetail\", {\n          productInfo: product.product_id,\n          orderID: this.state.order.order.id,\n          increment_id: this.state.order.order.increment_id\n        });\n      }\n    }\n  }, {\n    key: \"removeFocus\",\n    value: function removeFocus() {}\n  }, {\n    key: \"onKeyUp\",\n    value: function onKeyUp(keyName, e, handle) {\n      this.setState({\n        focusBarcode: true\n      });\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(keyName, e, handle) {\n      this.setState({\n        focusBarcode: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var config = {\n        velocityThreshold: 1,\n        directionalOffsetThreshold: 80\n      };\n      var props = this.props;\n      var Order = this.state.order && this.state.order.order;\n      var settings = this.state.scan_pack_settings;\n      var windowWidth = Dimensions.get('window').width;\n      var windowHeight = Dimensions.get('window').height;\n      return React.createElement(View, {\n        key: \"main\",\n        style: {\n          height: \"100%\",\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3159,\n          columnNumber: 7\n        }\n      }, this.state.loader ? React.createElement(View, {\n        style: {\n          marginTop: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3163,\n          columnNumber: 13\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: \"#000\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3164,\n          columnNumber: 15\n        }\n      }), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3165,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3166,\n          columnNumber: 17\n        }\n      }, \"Loading...\"))) : React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3170,\n          columnNumber: 13\n        }\n      }, Order && this.state.scan_pack_settings && React.createElement(View, {\n        style: [globalStyles.flex1, {\n          height: \"100%\",\n          position: \"relative\"\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3173,\n          columnNumber: 17\n        }\n      }, this.state.orderConfirmPopUp ? React.createElement(OrderConfirmationPopUp, _extends({\n        OrderConfirmationCheckFun: function OrderConfirmationCheckFun() {\n          return _this3.OrderConfirmationCheckFun();\n        },\n        OrderConfirmationCheckInput: this.state.OrderConfirmationCheckInput,\n        errorMessageOrderConfirmationCheck: this.state.errorMessageOrderConfirmationCheck,\n        handleOrderConfirmationCheckInput: function handleOrderConfirmationCheckInput(e) {\n          return _this3.handleOrderConfirmationCheckInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        orderDetails: this.state.order && this.state.order.order\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3177,\n          columnNumber: 23\n        }\n      })) : React.createElement(View, {\n        style: {\n          position: \"absolute\",\n          zIndex: 10,\n          width: \"100%\",\n          marginRight: \"0\",\n          marginLeft: \"0\",\n          marginTop: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3187,\n          columnNumber: 23\n        }\n      }, Order.notes_internal !== null && Order.notes_internal.trim() !== \"\" && this.state.notes_internalFlag && settings.show_internal_notes ? React.createElement(LinearGradient, {\n        style: {\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          backgroundColor: \"#b7b7b7\",\n          padding: 5,\n          borderRadius: 10,\n          marginTop: 4,\n          width: \"80%\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          padding: 10,\n          shadowColor: \"#000\",\n          shadowOffset: {\n            width: 0,\n            height: 0\n          },\n          shadowOpacity: 10,\n          shadowRadius: 10\n        },\n        locations: [0, 1],\n        colors: [\"#0f811a\", \"#31bd31\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3191,\n          columnNumber: 29\n        }\n      }, React.createElement(Text, {\n        style: {\n          marginLeft: 5,\n          marginRight: 5,\n          fontSize: 16,\n          color: \"#fff\",\n          fontFamily: fontFamily.font500\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3196,\n          columnNumber: 31\n        }\n      }, Order.notes_internal), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this3.setState({\n            notes_internalFlag: false\n          });\n\n          _this3.currentFocus();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3197,\n          columnNumber: 31\n        }\n      }, React.createElement(Image, {\n        source: closeButton ? closeButton : \"\",\n        style: {\n          height: 20,\n          width: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3202,\n          columnNumber: 33\n        }\n      }))) : null, Order.customer_comments !== null && Order.customer_comments.trim() !== \"\" && this.state.customer_commentsFlag && settings.show_customer_notes ? React.createElement(LinearGradient, {\n        locations: [0, 1],\n        colors: [\"#0f811a\", \"#31bd31\"],\n        style: {\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          backgroundColor: \"#336599\",\n          padding: 5,\n          borderRadius: 10,\n          width: \"80%\",\n          marginTop: 4,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          padding: 10,\n          shadowColor: \"#000\",\n          shadowOffset: {\n            width: 0,\n            height: 0\n          },\n          shadowOpacity: 10,\n          shadowRadius: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3212,\n          columnNumber: 29\n        }\n      }, React.createElement(Text, {\n        style: {\n          marginLeft: 5,\n          marginRight: 5,\n          fontSize: 16,\n          color: \"#fff\",\n          fontFamily: fontFamily.font500\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3216,\n          columnNumber: 31\n        }\n      }, Order.customer_comments), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this3.setState({\n            customer_commentsFlag: false\n          });\n\n          _this3.currentFocus();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3217,\n          columnNumber: 31\n        }\n      }, React.createElement(Image, {\n        source: closeButton ? closeButton : \"\",\n        style: {\n          height: 20,\n          width: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3222,\n          columnNumber: 33\n        }\n      }))) : null), React.createElement(ProductAlias, {\n        alias: this.state.alias,\n        Product: this.state.Product,\n        updateProduct: this.state.updateProduct,\n        assignUniquebarcode: function assignUniquebarcode() {\n          return _this3.assignUniquebarcode();\n        },\n        shareBarcodeMethod: function shareBarcodeMethod() {\n          _this3.setState({\n            shareBarcodeShow: true,\n            alias: false\n          });\n        },\n        proceedAliasing: function proceedAliasing() {\n          return _this3.proceedAliasing();\n        },\n        shareBarcodeShow: this.state.shareBarcodeShow,\n        sameBarcode: function sameBarcode() {\n          return _this3.sameBarcode();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3233,\n          columnNumber: 19\n        }\n      }), this.state.responseShowAction && React.createElement(ResponseView, {\n        orderCompleteAction: this.state.orderCompleteAction,\n        scanSuccessAction: this.state.scanSuccessAction,\n        scanFailAction: this.state.scanFailAction,\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3244,\n          columnNumber: 21\n        }\n      }), this.state.typeScanAlert && React.createElement(TypeScanAlert, {\n        closeAlert: this.closeAlert.bind(this),\n        typeScanCount: this.state.typeScanCount,\n        typeScanCountUpdate: function typeScanCountUpdate(text) {\n          return _this3.setState({\n            typeScanCount: text\n          });\n        },\n        submitTypeScan: this.submitTypeScan.bind(this),\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3254,\n          columnNumber: 21\n        }\n      }), this.state.alert && React.createElement(Alert, {\n        closeAlert: this.closeAlert.bind(this),\n        submitAlert: this.submitAlert.bind(this),\n        notes_fromPacker: this.state.notes_fromPacker,\n        noteUpdate: function noteUpdate(text) {\n          return _this3.setState({\n            notes_fromPacker: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3265,\n          columnNumber: 21\n        }\n      }), this.state.addBarcodeWindow && React.createElement(AddBarcode, {\n        closeAlert: function closeAlert(e) {\n          return _this3.closeAlert(e);\n        },\n        addBarcodeSubmit: function addBarcodeSubmit(e) {\n          return _this3.addBarcodeSubmit(e);\n        },\n        addBarcodeText: this.state.addBarcodeText,\n        addBarcodeChange: function addBarcodeChange(text) {\n          return _this3.setState({\n            addBarcodeText: text\n          });\n        },\n        addBarcodeWindow: this.state.addBarcodeWindow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3276,\n          columnNumber: 21\n        }\n      }), this.state.popUpModelShow && React.createElement(PopUpModel, {\n        closeAlert: this.closeAlert.bind(this),\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3286,\n          columnNumber: 21\n        }\n      }), this.state.serialRecordPopUpShow && React.createElement(SerialRecord, _extends({\n        serialRecordFun: function serialRecordFun() {\n          return _this3.serialRecordFun();\n        },\n        serialRecordInput: this.state.serialRecordInput,\n        handleSerialRecordInput: function handleSerialRecordInput(e) {\n          return _this3.handleSerialRecordInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        serialRecord: function serialRecord() {\n          return _this3.serialRecord;\n        }\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3292,\n          columnNumber: 21\n        }\n      })), this.state.clickScanConfirmation && React.createElement(ClickScanConfirmationPopUp, {\n        clickScanConfirmFun: function clickScanConfirmFun() {\n          return _this3.clickScanConfirmFun();\n        },\n        clickScanConfirmInput: this.state.clickScanConfirmInput,\n        errorMessageClickScanConfirmation: this.state.errorMessageClickScanConfirmation,\n        handleClickScanConfirmInput: function handleClickScanConfirmInput(e) {\n          return _this3.handleClickScanConfirmInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        serialFocus: myInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3302,\n          columnNumber: 21\n        }\n      }), this.state.productConfirmationCheck && React.createElement(ProductConfirmationCheck, _extends({\n        ProductConfirmationCheckFun: function ProductConfirmationCheckFun() {\n          return _this3.ProductConfirmationCheckFun();\n        },\n        ProductConfirmationCheckInput: this.state.productConfirmationCheckInput,\n        errorMessageProductConfirmationCheck: this.state.errorMessageProductConfirmationCheck,\n        handleProductConfirmationCheckInput: function handleProductConfirmationCheckInput(e) {\n          return _this3.handleProductConfirmationCheckInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        instruction: this.state.blockItemToScan\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3314,\n          columnNumber: 21\n        }\n      })), this.state.scan_pack_settings.post_scanning_option !== \"None\" && Order && Order.unscanned_items.length === 0 ? React.createElement(ConfirmTrackingNumber, {\n        postScanningFieldLabel: this.state.postScanningFieldLabel,\n        trackingOrderInput: this.state.trackingOrderInput,\n        onChangeText: function onChangeText(text) {\n          _this3.setState({\n            trackingOrderInput: text\n          });\n        },\n        onSubmitEditing: this.trackingSubmit.bind(this, this.state.trackingOrderInput),\n        postScanningMessageDetail: this.state.postScanningMessageDetail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3326,\n          columnNumber: 23\n        }\n      }) : React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3333,\n          columnNumber: 23\n        }\n      }, this.props.route && this.props.route.params && this.state.order && React.createElement(Hotkeys, {\n        keyName: \"enter\",\n        onKeyDown: this.onKeyDown.bind(this),\n        onKeyUp: this.onKeyUp.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3336,\n          columnNumber: 27\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3341,\n          columnNumber: 29\n        }\n      }, Platform.OS === \"web\" ? React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3345,\n          columnNumber: 35\n        }\n      }, windowWidth >= 900 ? React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: \"row\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3349,\n          columnNumber: 41\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3350,\n          columnNumber: 43\n        }\n      }, React.createElement(UnscannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        localLogs: this.state.localLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3351,\n          columnNumber: 45\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 4\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3368,\n          columnNumber: 43\n        }\n      }, this.state.loadOrderSpinner ? React.createElement(View, {\n        style: {\n          marginTop: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3372,\n          columnNumber: 49\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: \"#000\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3373,\n          columnNumber: 51\n        }\n      }), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3374,\n          columnNumber: 51\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3375,\n          columnNumber: 53\n        }\n      }, \"Fetch more item to scan...\"))) : React.createElement(NextItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        access_token: this.state.token,\n        barcodeState: this.state.bar_code,\n        removeFocus: function removeFocus() {\n          return _this3.removeFocus();\n        },\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        activities: props && props.Order && props.Order.activities,\n        localLogs: this.state.localLogs,\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        loadOrderSpinner: this.state.loadOrderSpinner,\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        addBarcode: function addBarcode(e) {\n          return _this3.addBarcode(e);\n        },\n        notesToPackerFlag: this.state.notes_toPackerFlag,\n        notesToPackerPressed: function notesToPackerPressed() {\n          return _this3.showNotesToPacker();\n        },\n        settings: settings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3379,\n          columnNumber: 49\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 2,\n          zIndex: -1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3419,\n          columnNumber: 43\n        }\n      }, React.createElement(ScannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3420,\n          columnNumber: 45\n        }\n      })))) : React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: \"#292929\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3429,\n          columnNumber: 41\n        }\n      }, this.state.unscannedItemShow === true && this.state.nextItemShow === false && React.createElement(UnscannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        access_token: this.state.token,\n        barcodeState: this.state.bar_code,\n        removeFocus: function removeFocus(e) {\n          return _this3.removeFocus(e);\n        },\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        activities: props && props.Order && props.Order.activities,\n        localLogs: this.state.localLogs,\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        navButton: function navButton() {\n          return _this3.navButton();\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        localLogs: this.state.localLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3432,\n          columnNumber: 45\n        }\n      })), this.state.loadOrderSpinner ? React.createElement(View, {\n        style: {\n          marginTop: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3471,\n          columnNumber: 47\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: \"#000\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3472,\n          columnNumber: 49\n        }\n      }), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3473,\n          columnNumber: 49\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3474,\n          columnNumber: 51\n        }\n      }, \"Fetch more item to scan...\"))) : React.createElement(React.Fragment, null, this.state.unscannedItemShow === false && this.state.nextItemShow === true && this.state.scannedItemShow === false && React.createElement(NextItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        access_token: this.state.token,\n        barcodeState: this.state.bar_code,\n        removeFocus: function removeFocus(e) {\n          return _this3.removeFocus(e);\n        },\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        activities: props && props.Order && props.Order.activities,\n        localLogs: this.state.localLogs,\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        navButtonLeft: function navButtonLeft() {\n          return _this3.navButtonLeft();\n        },\n        navButtonRight: function navButtonRight() {\n          _this3.setState({\n            unscannedItemShow: false,\n            nextItemShow: false,\n            scannedItemShow: true\n          });\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        loadOrderSpinner: this.state.loadOrderSpinner,\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        addBarcode: function addBarcode(e) {\n          return _this3.addBarcode(e);\n        },\n        notesToPackerFlag: this.state.notes_toPackerFlag,\n        notesToPackerPressed: function notesToPackerPressed() {\n          return _this3.showNotesToPacker();\n        },\n        settings: settings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3481,\n          columnNumber: 51\n        }\n      }))), this.state.nextItemShow === false && this.state.scannedItemShow === true && React.createElement(ScannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        navButton: function navButton() {\n          _this3.setState({\n            unscannedItemShow: false,\n            nextItemShow: true,\n            scannedItemShow: false\n          });\n        },\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3526,\n          columnNumber: 45\n        }\n      })))) : React.createElement(Swiper, {\n        index: 1,\n        onIndexChanged: function onIndexChanged(e) {\n          return _this3.enableToggle(e);\n        },\n        keyboardShouldPersistTaps: 'handled',\n        loop: false,\n        horizontal: true,\n        dotStyle: {\n          display: \"none\"\n        },\n        activeDotStyle: {\n          display: \"none\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3538,\n          columnNumber: 35\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3545,\n          columnNumber: 37\n        }\n      }, React.createElement(UnscannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        barcodeState: this.state.bar_code,\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        localLogs: this.state.localLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3546,\n          columnNumber: 39\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3576,\n          columnNumber: 37\n        }\n      }, React.createElement(NextItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        access_token: this.state.token,\n        barcodeState: this.state.bar_code,\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        removeFocus: function removeFocus(e) {\n          return _this3.removeFocus(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        activities: props && props.Order && props.Order.activities,\n        localLogs: this.state.localLogs,\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        loadOrderSpinner: this.state.loadOrderSpinner,\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        addBarcode: function addBarcode(e) {\n          return _this3.addBarcode(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3577,\n          columnNumber: 39\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3613,\n          columnNumber: 37\n        }\n      }, React.createElement(ScannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3614,\n          columnNumber: 39\n        }\n      }))))))))));\n    }\n  }]);\n\n  return ScanPackItem;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    Order: state.order.order,\n    ordersList: state.order.list,\n    bothSettings: state.user.bothSettings,\n    searchOrder: state.scanpack,\n    saveData: state.updateAsync.retriveData,\n    updateLog: state.saveLog,\n    callOrder: state.scanpack.searchOrder,\n    updateProduct: state.product.updateProductList,\n    updateProductAlias: state.product.updateProductAlias\n  };\n};\n\nvar mapDispatchToProps = {\n  GetOrderDetail: GetOrderDetail,\n  GetOrderList: GetOrderList,\n  GetBothSettings: GetBothSettings,\n  SearchScanpackOrder: SearchScanpackOrder,\n  GetItem: GetItem,\n  SetItem: SetItem,\n  SubmitLog: SubmitLog,\n  SearchOrder: SearchOrder,\n  updateProductList: updateProductList,\n  updateProductAlias: updateProductAlias\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanPackItem);","map":{"version":3,"sources":["C:/Users/DELL PC/Downloads/GroovePacker/src/components/scanpack/scanpack_item.js"],"names":["React","Component","Audio","connect","Swiper","NetInfo","completeSound","scanSuccessSound","scanFailSound","notReady","closeButton","SearchScanpackOrder","GetOrderList","SearchOrder","updateProductList","updateProductAlias","GetBothSettings","GetOrderDetail","SetItem","GetItem","SubmitLog","styles","UnscannedItems","ScannedItems","NextItems","Notes","Alert","AddBarcode","PopUpModel","ShipmentRecord","TypeScanAlert","ResponseView","LogView","SerialRecord","ClickScanConfirmationPopUp","ProductConfirmationCheck","ConfirmTrackingNumber","OrderConfirmationPopUp","globalStyles","SwipeGesture","Hotkeys","ProductAlias","LinearGradient","fontFamily","searchOrderCheck","updateProductInfoSuccess","ScanPackSettingsAccess","GeneralSettingAccess","orderSaveSuccess","updateLogSuccess","callOrderSuccess","formOrderDetailPage","updateSerialLog","enableSerial","myInput","ordersListSuccess","blockScan","confirmProductConfirmation","updateFromOrderDetailPage","searchOrderSuccess","updateFromProductSuccess","updateProductApi","ScanPackItem","props","getUserInfo","AsyncStorage","getItem","info","userInfo","JSON","parse","setState","apiCall","fetchListData","state","shipmentOrder","input","route","params","incrementID","data","order","addBarcode","item","barcodes","length","addBarcodeWindow","addBarcodeItem","addBarcodeSubmit","newHash","value","addBarcodeText","var","id","product_id","updateProductApiCall","Date","nav","completeOrder","multipleTime","statusFunction","message","rfoTitle","responseAction","response","from","scan_pack_settings","play_success_sound","show_success_image","success_image_time","play_fail_sound","show_fail_image","fail_image_time","play_order_complete_sound","show_order_complete_image","order_complete_image_time","popup_show_time","scanFailAction","responseShowAction","playSound","bar_code","scanSuccessAction","post_scanning_option","scanType","postScanFunction","orderCompleteAction","showTime","setTimeout","updateAction","bind","serialRecord","current","focus","error","sound","Sound","unloadAsync","loadAsync","playAsync","currentFocus","sleep","ms","Promise","resolve","type","timeSecond","scanPack","Order","trackingNumberView","postScanningFieldLabel","increment_id","postScanningMessageDetail","tracking_num","postScanSecond","postScan","time","soundObject","convert","redirectFun","submitAlert","order_num","notes_fromPacker","localLogs","temp_order","event","name","updated_at","issueFlag","updateLog","noteFlag","alert","scanAllItem","count","parseInt","typeScanCount","type_scan_code","unscanned_items","items","scanned_items","log","next_state","general_settings","itemFound","SKU","orderComplete","conf_code_product_instruction","productConfirmationCheck","blockItemType","child_items","confirmation","blockItemToScan","product_type","serialScanAccess","record_serial","second_record_serial","eventType","serialRecordPopUpShow","map","childItem","index","scan","scanned_qty","qty_remaining","splice","sku","unscan","order_item_id","typeScanAlert","submitTypeScan","remain_qty","scanAccess","scanpush","match","skip","orderInputType","barcode","typeScanState","typeScanDeductCountState","child","count_item","alertBox","popUpModelShow","closeAlert","serialRecordInput","serialRecordTwo","serialRecordOne","clickScanConfirmation","confirmationCheckItem","clickScanConfirmInput","errorMessageProductConfirmationCheck","errorMessageClickScanConfirmation","orderConfirmPopUp","noBarcodeScan","clickScan","fromActionBarcode","access","click_scan","enable_click_sku","click_scan_enabled","scanBarcode","clickScanConfirmFun","confirmation_code","strict_cc","handleClickScanConfirmInput","e","ProductConfirmationCheckFun","userCode","userInput","productConfirmationCheckInput","generalSettings","handleProductConfirmationCheckInput","OrderConfirmationCheckFun","OrderConfirmationCheckInput","handleOrderConfirmationCheckInput","errorMessageOrderConfirmationCheck","restartButton","Log_count","product_name","ActionBarcode","restart_code","addNote","saveChanges","clickBarcode","localScannedItems","event_code","tempArr","is_multipack_barcode","packing_count","noCode","findKit3","master_switch","stop_add_log","lowercase","skipError","event_scanned","rejectLocalLog","Action_Type","order_complete_flag","qty_remain","scanning_sequence","escape_string_enabled","removeSpaceBarCode","first_escape_string_enabled","check","escape_string","includes","tempIndex","indexOf","slice","second_escape_string_enabled","second_escape_string","note_from_packer_code_enabled","note_from_packer_code","restart_code_enabled","type_scan_code_enabled","scanned","scanned_barcode","service_issue_code_enabled","service_issue_code","click_scan_barcode","remove_barcode","shift","toLowerCase","skippable","skip_code","skip_code_enabled","childIndex","Barcode","scanItemIndex","scancode","Scancode","barcodeIndex","mainItem","un","bar","scanIndex","scancodeIndex","childItemIndex","childItemBarcode","childItemBarcodeIndex","tempItem","tempItem1","tempItemChildArr","tempItem1ChildArr","arr","kitDivide","newCopy","push","childTemp","sub","final","updateProduct","updateProductIndex","updateChildItem","updatedChildItemIndex","undefined","keyCode","logData","temp","logging","LoggingArray","indexToRemove","numberToRemove","getTemp","concat","console","setItem","stringify","trackingOrderInput","close","notes_toPacker_enable","leaveComponent","hideShipment","showshipments","callShipmentOrder","hitApi","Platform","OS","InternetCheck","fetch","connectionInfo","isConnected","errorMessageShow","allTypeScan","recordSerial","handleSerialRecordInput","navButton","reRenderFocus","unscannedItemShow","nextItemShow","scannedItemShow","navButtonLeft","showScannedList","unscannedList","scannedList","logList","showUnscannedList","showLogList","showNotesToPacker","notes_toPackerFlag","assignUniquebarcode","shareBarcodeShow","alias","proceedAliasing","alias_product_data_id","alias_product_data","current_product_data_id","current_product_data","details","product_alias_ids","sameBarcode","permit_same_barcode","orderList","orderDetail","firstScreen","secondScreen","thirdScreen","logScreen","errorMessage","matchOrderShow","notes_internalFlag","customer_commentsFlag","loadOrderSpinner","loader","unscannedItemPerPage","scannedItemPerPage","focusBarcode","Product","createRef","InputField","searchOrder","searchData","asyncData","bothSettings","setFocus","productDetail","apiCallTime","searchResult","matched","status","oldOne","scan_hash","detailData","scanpackSettings","scanpack_setting","general_setting","conf_req_on_notes_to_packer","note_confirmation","scData","gsData","postScanMessage","logTime","logs","restart","productID","show_alias_popup","created_at","unItem","navigation","navigate","update","trackingNumber","setting","trackingLength","num","post_scanning_option_second","tracking_number_validation_enabled","prefix","tracking_number_validation_prefixes","split","validate","prefixLength","trackNumber","scanSecondTime","trackingStateSecond","tempNum","trackingState","recordFrom","order_id","both","localLog","scanPackSetting","inputLength","require_serial_lot","valid_prefixes","serial","serialLogUpdate","product","productInfo","orderID","keyName","handle","config","velocityThreshold","directionalOffsetThreshold","settings","windowWidth","Dimensions","get","width","windowHeight","height","flex","marginTop","textAlign","flex1","position","zIndex","marginRight","marginLeft","notes_internal","trim","show_internal_notes","flexDirection","justifyContent","backgroundColor","padding","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","fontSize","color","font500","customer_comments","show_customer_notes","text","serialRecordFun","trackingSubmit","onKeyDown","onKeyUp","redirectToItemDetail","token","removeFocus","activities","enableToggle","display","alignItems","mapStateToProps","ordersList","list","user","scanpack","saveData","updateAsync","retriveData","saveLog","callOrder","mapDispatchToProps"],"mappings":"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","sourcesContent":["//import library\nimport React, { Component } from 'react';\nimport { View, Text, Image, Dimensions, ActivityIndicator, TouchableOpacity, Platform, AsyncStorage } from 'react-native';\nimport { Audio } from 'expo-av';\nimport { connect } from 'react-redux';\nimport Swiper from 'react-native-swiper/src';\nimport NetInfo from \"@react-native-community/netinfo\";\n\n//import sound from component\nimport completeSound from \"../../../assets/sounds/_order_complete.mp3\";\nimport scanSuccessSound from \"../../../assets/sounds/scan_success_pop.mp3\";\nimport scanFailSound from \"../../../assets/sounds/scan_fail_shorter.mp3\";\nimport notReady from \"../../../assets/sounds/not_ready.mp3\";\n\n//import image from assets\nimport closeButton from \"../../../assets/closeicon.png\";\n\n//import apis \nimport { SearchScanpackOrder } from \"../../actions/scanpackAction\";\nimport { GetOrderList, SearchOrder } from \"../../actions/orderActions\";\nimport { updateProductList, updateProductAlias } from \"../../actions/productAction\";\nimport { GetBothSettings } from \"../../actions/userAction\";\nimport { GetOrderDetail } from '../../actions/orderActions';\nimport { SetItem, GetItem } from \"../../actions/updateAsyncAction\";\nimport { SubmitLog } from \"../../actions/saveLogAction\";\n\n//import components to view\nimport styles from '../../style/scanpack';\nimport UnscannedItems from \"./unscanned_items\";\nimport ScannedItems from \"./scanned_items\";\nimport NextItems from \"./next_items\";\nimport Notes from \"./internal_notes\";\nimport Alert from \"./alert\";\nimport AddBarcode from \"./addBarcode\";\nimport PopUpModel from \"./pop_up_model\";\nimport ShipmentRecord from \"./shipmentsRecord\";\nimport TypeScanAlert from \"./type_scan_alert\";\nimport ResponseView from \"./response_view\";\nimport LogView from \"./log\";\nimport SerialRecord from \"./serial_record\";\nimport ClickScanConfirmationPopUp from \"./click_scan_confirmation_pop_up\";\nimport ProductConfirmationCheck from \"./productConfirmationCheck\";\nimport ConfirmTrackingNumber from \"./confirmTrackingNumber\";\nimport OrderConfirmationPopUp from \"./orderConfirmationPopUp\";\nimport globalStyles from '../../style/global';\nimport SwipeGesture from '../../helpers/swipe-gesture'\nimport Hotkeys from 'react-hot-keys';\nimport ProductAlias from \"../Alias/productAlias\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { fontFamily } from '../../helpers/fontFamily';\n\nlet searchOrderCheck = false;\nlet updateProductInfoSuccess = false;\nlet ScanPackSettingsAccess = false;\nlet GeneralSettingAccess = false;\nlet orderSaveSuccess = false;\nlet updateLogSuccess = true;\nlet callOrderSuccess = true;\nlet formOrderDetailPage = true;\nlet updateSerialLog = {};\nlet enableSerial = false;\nlet myInput = \"\";\nlet ordersListSuccess = true;\nlet blockScan = false;\nlet confirmProductConfirmation = false;\nlet updateFromOrderDetailPage = true;\nlet searchOrderSuccess = false\nlet updateFromProductSuccess = false\nlet updateProductApi = false\n// let scanSuccessAction = false\n// let scanFailAction = false\n// let orderCompleteAction = false\n// let responseShowAction = false\n\nclass ScanPackItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shipmentOrder: {\n        \"input\": \"\",\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null,\n        \"app\": \"app\"\n      },\n      data: {\n        \"input\": \"\",\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null\n      },\n      orderList: {\n        \"filter\": \"awaiting\",\n        \"order\": \"DESC\",\n        \"limit\": \"1\",\n        \"offset\": \"0\",\n        \"app\": \"app\",\n        \"count\": 0\n      },\n      orderDetail: {\n        \"filter\": \"awaiting\",\n        \"order\": \"DESC\",\n        \"limit\": \"1\",\n        \"offset\": \"0\",\n        \"type\": \"app\"\n      },\n      type: \"\",\n      log: [],\n      localLogs: [],\n      firstScreen: true,\n      secondScreen: false,\n      thirdScreen: false,\n      logScreen: false,\n      bar_code: \"\",\n      alert: false,\n      notes_fromPacker: \"\",\n      typeScanAlert: false,\n      typeScanCount: \"\",\n      notes_toPacker_enable: true,\n      showshipments: true,\n      errorMessage: \"Please check the internet connection\",\n      errorMessageShow: false,\n      matchOrderShow: true,\n      typeScanState: \"\",\n      message: \"\",\n      unscannedItemShow: false,\n      nextItemShow: true,\n      scannedItemShow: false,\n      typeScanDeductCountState: \"\",\n      issueFlag: false,\n      noteFlag: false,\n      trackingOrderInput: \"\",\n      trackingNumberView: false,\n      postScanningFieldLabel: \"\",\n      postScanningMessageDetail: \"\",\n      timeSecond: false,\n      postScan: false,\n      serialRecordPopUpShow: false,\n      serialRecordInput: \"\",\n      serialRecordTwo: \"\",\n      clickScanConfirmInput: \"\",\n      serialRecordOne: \"\",\n      notes_toPackerFlag: true,\n      notes_internalFlag: true,\n      customer_commentsFlag: true,\n      scanSuccessAction: false,\n      scanFailAction: false,\n      orderCompleteAction: false,\n      responseShowAction: false,\n      errorMessageClickScanConfirmation: false,\n      loadOrderSpinner: false,\n      loader: false,\n      unscannedItemPerPage: 1,\n      scannedItemPerPage: 1,\n      productConfirmationCheck: false,\n      productConfirmationCheckInput: \"\",\n      errorMessageProductConfirmationCheck: false,\n      blockScan: false,\n      orderConfirmPopUp: false,\n      OrderConfirmationCheckInput: \"\",\n      errorMessageOrderConfirmationCheck: false,\n      popUpModelShow: false,\n      reRenderFocus: false,\n      clickScanConfirmation: false,\n      focusBarcode: false,\n      scannedList: true,\n      unscannedList: false,\n      logList: false,\n      addBarcodeWindow: false,\n      alias: false,\n      Product: []\n    };\n    this.barcode = React.createRef();\n    this.serialRecord = React.createRef();\n    this.multipleTime = this.multipleTime.bind(this);\n    this.responseAction = this.responseAction.bind(this);\n    this.redirectFun = this.redirectFun.bind(this);\n    this.InputField = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({ loader: true })\n    this.getUserInfo();\n    this.apiCall()\n  }\n\n  /*RETRIVE THE USER INFO FROM LOCAL*/\n  getUserInfo = async () => {\n    let info = await AsyncStorage.getItem(\"userInfo\")\n    let userInfo = info && JSON.parse(info)\n    this.setState({ userInfo })\n  }\n  /*RETRIVE THE USER INFO FROM LOCAL*/\n\n  apiCall = () => {\n    let fetchListData = this.state.shipmentOrder\n    fetchListData.input = this.props.route.params.incrementID\n    let data = this.props.route.params.data\n    this.setState({ order: data })\n    // this.props.SearchScanpackOrder(fetchListData);\n    this.props.GetBothSettings();\n    ordersListSuccess = false\n  }\n\n  // recallApi = (count) => {\n  //   this.setState({loadOrderSpinner: true})\n  //   this.multipleTime()\n  //   let data = this.state.orderList \n  //   data[\"count\"] = count\n  //   this.props.GetOrderList(data);\n  //   ordersListSuccess = false\n  // }\n\n  addBarcode = (item) => {\n    if (item.barcodes && item.barcodes.length === 0) {\n      this.setState({ addBarcodeWindow: true, addBarcodeItem: item })\n    }\n  }\n\n  addBarcodeSubmit = () => {\n    let newHash = {\n      value: this.state.addBarcodeText,\n      var: \"barcode\",\n      id: this.state.addBarcodeItem.product_id,\n    }\n    this.props.updateProductList(newHash)\n    this.setState({ updateProductApiCall: new Date() })\n    updateProductApi = true\n  }\n\n\n  componentDidUpdate() {\n    let searchOrder = this.props.searchOrder;\n    let searchData = searchOrder && searchOrder.data\n    let asyncData = this.props && this.props.bothSettings\n    let updateLog = this.props && this.props.updateLog\n    let order = { \"order\": this.props && this.props.route.params && this.props.route.params.data }\n    let setFocus = this.state.orderConfirmPopUp === false && this.state.addBarcodeWindow === false && this.state.responseShowAction === false && this.state.typeScanAlert === false && this.state.popUpModelShow === false && this.state.reRenderFocus === false && this.state.serialRecordPopUpShow === false && this.state.clickScanConfirmation === false && this.state.productConfirmationCheck === false\n\n    if ((setFocus === true) || (setFocus === true && this.state.focusBarcode)) {\n      try {\n        this.InputField.current.focus()\n      } catch (error) {\n      }\n    }\n\n    if (this.props &&\n      this.props.route &&\n      this.props.route.params &&\n      this.props.route.params.data &&\n      this.props.route.params.data.from === \"productDetailPage\" &&\n      this.props.route.params.data !== this.state.productDetail\n    ) {\n      let data = {\n        \"input\": this.props.route.params.data.increment_id,\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null,\n        \"app\": \"app\"\n      }\n      updateFromProductSuccess = true\n      this.props.SearchScanpackOrder(data)\n      this.setState({ productDetail: this.props.route.params.data, loader: true, apiCallTime: new Date() })\n    }\n\n    //Search Order Data\n    if (updateFromProductSuccess && this.props &&\n      this.props.searchOrder &&\n      this.props.searchOrder) {\n      let searchResult = this.props.searchOrder && this.props.searchOrder.searchOrder\n      let order = searchResult && searchResult.data.order && searchResult.data.order[0]\n      if (searchResult) {\n        if (searchResult.matched) {\n          debugger\n          if (searchResult.data.status === \"awaiting\" && this.props.route.params.data.increment_id === this.props.searchOrder.searchOrder.data.order_num) {\n            // this.orderDetails(order)\n            this.setState({ oldOne: this.props.searchOrder, loader: false, order: this.props.searchOrder.searchOrder.data.order[0].scan_hash.data })\n            updateFromProductSuccess = false\n          }\n          if (searchResult.data.status === \"onhold\" && this.props.route.params.data.order.increment_id === this.props.searchOrder.searchOrder.data.order_num) {\n            // this.orderDetails(order)\n            this.setState({ oldOne: this.props.searchOrder, loader: false, order: this.props.searchOrder.searchOrder.data.order[0].scan_hash.data })\n            updateFromProductSuccess = false\n          }\n        }\n      }\n    }\n\n    /*update order when user click save&close on order detail page start*/\n    if (this.props &&\n      this.props.route &&\n      this.props.route.params &&\n      this.props.route.params.data &&\n      this.props.route.params.data.from === \"orderDetailPage\" &&\n      this.props.route.params.data !== this.state.detailData\n    ) {\n      this.setState({\n        order: this.props.route.params.data,\n        detailData: this.props.route.params.data,\n        notes_toPackerFlag: true,\n        notes_internalFlag: true,\n        customer_commentsFlag: true\n      })\n      updateFromOrderDetailPage = false\n    }\n    /*update order when user click save&close on order detail page end*/\n\n    /*Update the general settings & scanpack settings start*/\n    if (this.props && this.props.bothSettings && this.props.bothSettings !== this.state.bothSettings) {\n      this.setState({\n        scanpackSettings: this.props.bothSettings.data.data.scanpack_setting,\n        generalSettings: this.props.bothSettings.data.data.general_setting,\n        scan_pack_settings: this.props.bothSettings.data.data.scanpack_setting,\n        general_settings: this.props.bothSettings.data.data.general_setting,\n        bothSettings: this.props.bothSettings,\n        loader: false\n      })\n      if (this.props.bothSettings.data.data.general_setting.conf_req_on_notes_to_packer === \"always\") {\n        this.setState({ orderConfirmPopUp: true })\n      }\n      if (this.props.bothSettings.data.data.general_setting.conf_req_on_notes_to_packer === \"optional\") {\n        if (order.order.order.note_confirmation) {\n          this.setState({ orderConfirmPopUp: true })\n        }\n      }\n    }\n    /*Update the general settings & scanpack settings end*/\n\n    //  //Search Order Data\n    // if(this.props && this.props.searchOrder && this.props.searchOrder !== this.state.oldOne){\n    //   let searchResult = this.props.searchOrder && this.props.searchOrder.searchOrder\n    //   let order =  searchResult && searchResult.data && searchResult.data.order && searchResult.data.order.length > 0 &&\n    //                 searchResult.data.order[0].scan_hash.data\n    //   if(searchResult){\n    //     if(searchResult.matched){\n    //       searchResult.data.status === \"awaiting\" \n    //         ? \n    //           this.setState({order: order , loader: false , oldOne: this.props.searchOrder})\n    //         :\n    //           this.statusFunction(searchResult.notice_messages[0])\n    //     }else{\n    //       this.statusFunction(searchResult.error_messages)\n    //     }\n    //   }\n    // }\n\n    if (updateProductInfoSuccess === true && this.props && this.props.updateProduct && this.props.updateProduct.data) {\n      updateProductInfoSuccess = false\n      this.setState({ alias: false })\n      let data = {\n        \"input\": this.props.route.params.data.order.increment_id,\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null,\n        \"app\": \"app\"\n      }\n      this.props.SearchScanpackOrder(data)\n      updateFromProductSuccess = true\n    }\n\n    if (asyncData !== \"\") {\n      let convert = asyncData\n      let scData = convert && convert.data && convert.data.data && convert.data.data.scanpack_setting\n      let gsData = convert && convert.data && convert.data.data && convert.data.data.general_setting\n      if (ScanPackSettingsAccess === false && scData) {\n        ScanPackSettingsAccess = true\n        if (scData && scData.post_scanning_option !== \"None\") {\n          let type = scData.post_scanning_option\n          if (type === \"Record\") {\n            this.setState({ notes_toPackerFlag: false, notes_internalFlag: false, customer_commentsFlag: false, postScanningFieldLabel: `Scan Tracking Number for Order ${order.order.order.increment_id}`, postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\" })\n          }\n          if (type === \"Verify\") {\n            let postScanMessage = \"\"\n            if (order.order.order.tracking_num !== null && order.order.order.tracking_num !== \"\") {\n              postScanMessage = \"Please scan the shipping label.\"\n            } else {\n              postScanMessage = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\n            }\n            this.setState({ notes_toPackerFlag: false, notes_internalFlag: false, customer_commentsFlag: false, postScanningFieldLabel: `Scan Shipping Label for Order ${order.order.order.increment_id}`, postScanningMessageDetail: postScanMessage })\n          }\n        }\n        this.setState({ scan_pack_settings: scData })\n        this.props.GetItem(\"GeneralSetting\");\n      }\n      if (GeneralSettingAccess === false && gsData !== undefined) {\n        GeneralSettingAccess = true\n        this.setState({ general_settings: gsData })\n      }\n    }\n\n    if (this.props.updateLog.time !== this.state.logTime) {\n      if (this.props.updateLog && this.props.updateLog.logs && this.props.updateLog.logs.status === \"OK\" && this.props.updateLog.updateLog && this.props.updateLog.time) {\n        this.setState({ logTime: this.props.updateLog.time })\n      }\n    }\n\n    if (this.props.route.params.restart === true) {\n      this.props.route.params.restartButton\n    }\n\n    if (updateProductApi === true && this.props && this.props.updateProduct && this.props.updateProduct.data !== \"\" && this.props.updateProduct.time >= this.state.updateProductApiCall) {\n      updateProductApi = false\n      let productID = this.state.addBarcodeItem && this.state.addBarcodeItem.product_id\n      let order = this.state.order\n      if (this.props.updateProduct.data.show_alias_popup) {\n        this.setState({ alias: true, addBarcodeWindow: false, Product: this.props.updateProduct.data, updateProduct: this.props.updateProduct.data })\n      } else {\n        order.order.unscanned_items &&\n          order.order.unscanned_items.length > 0 &&\n          order.order.unscanned_items.map((item, index) => {\n            if (item.child_items.length > 0) {\n              item.child_items.map((child, index) => {\n                if (child.product_id === productID) {\n                  child.barcodes = [{\n                    barcode: this.state.addBarcodeText,\n                    created_at: \"\",\n                    id: 0,\n                    packing_count: \"1\",\n                    product_id: productID,\n                    updated_at: new Date()\n                  }]\n                }\n              })\n            } else {\n              if (item.product_id === productID) {\n                item.barcodes = [{\n                  barcode: this.state.addBarcodeText,\n                  created_at: \"\",\n                  id: 0,\n                  packing_count: \"1\",\n                  product_id: productID,\n                  updated_at: new Date()\n                }]\n              }\n            }\n          })\n        let unItem = order.order.unscanned_items.length > 0 && order.order.unscanned_items[0]\n        let item = unItem.child_items.length > 0 ? unItem.child_items[0] : unItem\n        this.clickScan(item)\n        this.setState({ addBarcodeWindow: false, addBarcodeText: \"\", addBarcodeItem: \"\", order, updateProductApiCall: \"\" })\n      }\n    }\n  }\n\n  nav = async (order, completeOrder) => {\n    completeOrder && this.multipleTime()\n  }\n\n  //After the apis call update the status (scanned , order  not present)\n  statusFunction = (message) => {\n    let data = this.state.data\n    data[\"input\"] = \"\"\n    this.setState({ rfoTitle: message, data })\n  }\n\n  redirectFun() {\n    this.props.SearchScanpackOrder(\"\", false)\n    this.props.navigation.navigate(\"ScanPack\", { update: true, time: new Date() })\n  }\n\n  /*RESPONSE SOUND AND IMAGE START*/\n  responseAction = (response, from) => {\n    let { play_success_sound, show_success_image, success_image_time, play_fail_sound, show_fail_image, fail_image_time, play_order_complete_sound, show_order_complete_image, order_complete_image_time } = this.state.scan_pack_settings;\n    let popup_show_time = 0.3; // default time\n    if (response === \"not_ready\") {\n      popup_show_time = fail_image_time;\n      show_fail_image ? this.setState({ scanFailAction: true, responseShowAction: true }) : null\n      play_fail_sound ? this.playSound(notReady) : null\n      this.setState({ bar_code: \"\" })\n    }\n    if (response === \"scan_fail\") {\n      popup_show_time = fail_image_time;\n      show_fail_image ? this.setState({ scanFailAction: true, responseShowAction: true }) : null\n      play_fail_sound ? this.playSound(scanFailSound) : null\n      this.setState({ bar_code: \"\" })\n    }\n    if (response === \"scan_success\") {\n      popup_show_time = success_image_time;\n      show_success_image ? this.setState({ scanSuccessAction: true, responseShowAction: true }) : null\n      play_success_sound ? this.playSound(scanSuccessSound) : null\n      this.setState({ bar_code: \"\" })\n    }\n    if (response === \"order_complete\") {\n      if (this.state.scan_pack_settings.post_scanning_option === \"None\") {\n        response = \"complete_order\"\n      } else {\n        let scanType = this.state.scan_pack_settings.post_scanning_option\n        this.postScanFunction(scanType)\n      }\n    }\n    if (response === \"complete_order\") {\n      popup_show_time = order_complete_image_time;\n      show_order_complete_image ? this.setState({ orderCompleteAction: true, responseShowAction: true }) : null\n      play_order_complete_sound ? this.playSound(completeSound) : null\n      this.nav(this.state.order, true)\n      this.setState({ bar_code: \"\" })\n    }\n    if (response === \"restart_action_complete\") {\n      this.nav(this.state.order)\n      this.setState({ bar_code: \"\" })\n    }\n    let showTime = popup_show_time * 300\n    setTimeout(() => { this.setState({ scanFailAction: false, scanSuccessAction: false, orderCompleteAction: false, responseShowAction: false }) }, showTime);\n    this.updateAction.bind(this);\n    try {\n      if (from === \"serialRecord\") {\n        this.serialRecord.current.focus()\n      } else {\n        // this.barcode.current.focus()\n      }\n    } catch (error) {\n    }\n  }\n  /*RESPONSE SOUND AND IMAGE END*/\n\n  playSound = async (response) => {\n    const sound = new Audio.Sound();\n    await sound.unloadAsync();\n\n    await sound.loadAsync(response);\n    await sound.playAsync();\n    this.currentFocus();\n    // this.sleep(300);\n  }\n\n  currentFocus = () => {\n    // try {\n    //   this.barcode.current.focus()\n    // } catch (error) {\n    // }  \n  }\n\n  sleep = async (ms) => {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  /* SUBMIT TRACKING START */\n  trackingSubmit(trackingNumber) {\n    let setting = this.state.scan_pack_settings\n    let trackingLength = trackingNumber.length\n    let temp_order = {}\n    let num = \"\"\n    let order = this.state.order\n    let order_num = order.order.id\n    let localLogs = this.state.localLogs\n    let strict_cc = this.state.general_settings.strict_cc\n    if (setting.post_scanning_option !== \"None\") {\n      if (this.state.timeSecond === true) {\n        let type = setting.post_scanning_option_second\n        if (type === \"Record\") {\n          if (setting.tracking_number_validation_enabled) {\n            let prefix = setting.tracking_number_validation_prefixes.split(\",\")\n            let validate = \"\"\n            let scan = false\n            let scanAccess = false\n            prefix.map((prefix, index) => {\n              let prefixLength = prefix.length\n              validate = trackingNumber.slice(0, prefixLength)\n              if (scanAccess === false) {\n                if (validate === prefix) {\n                  temp_order[\"id\"] = order_num\n                  temp_order[\"input\"] = trackingNumber\n                  temp_order[\"state\"] = 'scanpack.rfp.default'\n                  temp_order[\"event\"] = \"record\"\n                  temp_order[\"updated_at\"] = order.order.updated_at\n                  temp_order[\"increment_id\"] = order.order.increment_id\n                  // localLogs.push(temp_order)\n                  localLogs.splice(0, 0, temp_order)\n                  scan = true\n                  scanAccess = true\n                } else {\n                  scan = false\n                }\n              }\n            })\n            if (scan === true) {\n              // localLogs.push(temp_order)\n              localLogs.splice(0, 0, temp_order)\n              this.updateLog(temp_order, \"recordTracking\")\n              // this.updateLog(temp_order , \"tracking\")\n              // this.responseAction(\"complete_order\")\n            } else {\n              this.responseAction(\"scan_fail\")\n              this.alertBox(`The tracking number barcode you scanned does not match any of the saved prefixes. Please check your tracking validation settings or contact an admin.`, true)\n            }\n          } else {\n            temp_order[\"id\"] = order_num\n            temp_order[\"input\"] = trackingNumber\n            temp_order[\"state\"] = 'scanpack.rfp.default'\n            temp_order[\"event\"] = \"record\"\n            temp_order[\"updated_at\"] = order.order.updated_at\n            temp_order[\"increment_id\"] = order.order.increment_id\n            // localLogs.push(temp_order)\n            localLogs.splice(0, 0, temp_order)\n            // this.updateLog(temp_order , \"tracking\")\n            this.updateLog(temp_order, \"recordTracking\")\n            // this.responseAction(\"complete_order\")\n          }\n        }\n        if (type === \"Verify\") {\n          let trackNumber = order.order.tracking_num\n          if (setting.post_scanning_option === \"Record\" && setting.post_scanning_option_second === \"Verify\") {\n            trackNumber = 123\n          }\n          if (trackNumber !== null) {\n            let scan = false\n            if (this.state.scanSecondTime === true) {\n              if (trackingNumber === this.state.userInfo.confirmation_code || (strict_cc === false && trackingNumber === \"\")) {\n                scan = true\n              }\n            }\n            if (trackingNumber === trackNumber || scan === true) {\n              temp_order[\"id\"] = order_num\n              temp_order[\"input\"] = trackingNumber\n              temp_order[\"state\"] = this.state.trackingStateSecond === \"scanpack.rfp.no_match\" ? \"scanpack.rfp.no_match\" : \"scanpack.rfp.verifying\"\n              temp_order[\"state\"] =\n                temp_order[\"event\"] = \"verify\"\n              temp_order[\"updated_at\"] = order.order.updated_at\n              temp_order[\"increment_id\"] = order.order.increment_id\n              // localLogs.push(temp_order)\n              localLogs.splice(0, 0, temp_order)\n              // this.updateLog(temp_order , \"tracking\")\n              this.updateLog(temp_order, \"recordTracking\")\n              // this.responseAction(\"complete_order\")\n              this.setState({ trackingStateSecond: \"\" })\n            } else {\n              this.responseAction(\"scan_fail\")\n              this.setState(\n                {\n                  trackingStateSecond: \"scanpack.rfp.no_match\",\n                  scanSecondTime: true,\n                  postScanningMessageDetail: \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\n                }\n              )\n            }\n          } else {\n            let message = \"\"\n            if (order.order.tracking_num !== null && order.order.tracking_num !== \"\") {\n              message = \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\n            } else {\n              message = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\n            }\n            if (this.state.postScanSecond) {\n              if (trackingNumber === this.state.userInfo.confirmation_code || (strict_cc === false && trackingNumber === \"\")) {\n                temp_order[\"id\"] = order_num\n                temp_order[\"input\"] = trackingNumber\n                temp_order[\"state\"] = 'scanpack.rfp.no_tracking_info'\n                temp_order[\"event\"] = \"verify\"\n                temp_order[\"updated_at\"] = order.order.updated_at\n                temp_order[\"increment_id\"] = order.order.increment_id\n                // localLogs.push(temp_order)\n                localLogs.splice(0, 0, temp_order)\n                // this.updateLog(temp_order , \"tracking\")\n                this.updateLog(temp_order, \"recordTracking\")\n                // this.responseAction(\"complete_order\")\n                this.setState({ postScanSecond: false })\n              } else {\n                this.responseAction(\"scan_fail\")\n              }\n            }\n            this.setState({ postScanSecond: true, postScanningMessageDetail: message })\n          }\n        }\n      } else {\n        let type = setting.post_scanning_option\n        if (type === \"Record\") {\n          if (setting.tracking_number_validation_enabled) {\n            let prefix = setting.tracking_number_validation_prefixes.split(\",\")\n            let validate = \"\"\n            let scan = false\n            let scanAccess = false\n            prefix.map((prefix, index) => {\n              let prefixLength = prefix.length\n              validate = trackingNumber.slice(0, prefixLength)\n              if (scanAccess === false) {\n                if (validate === prefix) {\n                  temp_order[\"id\"] = order_num\n                  temp_order[\"input\"] = trackingNumber\n                  temp_order[\"state\"] = 'scanpack.rfp.default'\n                  temp_order[\"event\"] = \"record\"\n                  temp_order[\"updated_at\"] = order.order.updated_at\n                  temp_order[\"increment_id\"] = order.order.increment_id\n                  scan = true\n                  scanAccess = true\n                } else {\n                  scan = false\n                }\n              }\n            })\n            if (scan === true) {\n              localLogs.splice(0, 0, temp_order)\n              // localLogs.push(temp_order)\n              // this.updateLog(temp_order , \"tracking\")\n              this.updateLog(temp_order, \"recordTracking\")\n              if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                this.postScanFunction(setting.post_scanning_option_second, true)\n                this.setState({ trackingOrderInput: \"\" })\n                this.updateLog(temp_order, \"tracking\")\n              } else {\n                // this.responseAction(\"complete_order\")\n                this.updateLog(temp_order, \"recordTracking\")\n              }\n            } else {\n              this.responseAction(\"scan_fail\")\n              this.alertBox(`The tracking number barcode you scanned does not match any of the saved prefixes. Please check your tracking validation settings or contact an admin.`, true)\n            }\n          } else {\n            temp_order[\"id\"] = order_num\n            temp_order[\"input\"] = trackingNumber\n            temp_order[\"state\"] = 'scanpack.rfp.default'\n            temp_order[\"event\"] = \"record\"\n            temp_order[\"updated_at\"] = order.order.updated_at\n            temp_order[\"increment_id\"] = order.order.increment_id\n            if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n              this.postScanFunction(setting.post_scanning_option_second, true)\n              this.setState({ trackingOrderInput: \"\" })\n              this.updateLog(temp_order, \"tracking\")\n            } else {\n              // localLogs.push(temp_order)\n              localLogs.splice(0, 0, temp_order)\n              this.updateLog(temp_order, \"recordTracking\")\n              // this.responseAction(\"complete_order\")\n            }\n          }\n        }\n        if (type === \"Verify\") {\n          let trackNumber = order.order.tracking_num\n          if (order.order.tracking_num !== null) {\n            let scan = false\n            if (this.state.scanSecondTime === true) {\n              if (trackingNumber === this.state.userInfo.confirmation_code || (strict_cc === false && trackingNumber === \"\")) {\n                scan = true\n              }\n            }\n            if ((trackingNumber.length > order.order.tracking_num.length) || (trackingNumber.length === order.order.tracking_num.length)) {\n              let tempNum = trackingLength - order.order.tracking_num.length\n              num = trackingNumber.slice(tempNum)\n            }\n            if (num === order.order.tracking_num || scan === true) {\n              temp_order[\"id\"] = order_num\n              temp_order[\"input\"] = trackingNumber\n              temp_order[\"state\"] = this.state.trackingState === \"scanpack.rfp.no_match\" ? \"scanpack.rfp.no_match\" : \"scanpack.rfp.verifying\"\n              temp_order[\"event\"] = \"verify\"\n              temp_order[\"updated_at\"] = order.order.updated_at\n              temp_order[\"increment_id\"] = order.order.increment_id\n              if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                this.postScanFunction(setting.post_scanning_option_second, true)\n                this.updateLog(temp_order, \"tracking\")\n              } else {\n                // localLogs.push(temp_order)\n                localLogs.splice(0, 0, temp_order)\n                this.updateLog(temp_order, \"recordTracking\")\n                // this.responseAction(\"complete_order\")\n              }\n            } else {\n              this.responseAction(\"scan_fail\")\n              this.setState({ trackingState: \"scanpack.rfp.no_match\", scanSecondTime: true, postScanningMessageDetail: \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\" })\n            }\n          } else {\n            let message = \"\"\n            if (order.order.tracking_num !== null && order.order.tracking_num !== \"\") {\n              message = \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\n            } else {\n              message = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\n            }\n            if (this.state.postScan) {\n              if (trackingNumber === this.state.userInfo.confirmation_code || (strict_cc === false && trackingNumber === \"\")) {\n                temp_order[\"id\"] = order_num\n                temp_order[\"input\"] = trackingNumber\n                temp_order[\"state\"] = 'scanpack.rfp.no_tracking_info'\n                temp_order[\"event\"] = \"verify\"\n                temp_order[\"updated_at\"] = order.order.updated_at\n                temp_order[\"increment_id\"] = order.order.increment_id\n                if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                  this.postScanFunction(setting.post_scanning_option_second, true)\n                  this.setState({ postScan: false })\n                  this.updateLog(temp_order, \"tracking\")\n                } else {\n                  // localLogs.push(temp_order)\n                  localLogs.splice(0, 0, temp_order)\n                  this.updateLog(temp_order, \"recordTracking\")\n                  // this.responseAction(\"complete_order\")\n                  this.setState({ postScan: false })\n                }\n              } else {\n                this.responseAction(\"scan_fail\")\n                this.setState({ postScanningMessageDetail: message })\n              }\n            }\n            this.setState({ postScan: true, postScanningMessageDetail: message })\n          }\n        }\n      }\n    }\n    this.setState({ trackingOrderInput: \"\" })\n    // try {\n    //   this.barcode.current.focus()\n    // } catch (error) {\n    // }\n  }\n  /* SUBMIT TRACKING END */\n\n  postScanFunction = (type, timeSecond) => {\n    let scanPack = this.state.scan_pack_settings\n    let Order = this.state.order && this.state.order.order\n    if (timeSecond) {\n      if (type === \"Record\") {\n        this.setState(\n          {\n            trackingNumberView: true,\n            timeSecond: true,\n            postScanningFieldLabel: `Scan Tracking Number for Order ${Order.increment_id}`,\n            postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\n          }\n        )\n      }\n      if (type === \"Verify\") {\n        Order.tracking_num !== null\n          ?\n          this.setState(\n            {\n              trackingNumberView: true,\n              timeSecond: true,\n              postScanningFieldLabel: `Scan Shipping Label for Order ${Order.increment_id}`,\n              postScanningMessageDetail: \"Please scan the shipping label.\"\n            }\n          )\n          :\n          this.setState(\n            {\n              trackingNumberView: true,\n              timeSecond: true,\n              postScanningFieldLabel: `Scan Shipping Label for Order ${Order.increment_id}`,\n              postScanSecond: true,\n              postScanningMessageDetail: \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\n            }\n          )\n      }\n    } else {\n      if (type === \"Record\") {\n        this.setState(\n          {\n            trackingNumberView: true,\n            postScanningFieldLabel: `Scan Tracking Number for Order ${Order.increment_id}`,\n            postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\n          }\n        )\n      }\n      if (type === \"Verify\") {\n        Order.tracking_num !== null\n          ?\n          this.setState(\n            {\n              trackingNumberView: true,\n              postScanningFieldLabel: `Scan Shipping Label for Order ${Order.increment_id}`,\n              postScanningMessageDetail: \"Please scan the shipping label.\"\n            }\n          )\n          :\n          this.setState(\n            {\n              trackingNumberView: true,\n              postScanningFieldLabel: `Scan Shipping Label for Order ${Order.increment_id}`,\n              postScan: true,\n              postScanningMessageDetail: \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\n            }\n          )\n\n      }\n    }\n  }\n\n  updateAction = async (time) => {\n    const soundObject = new Audio.Sound();\n    await soundObject.unloadAsync();\n    this.setState({ bar_code: \"\" })\n  }\n\n  /*Send log at the back end method start*/\n  multipleTime = async () => {\n    let getItem = await AsyncStorage.getItem(\"logsArray\")\n    let convert = getItem && JSON.parse(getItem)\n    this.props.SubmitLog(convert)\n    setTimeout(() => this.redirectFun(), 1000);\n  }\n  /*Send log at the back end method end*/\n\n  /* FOR SUBMIT THE NOTE AND ISSUE ACTION BARCODE START */\n  submitAlert = () => {\n    let order_num = this.state.order.order.id\n    let order = this.state.order\n    let notes_fromPacker = this.state.notes_fromPacker\n    order.order.notes_fromPacker = notes_fromPacker\n    let localLogs = this.state.localLogs\n    let temp_order = {}\n    let event = \"\"\n    temp_order[\"message\"] = notes_fromPacker;\n    temp_order[\"input\"] = \"\";\n    temp_order[\"id\"] = order_num;\n    temp_order[\"order_item_id\"] = \"\";\n    temp_order[\"time\"] = new Date();\n    temp_order[\"state\"] = \"\";\n    temp_order[\"event\"] = \"note\"\n    temp_order[\"SKU\"] = \"\"\n    temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\n    temp_order[\"updated_at\"] = order.order.updated_at\n    temp_order[\"increment_id\"] = order.order.increment_id\n    if (this.state.issueFlag) {\n      this.updateLog(temp_order, \"issue\")\n    }\n    if (this.state.noteFlag) {\n      this.updateLog(temp_order, \"note\")\n    }\n    // localLogs.push(temp_order)\n    this.setState({ issueFlag: false, noteFlag: false, alert: false, notes_fromPacker: \"\", order })\n    // try {\n    //   this.barcode.current.focus()\n    // } catch (error) {\n    // }\n  }\n  /* FOR SUBMIT THE NOTE AND ISSUE ACTION BARCODE END*/\n\n  /* BULK SCAN START */\n  scanAllItem = () => {\n    let order = this.state.order\n    let count = parseInt(this.state.typeScanCount)\n    let bar_code = this.state.scan_pack_settings.type_scan_code\n    let unscanned_items = order.order.unscanned_items\n    let items = unscanned_items && unscanned_items[0]\n    let scanned_items = order.order.scanned_items\n    let log = this.state.log\n    let order_num = order.order.id\n    let next_state = order.next_state\n    let general_settings = this.state.general_settings\n    let temp_order = {}\n    let itemFound = false\n    let localLogs = this.state.localLogs\n    let SKU = \"\"\n    let orderComplete = false\n    if (general_settings.conf_code_product_instruction === \"always\") {\n      this.setState({ productConfirmationCheck: true, blockItemType: \"bulk_scan\" })\n      blockScan = true\n    } else if (general_settings.conf_code_product_instruction === \"optional\") {\n      if (items.child_items && items.child_items.length >= 1) {\n        if (items.child_items[0].confirmation === true) {\n          this.setState({ productConfirmationCheck: true, blockItemToScan: items.child_items[0], blockItemType: \"bulk_scan\" })\n          blockScan = true\n        } else if (items.confirmation === true) {\n          this.setState({ productConfirmationCheck: true, blockItemToScan: items, blockItemType: \"bulk_scan\" })\n          blockScan = true\n        }\n      }\n    }\n    if (blockScan === false || confirmProductConfirmation === true) {\n      if (items.product_type === \"individual\" && items.child_items && items.child_items.length > 0) {\n        let serialScanAccess = false\n        if (enableSerial || items.child_items[0].record_serial === false && items.child_items[0].second_record_serial === false) {\n          serialScanAccess = true\n        } else {\n          if ((items.child_items[0].record_serial) || (items.child_items[0].second_record_serial)) {\n            let eventType = \"scan_all_item\"\n            this.setState({ serialRecordPopUpShow: true, type: eventType })\n          }\n        }\n        if (serialScanAccess) {\n          items.child_items && items.child_items.length > 0 && items.child_items.map((childItem, index) => {\n            if (index === 0) {\n              if (scanned_items.length > 0) {\n                scanned_items.map((scan) => {\n                  if (childItem.product_id === scan.product_id && itemFound === false) {\n                    scan.scanned_qty = childItem.scanned_qty + childItem.qty_remaining\n                    childItem.qty_remaining = 0\n                    items.child_items.splice(index, 1)\n                    itemFound = true\n                    SKU = childItem.sku\n                    items.child_items.length === 0 && unscanned_items.splice(index, 1)\n                  } else {\n                    if (childItem.scanned_qty === 0 && itemFound === false) {\n                      childItem.scanned_qty = childItem.scanned_qty + childItem.qty_remaining\n                      childItem.qty_remaining = 0\n                      // scanned_items.push(childItem)\n                      scanned_items.splice(0, 0, childItem)\n                      items.child_items.splice(index, 1)\n                      itemFound = true\n                      SKU = childItem.sku\n                      items.child_items.length === 0 && unscanned_items.splice(index, 1)\n                    }\n                  }\n                })\n              } else {\n                if (itemFound === false) {\n                  childItem.scanned_qty = childItem.scanned_qty + childItem.qty_remaining\n                  childItem.qty_remaining = 0\n                  // scanned_items.push(childItem)\n                  scanned_items.splice(0, 0, childItem)\n                  items.child_items.splice(index, 1)\n                  itemFound = true\n                  SKU = childItem.sku\n                  items.child_items.length === 0 && unscanned_items.splice(index, 1)\n                }\n              }\n              if (unscanned_items.length === 0) {\n                orderComplete = true\n              }\n            }\n            return childItem\n          })\n        }\n      } else {\n        if (items && items.qty_remaining > 0) {\n          let serialScanAccess = false\n          if (enableSerial || items.record_serial === false && items.second_record_serial === false) {\n            serialScanAccess = true\n          } else {\n            if ((items.record_serial) || (items.second_record_serial)) {\n              let eventType = \"submit_type_scan\"\n              this.setState({ serialRecordPopUpShow: true, type: eventType })\n            }\n          }\n          if (serialScanAccess) {\n            unscanned_items.map((unscan, index) => {\n              if (index === 0) {\n                if (scanned_items.length > 0) {\n                  scanned_items.map((scan) => {\n                    if (unscan.order_item_id === scan.order_item_id && itemFound === false) {\n                      scan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining\n                      scan.qty_remaining = 0\n                      unscanned_items.splice(index, 1)\n                      itemFound = true\n                      SKU = unscan.sku\n                    } else {\n                      if (unscan.scanned_qty === 0 && itemFound === false) {\n                        unscan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining\n                        unscan.qty_remaining = 0\n                        // scanned_items.push(unscan)\n                        scanned_items.splice(0, 0, unscan)\n                        unscanned_items.splice(index, 1)\n                        itemFound = true\n                        SKU = unscan.sku\n                      }\n                    }\n                  })\n                } else {\n                  unscan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining\n                  unscan.qty_remaining = 0\n                  // scanned_items.push(unscan)\n                  scanned_items.splice(0, 0, unscan)\n                  unscanned_items.splice(index, 1)\n                  SKU = unscan.sku\n                }\n                if (unscanned_items.length === 0) {\n                  orderComplete = true\n                }\n              }\n              return unscan\n            })\n          }\n        }\n      }\n      if (this.state.type == \"scan_all_item\") {\n      } else {\n        temp_order[\"input\"] = bar_code;\n        temp_order[\"id\"] = order_num;\n        temp_order[\"order_item_id\"] = items && items.order_item_id;\n        temp_order[\"time\"] = new Date();\n        temp_order[\"state\"] = next_state;\n        temp_order[\"event\"] = \"bulk_scan\"\n        temp_order[\"SKU\"] = SKU ? SKU : \"\"\n        temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\n        temp_order[\"updated_at\"] = order.order.updated_at\n        temp_order[\"increment_id\"] = order.order.increment_id\n        this.updateLog(temp_order, \"skip_curser\")\n        // localLogs.push(temp_order)\n        localLogs.splice(0, 0, temp_order)\n      }\n      this.setState({ typeScanAlert: false, typeScanCount: \"\" })\n      enableSerial = false\n      if (orderComplete === true) {\n        this.updateLog(temp_order, \"order_complete\")\n      } else {\n        this.responseAction(\"scan_success\")\n      }\n      confirmProductConfirmation = false\n    }\n    // try {\n    //   this.barcode.current.focus()\n    // } catch (error) {\n    // }\n  }\n  /* BULK SCAN END */\n\n  /* TYPE SCAN START*/\n  submitTypeScan = () => {\n    let order = this.state.order\n    let count = parseInt(this.state.typeScanCount)\n    let bar_code = this.state.scan_pack_settings.type_scan_code\n    let unscanned_items = order.order.unscanned_items\n    let items = unscanned_items && unscanned_items[0]\n    let scanned_items = order.order.scanned_items\n    // let log =  this.state.log\n    let order_num = order.order.id\n    let next_state = order.next_state\n    let temp_order = {}\n    let remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null\n    let scanAccess = false\n    let scanpush = false\n    let match = false\n    let skip = false\n    let localLogs = this.state.localLogs\n    let orderInputType = items.product_type === \"individual\" && items.child_items.length > 0 ? items.child_items[0].barcodes[0].barcode : items.barcodes[0].barcode\n    let SKU = \"\"\n    if (this.state.type === \"submit_type_scan\") {\n      count = 1\n    } else {\n      count = this.state.typeScanState !== this.state.typeScanDeductCountState ? count - 1 : count\n    }\n    if (items.product_type === \"individual\" && items.child_items.length > 0) {\n      if (items.child_items[0].qty_remaining >= count) {\n        let serialScanAccess = false\n        if (enableSerial || items.child_items[0].record_serial === false && items.child_items[0].second_record_serial === false) {\n          serialScanAccess = true\n        } else {\n          if ((items.child_items[0].record_serial) || (items.child_items[0].second_record_serial)) {\n            let eventType = \"submit_type_scan\"\n            this.setState({ serialRecordPopUpShow: true, type: eventType })\n          }\n        }\n        if (serialScanAccess) {\n          items.child_items && items.child_items.map((child, index) => {\n            if (index === 0) {\n              if (scanned_items.length > 0) {\n                scanned_items.map((scan) => {\n                  let count_item = count\n                  if (child.product_id === scan.product_id) {\n                    child.qty_remaining = child.qty_remaining - count_item\n                    child.scanned_qty = child.scanned_qty + count_item\n                    scan.qty_remaining = child.qty_remaining\n                    scan.scanned_qty = child.scanned_qty\n                    child.qty_remaining === 0 && items.child_items.splice(index, 1)\n                    SKU = child.sku\n                  } else {\n                    if (child.qty_remaining === count && child.scanned_qty === 0) {\n                      child.qty_remaining = child.qty_remaining - count_item\n                      child.scanned_qty = child.scanned_qty + count_item\n                      scan.qty_remaining = child.qty_remaining\n                      scan.scanned_qty = child.scanned_qty\n                      // scanned_items.push(child)\n                      scanned_items.splice(0, 0, child)\n                      child.qty_remaining === 0 && items.child_items.splice(index, 1)\n                      items.child_items.length === 0 && unscanned_items.splice(index, 1)\n                      SKU = child.sku\n                    } else {\n                      if (child.qty_remaining >= count && child.scanned_qty === 0) {\n                        child.qty_remaining = child.qty_remaining - count_item\n                        child.scanned_qty = child.scanned_qty + count_item\n                        scan.qty_remaining = child.qty_remaining\n                        scan.scanned_qty = child.scanned_qty\n                        // scanned_items.push(child)\n                        scanned_items.splice(0, 0, child)\n                        child.qty_remaining === 0 && items.child_items.splice(index, 1)\n                        SKU = child.sku\n                      }\n                    }\n                  }\n                })\n                if (child.qty_remaining === 0) {\n                  items.child_items.length === 0 && unscanned_items.splice(index, 1)\n                }\n              } else {\n                if (child.qty_remaining === count) {\n                  let count_item = count\n                  child.qty_remaining = child.qty_remaining - count_item\n                  child.scanned_qty = child.scanned_qty + count_item\n                  // scanned_items.push(child)\n                  scanned_items.splice(0, 0, child)\n                  child.qty_remaining === 0 && items.child_items.splice(index, 1)\n                  items.child_items.length === 0 && unscanned_items.splice(index, 1)\n                  SKU = child.sku\n                } else {\n                  if (child.qty_remaining >= count && child.scanned_qty === 0) {\n                    let count_item = count\n                    child.qty_remaining = child.qty_remaining - count_item\n                    child.scanned_qty = child.scanned_qty + count_item\n                    child.qty_remaining === 0 && items.child_items.splice(index, 1)\n                    // scanned_items.push(child)\n                    scanned_items.splice(0, 0, child)\n                    SKU = child.sku\n                  }\n                }\n              }\n            }\n          })\n          if (unscanned_items.length > 0) {\n            this.responseAction(\"scan_success\")\n          } else {\n            this.responseAction(\"order_complete\")\n          }\n        }\n      } else {\n        this.alertBox(`The quantity entered exceeds the remaining ${items.child_items[0].qty_remaining} pieces in the order. Please try again`, true)\n        skip = true\n      }\n    } else {\n      if (items.qty_remaining >= count) {\n        let serialScanAccess = false\n        if (enableSerial || items.record_serial === false && items.second_record_serial === false) {\n          serialScanAccess = true\n        } else {\n          if ((items.record_serial) || (items.second_record_serial)) {\n            let eventType = \"submit_type_scan\"\n            this.setState({ serialRecordPopUpShow: true, type: eventType })\n          }\n        }\n        if (serialScanAccess) {\n          unscanned_items.map((unscan, index) => {\n            if (index === 0) {\n              if (scanned_items.length > 0) {\n                scanned_items.map((scan) => {\n                  let count_item = count\n                  if (unscan.order_item_id === scan.order_item_id) {\n                    unscan.qty_remaining = unscan.qty_remaining - count_item\n                    unscan.scanned_qty = unscan.scanned_qty + count_item\n                    scan.qty_remaining = unscan.qty_remaining\n                    scan.scanned_qty = unscan.scanned_qty\n                    SKU = unscan.sku\n                  } else {\n                    if (unscan.qty_remaining === count && unscan.scanned_qty === 0) {\n                      unscan.qty_remaining = unscan.qty_remaining - count_item\n                      unscan.scanned_qty = unscan.scanned_qty + count_item\n                      scan.qty_remaining = unscan.qty_remaining\n                      scan.scanned_qty = unscan.scanned_qty\n                      // scanned_items.push(unscan)\n                      scanned_items.splice(0, 0, unscan)\n                      unscanned_items.splice(index, 1)\n                      SKU = unscan.sku\n                    } else {\n                      if (unscan.qty_remaining >= count && unscan.scanned_qty === 0) {\n                        unscan.qty_remaining = unscan.qty_remaining - count_item\n                        unscan.scanned_qty = unscan.scanned_qty + count_item\n                        scan.qty_remaining = unscan.qty_remaining\n                        scan.scanned_qty = unscan.scanned_qty\n                        // scanned_items.push(unscan)\n                        scanned_items.splice(0, 0, unscan)\n                        SKU = unscan.sku\n                      }\n                    }\n                  }\n                })\n                if (unscan.qty_remaining === 0) {\n                  unscanned_items.splice(index, 1)\n                }\n              } else {\n                if (unscan.qty_remaining === count) {\n                  let count_item = count\n                  unscan.qty_remaining = unscan.qty_remaining - count_item\n                  unscan.scanned_qty = unscan.scanned_qty + count_item\n                  // scanned_items.push(unscan)\n                  scanned_items.splice(0, 0, unscan)\n                  unscanned_items.splice(index, 1)\n                  SKU = unscan.sku\n                } else {\n                  if (unscan.qty_remaining >= count && unscan.scanned_qty === 0) {\n                    let count_item = count\n                    unscan.qty_remaining = unscan.qty_remaining - count_item\n                    unscan.scanned_qty = unscan.scanned_qty + count_item\n                    // scanned_items.push(unscan)\n                    scanned_items.splice(0, 0, unscan)\n                    SKU = unscan.sku\n                  }\n                }\n              }\n              if (unscanned_items.length > 0) {\n                this.responseAction(\"scan_success\")\n              } else {\n                this.responseAction(\"order_complete\")\n              }\n            }\n          })\n        }\n      } else {\n        this.alertBox(`The quantity entered exceeds the remaining ${items.qty_remaining} pieces in the order. Please try again`, true)\n        skip = true\n      }\n    }\n    if (this.state.type === \"submit_type_scan\") {\n\n    } else {\n      temp_order[\"input\"] = orderInputType\n      temp_order[\"id\"] = order_num\n      temp_order[\"order_item_id\"] = items && items.order_item_id\n      temp_order[\"time\"] = new Date()\n      temp_order[\"box_id\"] = null\n      temp_order[\"state\"] = 'scanpack.rfp.default'\n      temp_order[\"count\"] = count;\n      temp_order[\"event\"] = \"type_scan\"\n      temp_order[\"SKU\"] = SKU ? SKU : \"\"\n      temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\n      temp_order[\"updated_at\"] = order.order.updated_at\n      temp_order[\"increment_id\"] = order.order.increment_id\n      // if(this.state.typeScanState !== unscanned_items[0] && unscanned_items[0].sku){\n      //   this.setState({typeScanState: \"\"})\n      // }\n      if (skip === false) {\n        this.updateLog(temp_order)\n        // localLogs.push(temp_order)\n        localLogs.splice(0, 0, temp_order)\n      }\n    }\n    if (count <= remain_qty) {\n      this.setState({ typeScanAlert: false, typeScanCount: \"\" })\n    }\n    enableSerial = false\n    this.setState({ typeScanCount: \"\", typeScanDeductCountState: this.state.typeScanState, typeScanAlert: false })\n    // try {\n    //   this.barcode.current.focus()\n    // } catch (error) {\n    // }\n  }\n  /* TYPE SCAN END */\n\n  alertBox = (message, skip) => {\n    this.setState({ popUpModelShow: true, message: message })\n    setTimeout(function () {\n      this.setState({ popUpModelShow: false, message: \"\" });\n    }.bind(this), 4000);\n    // try {\n    //   this.barcode.current.focus()\n    // } catch (error) {\n    // }\n  }\n\n  closeAlert = () => {\n    this.setState({\n      alert: false,\n      notes_fromPacker: \"\",\n      typeScanAlert: false,\n      typeScanCount: 0,\n      popUpModelShow: false,\n      addBarcodeWindow: false,\n      message: \"\",\n      serialRecordPopUpShow: false,\n      serialRecordInput: \"\",\n      serialRecordTwo: \"\",\n      serialRecordOne: \"\",\n      clickScanConfirmation: false,\n      confirmationCheckItem: null,\n      clickScanConfirmInput: \"\",\n      productConfirmationCheck: false,\n      errorMessageProductConfirmationCheck: false,\n      errorMessageClickScanConfirmation: false,\n      orderConfirmPopUp: false\n    })\n    this.currentFocus()\n    enableSerial = false\n  }\n\n  noBarcodeScan = (item) => {\n  }\n\n  /* CLICK SCAN METHOD START */\n  clickScan = (item, fromActionBarcode) => {\n    let scan_pack_settings = this.state.scan_pack_settings\n    let access = fromActionBarcode === \"actionbarcode\" ? scan_pack_settings.click_scan : scan_pack_settings.enable_click_sku\n    if (access && item) {\n      if (item.click_scan_enabled === \"on\" || item.click_scan_enabled === \"on_with_confirmation\") {\n        if (item.click_scan_enabled === \"on_with_confirmation\") {\n          this.setState({ clickScanConfirmation: true, confirmationCheckItem: item })\n        } else {\n          let barcode = item.barcodes && item.barcodes.length === 0 ? \"noBarcode\" : item.barcodes[0].barcode\n          this.scanBarcode(barcode, \"item_present\")\n        }\n      } else {\n        this.alertBox(\"Click scan is not enable\")\n      }\n    }\n    this.props.updateProductList(null)\n  }\n  /* CLICK SCAN METHOD END*/\n\n  /*Click Scan Confirmation Pop Up Start*/\n  clickScanConfirmFun = () => {\n    let userInfo = this.state.userInfo\n    let item = this.state.confirmationCheckItem\n    if (item && userInfo) {\n      if (this.state.userInfo.confirmation_code === this.state.clickScanConfirmInput) {\n        let barcode = item.barcodes[0].barcode\n        this.scanBarcode(barcode, \"item_present\")\n        this.setState({ clickScanConfirmation: false, confirmationCheckItem: null, clickScanConfirmInput: \"\" })\n      } else {\n        if (this.state.general_settings && this.state.general_settings.strict_cc) {\n          this.setState({ errorMessageClickScanConfirmation: true })\n        } else {\n          let barcode = item.barcodes[0].barcode\n          this.scanBarcode(barcode, \"item_present\")\n          this.setState({ clickScanConfirmation: false, confirmationCheckItem: null, clickScanConfirmInput: \"\" })\n        }\n      }\n    }\n  }\n  /*Click Scan Confirmation Pop Up End*/\n\n  /*Click Scan Confirmation On Change Start*/\n  handleClickScanConfirmInput = (e) => {\n    this.setState({ clickScanConfirmInput: e, errorMessageClickScanConfirmation: false })\n  }\n  /*Click Scan Confirmation On Change End*/\n\n  /*Product Confirmation Submit Start*/\n  ProductConfirmationCheckFun = () => {\n    let userCode = this.state.userInfo.confirmation_code\n    let userInput = this.state.productConfirmationCheckInput\n    if (userInput !== \"\") {\n      if (userCode === userInput) {\n        // 12345678900\n        if (this.state.blockItemType === \"item_present\") {\n          confirmProductConfirmation = true\n          this.clickScan(this.state.blockItemToScan)\n        }\n        if (this.state.blockItemType === \"barcode\") {\n          confirmProductConfirmation = true\n          this.scanBarcode()\n        }\n        if (this.state.blockItemType === \"bulk_scan\") {\n          confirmProductConfirmation = true\n          this.scanAllItem()\n        }\n        this.setState({ productConfirmationCheckInput: \"\", productConfirmationCheck: false })\n      } else {\n        this.setState({ productConfirmationCheckInput: \"\" })\n        this.responseAction(\"scan_fail\")\n      }\n    } else {\n      if (this.state.generalSettings.strict_cc === true) {\n        this.responseAction(\"not_ready\")\n      } else {\n        if (this.state.blockItemType === \"item_present\") {\n          confirmProductConfirmation = true\n          this.clickScan(this.state.blockItemToScan)\n        }\n        if (this.state.blockItemType === \"barcode\") {\n          confirmProductConfirmation = true\n          this.scanBarcode()\n        }\n        if (this.state.blockItemType === \"bulk_scan\") {\n          confirmProductConfirmation = true\n          this.scanAllItem()\n        }\n        this.setState({ productConfirmationCheckInput: \"\", productConfirmationCheck: false })\n      }\n    }\n  }\n  /*Product Confirmation Submit End*/\n\n  /*Product Confirmation Input Field On Change Start*/\n  handleProductConfirmationCheckInput = (e) => {\n    this.setState({ productConfirmationCheckInput: e, errorMessageProductConfirmationCheck: false })\n  }\n  /*Product Confirmation Input Field On Change End*/\n\n  /*Order Confirmation Submit Start*/\n  OrderConfirmationCheckFun = () => {\n    let userCode = this.state.userInfo.confirmation_code\n    let userInput = this.state.OrderConfirmationCheckInput\n    if (userInput !== \"\") {\n      if (userCode === userInput) {\n        this.setState({ orderConfirmPopUp: false })\n      } else {\n        this.setState({ OrderConfirmationCheckInput: \"\" })\n        this.responseAction(\"scan_fail\")\n      }\n    } else {\n      if (this.state.generalSettings.strict_cc === true) {\n        this.responseAction(\"not_ready\")\n      } else {\n        this.setState({ orderConfirmPopUp: false })\n        this.currentFocus()\n      }\n    }\n  }\n  /*Order Confirmation Submit End*/\n\n  /*Order Confirmation Input Field On Change Start*/\n  handleOrderConfirmationCheckInput = (e) => {\n    this.setState({ OrderConfirmationCheckInput: e, errorMessageOrderConfirmationCheck: false })\n  }\n  /*Order Confirmation Input Field On Change End*/\n\n\n  /* RESTART ACTION BARCODE METHOD START*/\n  // restart = () => {\n  //   let order = this.state.order\n  //   if(order){\n  //     let temp = []\n  //     let unscanned_items = order.order.unscanned_items\n  //     let scanned_items = order.order.scanned_items\n  //     order.order.scanned_items.map((scan , index) => {\n  //         if(scan.qty_remaining !== 0){\n  //           scan.qty_remaining = scan.scanned_qty\n  //           scan.scanned_qty = 0\n  //           unscanned_items.unshift(scan)\n  //         }\n  //     })\n  //     order.order.scanned_items = []\n  //   }\n  // }\n  /* RESTART ACTION BARCODE METHOD END*/\n\n  restartButton = () => {\n    let order = this.state.order\n    let scanned_items = order.order.scanned_items\n    let unscanned_items = order.order.unscanned_items\n    let scan_pack_settings = this.state.scan_pack_settings\n    let order_num = order.order.id\n    let Log_count = \"\"\n    let SKU = \"\"\n    let product_name = \"\"\n    let localLogs = this.state.localLogs\n    let remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null\n    let temp_order = {}\n    let ActionBarcode = true\n    temp_order[\"input\"] = scan_pack_settings.restart_code;\n    temp_order[\"id\"] = order_num;\n    temp_order[\"order_item_id\"] = unscanned_items.length > 0 ? unscanned_items[0].order_item_id : (scanned_items.length > 0 ? scanned_items[0].order_item_id : \"\")\n    temp_order[\"time\"] = new Date()\n    temp_order[\"rem_qty\"] = remain_qty\n    temp_order[\"SKU\"] = SKU ? SKU : unscanned_items[0].sku\n    temp_order[\"Log_count\"] = Log_count\n    temp_order[\"product_name\"] = product_name\n    temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\n    temp_order[\"state\"] = 'scanpack.rfp.default'\n    temp_order[\"event\"] = \"regular\"\n    temp_order[\"updated_at\"] = order.order.updated_at\n    temp_order[\"increment_id\"] = order.order.increment_id\n    this.updateLog(temp_order, \"RESTART\")\n    if (this.state.serialRecordInput === \"\") {\n      // localLogs.push(temp_order)\n      localLogs.splice(0, 0, temp_order)\n    }\n  }\n\n  addNote = () => {\n    if (this.state.order) {\n      let order = this.state.order\n      let notes_fromPacker = order.order.notes_fromPacker\n      this.setState({ alert: true, notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker, noteFlag: true })\n    }\n  }\n\n  saveChanges = async () => {\n    let getItem = await AsyncStorage.getItem(\"logsArray\")\n    let count = getItem !== null && JSON.parse(getItem)\n    if (count && count.length > 0) {\n      this.alertBox(`Save Changes Successful`, true)\n      this.multipleTime()\n    }\n  }\n\n  /*SCAN BARCODE METHOD START*/\n  scanBarcode = (clickBarcode, type) => {\n    if (this.state.order) {\n      let order = this.state.order\n      let scan_pack_settings = this.state.scan_pack_settings\n      let localScannedItems = this.state.scanned_items\n      let scanned_items = order.order.scanned_items\n      let notes_fromPacker = order.order.notes_fromPacker\n      let unscanned_items = order.order.unscanned_items\n      let bar_code = this.state.bar_code\n      let event_code = this.state.bar_code\n      let ActionBarcode = false\n      let remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null\n      if (type === \"item_present\") {\n        bar_code = clickBarcode\n        event_code = clickBarcode\n        let tempArr = [{\n          barcode: \"noBarcode\",\n          id: 0,\n          is_multipack_barcode: true,\n          packing_count: \"1\"\n        }]\n        order.order.unscanned_items.map((noCode, index) => {\n          if (noCode.barcodes && noCode.barcodes.length === 0) {\n            noCode.barcodes = tempArr\n          }\n        })\n      } else {\n        bar_code = this.state.bar_code\n      }\n      let findKit3 = false\n      let log = this.state.log\n      let order_num = order.order.id\n      let next_state = order.next_state\n      let general_settings = this.state.general_settings\n      let master_switch = general_settings && general_settings.master_switch\n      let temp_order = {}\n      let stop_add_log = false;\n      let lowercase = false;\n      let skipError = false;\n      let event_scanned = false;\n      let SKU = \"\";\n      let Log_count = \"\";\n      let localLogs = this.state.localLogs\n      let product_name = \"\"\n      let rejectLocalLog = true\n      let Action_Type = \"\"\n      let order_complete_flag = false\n      let qty_remain = 0\n      let scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : \"\"\n      if (bar_code !== \"\") {\n        if (scan_pack_settings.escape_string_enabled && type !== \"item_present\") {\n          let removeSpaceBarCode = bar_code\n          if (scan_pack_settings.first_escape_string_enabled) {\n            let check = scan_pack_settings.escape_string\n            if (removeSpaceBarCode && removeSpaceBarCode.includes(check) && scan_pack_settings.first_escape_string_enabled !== \"\") {\n              let tempIndex = removeSpaceBarCode.indexOf(check)\n              bar_code = removeSpaceBarCode.slice(0, tempIndex)\n            }\n          }\n          if (scan_pack_settings.second_escape_string_enabled) {\n            let check = scan_pack_settings.second_escape_string\n            if (removeSpaceBarCode && removeSpaceBarCode.includes(check) && scan_pack_settings.second_escape_string !== \"\") {\n              let tempIndex = removeSpaceBarCode.indexOf(check)\n              bar_code = removeSpaceBarCode.slice(0, tempIndex)\n            }\n          }\n        }\n        if (scan_pack_settings.note_from_packer_code_enabled) {\n          if (scan_pack_settings.note_from_packer_code === bar_code) {\n            stop_add_log = true\n            skipError = true\n            this.setState({ alert: true, notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker, noteFlag: true, bar_code: \"\" })\n          }\n        }\n        if (scan_pack_settings && scan_pack_settings.restart_code_enabled && scan_pack_settings.restart_code === bar_code) {\n          skipError = true\n          Action_Type = \"RESTART\"\n          ActionBarcode = true\n          // this.responseAction(\"restart_action_complete\")\n        }\n        if (scan_pack_settings.type_scan_code_enabled) {\n          if (scan_pack_settings.type_scan_code === bar_code) {\n            if (this.state.typeScanState !== \"\") {\n              if (unscanned_items[0].product_type === \"individual\" && unscanned_items[0].child_items.length > 0) {\n                if (this.state.typeScanState === unscanned_items[0].child_items[0].sku) {\n                  if ((unscanned_items[0].child_items[0].record_serial) || (unscanned_items[0].child_items[0].second_record_serial)) {\n                    this.setState({ typeScanAlert: true, type: \"submit_type_scan\" })\n                  } else {\n                    this.setState({ typeScanAlert: true })\n                  }\n                } else {\n                  this.alertBox(\"Please scan the item once before triggering a type-in count.\")\n                }\n              } else {\n                if (this.state.typeScanState === unscanned_items[0].sku) {\n                  if ((unscanned_items[0].record_serial) || (unscanned_items[0].second_record_serial)) {\n                    this.setState({ typeScanAlert: true, type: \"submit_type_scan\" })\n                  } else {\n                    this.setState({ typeScanAlert: true })\n                  }\n                } else {\n                  this.alertBox(\"Please scan the item once before triggering a type-in count.\")\n                }\n              }\n            } else {\n              this.alertBox(\"Please scan the item once before triggering a type-in count.\")\n            }\n            skipError = true\n            stop_add_log = true\n          }\n        }\n        if (scan_pack_settings.scanned) {\n          if (scan_pack_settings.scanned_barcode === bar_code) {\n            skipError = true\n            event_scanned = true\n            let Order = this.state.order && this.state.order.order\n            Order[\"unscanned_items\"] = []\n            this.setState({ Order })\n            this.responseAction(\"order_complete\")\n            ActionBarcode = true\n            // stop_add_log = true\n          }\n        }\n        if (scan_pack_settings.service_issue_code_enabled) {\n          if (scan_pack_settings.service_issue_code === bar_code) {\n            this.setState({ alert: true, notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker, issueFlag: true })\n            skipError = true\n          }\n        }\n        if (scan_pack_settings.click_scan) {\n          if (scan_pack_settings.click_scan_barcode === bar_code) {\n            let item = unscanned_items && unscanned_items[0]\n            this.clickScan(item, \"actionbarcode\")\n            skipError = true\n            ActionBarcode = true\n          }\n        }\n        if (unscanned_items[0].product_type === \"individual\") {\n          if (unscanned_items[0].child_items && unscanned_items[0].child_items.length > 0) {\n            if (scan_pack_settings.remove_barcode && scan_pack_settings.remove_barcode === bar_code) {\n              unscanned_items[0].child_items.shift()\n              unscanned_items[0].child_items.length === 0 && unscanned_items.shift()\n              this.responseAction(\"scan_success\")\n              skipError = true\n              ActionBarcode = true\n            }\n          }\n        } else {\n          if (unscanned_items && unscanned_items.length > 0) {\n            if (scan_pack_settings.remove_barcode && scan_pack_settings.remove_barcode === bar_code) {\n              unscanned_items.shift()\n              this.responseAction(\"scan_success\")\n              skipError = true\n              ActionBarcode = true\n            }\n          }\n        }\n        if (scan_pack_settings.scanning_sequence === \"any_sequence\" && master_switch === false) {\n          bar_code = bar_code.toLowerCase()\n          lowercase = true\n        }\n        if (unscanned_items.length > 0) {\n          if (scan_pack_settings.scanning_sequence === \"any_sequence\" ? \"any_sequence\" : \"items_sequence\") {\n            let scanpush = false\n            let itemFound = false\n            unscanned_items.length > 0 && unscanned_items.map((item, index) => {\n              if (item.product_type === \"individual\" && item.child_items && item.child_items.length > 0) {\n                if (item.child_items[0].skippable) {\n                  let skip_code = lowercase === true ? scan_pack_settings.skip_code.toLowerCase() : scan_pack_settings.skip_code\n                  if (scan_pack_settings.skip_code_enabled && skip_code === bar_code) {\n                    item.child_items.splice(index, 1)\n                    itemFound = true\n                    this.responseAction(\"scan_success\")\n                    if (unscanned_items.length === 0) {\n                      order_complete_flag = true\n                    }\n                    ActionBarcode = true\n                  }\n                }\n              } else {\n                if (item.skippable) {\n                  let skip_code = lowercase === true ? scan_pack_settings.skip_code.toLowerCase() : scan_pack_settings.skip_code\n                  if (scan_pack_settings.skip_code_enabled && skip_code === bar_code) {\n                    unscanned_items.splice(index, 1)\n                    itemFound = true\n                    this.responseAction(\"scan_success\")\n                    if (unscanned_items.length === 0) {\n                      order_complete_flag = true\n                    }\n                    ActionBarcode = true\n                  }\n                }\n              }\n\n              scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : index\n              if (index === scanAccess) {\n                {\n                  item && item.product_type === \"individual\" && item.child_items && item.child_items.length > 0\n                    ?\n                    item && item.child_items.map((childItem, childIndex) => {\n                      scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : childIndex\n                      if (childIndex === scanAccess) {\n                        childItem.barcodes.map((barcode) => {\n                          let Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode\n                          if (Barcode === bar_code && scanpush === false) {\n                            let serialScanAccess = false\n                            if (enableSerial || childItem.record_serial === false && childItem.second_record_serial === false) {\n                              serialScanAccess = true\n                            } else {\n                              if ((childItem.record_serial) || (childItem.second_record_serial)) {\n                                let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\n                                rejectLocalLog = false\n                                this.setState({ serialRecordPopUpShow: true, type: eventType })\n                              }\n                            }\n                            if (confirmProductConfirmation === false) {\n                              if (general_settings.conf_code_product_instruction === \"always\") {\n                                this.setState({ productConfirmationCheck: true, blockItemToScan: childItem, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\n                                skipError = true\n                                blockScan = true\n                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                                if (childItem.confirmation === true) {\n                                  this.setState({ productConfirmationCheck: true, blockItemToScan: childItem, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\n                                  skipError = true\n                                  blockScan = true\n                                }\n                              }\n                            }\n                            if (blockScan === false || confirmProductConfirmation === true) {\n                              if (serialScanAccess) {\n                                if (scanned_items.length > 0) {\n                                  scanned_items.map((scan, scanItemIndex) => {\n                                    scan.barcodes.map((scancode) => {\n                                      let Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode\n                                      if (type === \"item_present\" ? childItem.qty_remaining >= 1 : childItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                        if (Scancode === Barcode && Barcode === bar_code && childItem.product_id === scan.product_id) {\n                                          if (scan.qty_remaining === 1 && scanpush === false) {\n                                            if (type === \"item_present\") {\n                                              childItem.qty_remaining = childItem.qty_remaining - 1\n                                              childItem.scanned_qty = childItem.scanned_qty + 1\n                                              // scan.qty_remaining = childItem.qty_remaining\n                                              // scan.scanned_qty = childItem.scanned_qty\n                                            } else {\n                                              if (childItem.qty_remaining > 0) {\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\n                                                // scan.qty_remaining = childItem.qty_remaining\n                                                // scan.scanned_qty = childItem.scanned_qty\n                                              }\n                                            }\n                                            item.child_items.splice(scanAccess, 1)\n                                            item.child_items.length === 0 && unscanned_items.splice(index, 1)\n                                            scanned_items.splice(scanItemIndex, 1)\n                                            scanned_items.splice(0, 0, scan)\n                                            this.setState({ typeScanState: childItem.sku })\n                                            scanpush = true\n                                            SKU = childItem.sku\n                                            Log_count = barcode.packing_count\n                                            product_name = childItem.name\n                                            qty_remain = childItem.qty_remaining\n                                          } else {\n                                            if (scan.qty_remaining > 0 && scanpush === false) {\n                                              if (type === \"item_present\") {\n                                                childItem.scanned_qty = childItem.scanned_qty + 1\n                                                childItem.qty_remaining = childItem.qty_remaining - 1\n                                                // scan.qty_remaining = childItem.qty_remaining\n                                                // scan.scanned_qty = childItem.scanned_qty\n                                              } else {\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\n                                                // scan.qty_remaining = childItem.qty_remaining\n                                                // scan.scanned_qty = childItem.scanned_qty\n                                              }\n                                              scanned_items.splice(scanItemIndex, 1)\n                                              scanned_items.splice(0, 0, scan)\n                                              this.setState({ typeScanState: childItem.sku })\n                                              scanpush = true\n                                              SKU = childItem.sku\n                                              Log_count = barcode.packing_count\n                                              product_name = childItem.name\n                                              qty_remain = childItem.qty_remaining\n                                            }\n                                            if (childItem.qty_remaining === 0) {\n                                              item.child_items.splice(scanAccess, 1)\n                                              item.child_items.length === 0 && unscanned_items.splice(index, 1)\n                                            }\n                                          }\n                                        } else {\n                                          if (scancode !== bar_code && childItem.scanned_qty === 0) {\n                                            if (childItem.qty_remaining === 1 && scanpush === false) {\n                                              if (type === \"item_present\") {\n                                                childItem.qty_remaining = childItem.qty_remaining - 1\n                                                childItem.scanned_qty = childItem.scanned_qty + 1\n                                                // scan.qty_remaining = childItem.qty_remaining\n                                                // scan.scanned_qty = childItem.scanned_qty\n                                              } else {\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\n                                                // scan.qty_remaining = childItem.qty_remaining\n                                                // scan.scanned_qty = childItem.scanned_qty\n                                              }\n                                              // scanned_items.push(childItem)\n                                              scanned_items.splice(0, 0, childItem)\n                                              item.child_items.splice(scanAccess, 1)\n                                              item.child_items.length === 0 && unscanned_items.splice(index, 1)\n                                              this.setState({ typeScanState: childItem.sku })\n                                              scanpush = true\n                                              SKU = childItem.sku\n                                              Log_count = barcode.packing_count\n                                              product_name = childItem.name\n                                              qty_remain = childItem.qty_remaining\n                                            } else {\n                                              if (scanpush === false) {\n                                                if (type === \"item_present\") {\n                                                  childItem.qty_remaining = childItem.qty_remaining - 1\n                                                  childItem.scanned_qty = childItem.scanned_qty + 1\n                                                } else {\n                                                  childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\n                                                  childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\n                                                }\n                                                // scanned_items.push(childItem)\n                                                scanned_items.splice(0, 0, childItem)\n                                                this.setState({ typeScanState: childItem.sku })\n                                                scanpush = true\n                                                SKU = childItem.sku\n                                                Log_count = barcode.packing_count\n                                                product_name = childItem.name\n                                                qty_remain = childItem.qty_remaining\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    })\n                                  })\n                                } else {\n                                  if (Barcode === bar_code && childItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                    if (childItem.qty_remaining === 1 && scanpush === false) {\n                                      if (type === \"item_present\") {\n                                        childItem.qty_remaining = childItem.qty_remaining - 1\n                                        childItem.scanned_qty = childItem.scanned_qty + 1\n                                      } else {\n                                        childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\n                                        childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\n                                      }\n                                      // scanned_items.push(childItem)\n                                      scanned_items.splice(0, 0, childItem)\n                                      item.child_items.splice(scanAccess, 1)\n                                      item.child_items.length === 0 && unscanned_items.splice(index, 1)\n                                      this.setState({ typeScanState: childItem.sku })\n                                      scanpush = true\n                                      SKU = childItem.sku\n                                      Log_count = barcode.packing_count\n                                      product_name = childItem.name\n                                      qty_remain = childItem.qty_remaining\n                                    } else {\n                                      if (scanpush === false) {\n                                        if (type === \"item_present\") {\n                                          childItem.qty_remaining = childItem.qty_remaining - 1\n                                          childItem.scanned_qty = childItem.scanned_qty + 1\n                                        } else {\n                                          childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\n                                          childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\n                                        }\n                                        // scanned_items.push(childItem)\n                                        scanned_items.splice(0, 0, childItem)\n                                        this.setState({ typeScanState: childItem.sku })\n                                        scanpush = true\n                                        SKU = childItem.sku\n                                        Log_count = barcode.packing_count\n                                        product_name = childItem.name\n                                        qty_remain = childItem.qty_remaining\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                              if (unscanned_items.length > 0) {\n                                if (serialScanAccess) {\n                                  if (type === \"item_present\") {\n                                    this.responseAction(\"scan_success\")\n                                  } else {\n                                    if (remain_qty >= parseInt(barcode.packing_count)) {\n                                      this.responseAction(\"scan_success\")\n                                    } else {\n                                      this.alertBox(`The multi-pack barcode scanned exceeds the quantity remaining`)\n                                    }\n                                  }\n                                }\n                              } else {\n                                order_complete_flag = true\n                                // this.responseAction(\"order_complete\")\n                              }\n                              if ((this.state.blockItemToScan && this.state.blockItemToScan.name !== childItem.name) || childItem.qty_remaining === 0) {\n                                confirmProductConfirmation = false\n                              }\n                              itemFound = true\n                            }\n                          }\n                        })\n                      }\n                    })\n                    :\n                    (\n                      item && item.product_type === \"depends\"\n                        ?\n                        item && item.barcodes.map((barcode, barcodeIndex) => {\n                          let Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode\n                          let mainItem = false\n                          unscanned_items.map((un) => {\n                            un.barcodes.map((bar) => {\n                              if (bar.barcode === bar_code) {\n                                mainItem = true\n                              }\n                            })\n                          })\n                          if (Barcode === bar_code && scanpush === false) {\n                            let serialScanAccess = false\n                            if (enableSerial || item.record_serial === false && item.second_record_serial === false) {\n                              serialScanAccess = true\n                            } else {\n                              if ((item.record_serial) || (item.second_record_serial)) {\n                                let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\n                                rejectLocalLog = false\n                                this.setState({ serialRecordPopUpShow: true, type: eventType })\n                              }\n                            }\n                            if (confirmProductConfirmation === false) {\n                              if (general_settings.conf_code_product_instruction === \"always\") {\n                                this.setState({ productConfirmationCheck: true, blockItemToScan: item, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\n                                skipError = true\n                                blockScan = true\n                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                                if (item.confirmation === true) {\n                                  this.setState({ productConfirmationCheck: true, blockItemToScan: item, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\n                                  skipError = true\n                                  blockScan = true\n                                }\n                              }\n                            }\n                            if (blockScan === false || confirmProductConfirmation === true) {\n                              if (serialScanAccess) {\n                                if (scanned_items.length > 0) {\n                                  scanned_items.map((scan, scanIndex) => {\n                                    scan.barcodes.map((scancode, scancodeIndex) => {\n                                      let Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode\n                                      if (type === \"item_present\" ? item.qty_remaining >= 1 : item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                        if (Scancode === Barcode && Barcode === bar_code && item.order_item_id === scan.order_item_id) {\n                                          if (scan.qty_remaining === 1 && scanpush === false) {\n                                            if (type === \"item_present\") {\n                                              item.qty_remaining = item.qty_remaining - 1\n                                              item.scanned_qty = item.scanned_qty + 1\n                                              scan.qty_remaining = item.qty_remaining\n                                              scan.scanned_qty = item.scanned_qty\n                                            } else {\n                                              item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                              item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                              scan.qty_remaining = item.qty_remaining\n                                              scan.scanned_qty = item.scanned_qty\n                                            }\n                                            unscanned_items.splice(scanAccess, 1)\n                                            scanned_items.splice(scanIndex, 1)\n                                            scanned_items.splice(0, 0, scan)\n                                            this.setState({ typeScanState: item.sku })\n                                            scanpush = true\n                                            SKU = item.sku\n                                            Log_count = barcode.packing_count\n                                            product_name = item.name\n                                            qty_remain = item.qty_remaining\n                                          } else {\n                                            if (scan.qty_remaining > 0 && scanpush === false) {\n                                              if (type === \"item_present\") {\n                                                item.scanned_qty = item.scanned_qty + 1\n                                                item.qty_remaining = item.qty_remaining - 1\n                                                scan.qty_remaining = item.qty_remaining\n                                                scan.scanned_qty = item.scanned_qty\n                                              } else {\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                                scan.qty_remaining = item.qty_remaining\n                                                scan.scanned_qty = item.scanned_qty\n                                              }\n                                              scanned_items.splice(scanIndex, 1)\n                                              scanned_items.splice(0, 0, scan)\n                                              this.setState({ typeScanState: item.sku })\n                                              scanpush = true\n                                              SKU = item.sku\n                                              Log_count = barcode.packing_count\n                                              product_name = item.name\n                                              qty_remain = item.qty_remaining\n                                            }\n                                            if (item.qty_remaining === 0) {\n                                              unscanned_items.splice(scanAccess, 1)\n                                            }\n                                          }\n                                        } else {\n                                          if (scancode !== bar_code && item.scanned_qty === 0) {\n                                            if (item.qty_remaining === 1 && scanpush === false) {\n                                              if (type === \"item_present\") {\n                                                item.qty_remaining = item.qty_remaining - 1\n                                                item.scanned_qty = item.scanned_qty + 1\n                                                scan.qty_remaining = item.qty_remaining\n                                                scan.scanned_qty = item.scanned_qty\n                                              } else {\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                                scan.qty_remaining = item.qty_remaining\n                                                scan.scanned_qty = item.scanned_qty\n                                              }\n                                              // scanned_items.push(item)\n                                              scanned_items.splice(0, 0, item)\n                                              unscanned_items.splice(scanAccess, 1)\n                                              this.setState({ typeScanState: item.sku })\n                                              scanpush = true\n                                              SKU = item.sku\n                                              Log_count = barcode.packing_count\n                                              product_name = item.name\n                                              qty_remain = item.qty_remaining\n                                            } else {\n                                              if (scanpush === false) {\n                                                if (type === \"item_present\") {\n                                                  item.qty_remaining = item.qty_remaining - 1\n                                                  item.scanned_qty = item.scanned_qty + 1\n                                                  scan.qty_remaining = item.qty_remaining\n                                                  scan.scanned_qty = item.scanned_qty\n                                                } else {\n                                                  item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                                  item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                                  scan.qty_remaining = item.qty_remaining\n                                                  scan.scanned_qty = item.scanned_qty\n                                                }\n                                                // scanned_items.push(item)\n                                                scanned_items.splice(0, 0, item)\n                                                this.setState({ typeScanState: item.sku })\n                                                scanpush = true\n                                                SKU = item.sku\n                                                Log_count = barcode.packing_count\n                                                product_name = item.name\n                                                qty_remain = item.qty_remaining\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    })\n                                  })\n                                } else {\n                                  if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                    if (item.qty_remaining === 1 && scanpush === false) {\n                                      if (type === \"item_present\") {\n                                        item.qty_remaining = item.qty_remaining - 1\n                                        item.scanned_qty = item.scanned_qty + 1\n                                      } else {\n                                        item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                        item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                      }\n                                      // scanned_items.push(item)\n                                      scanned_items.splice(0, 0, item)\n                                      unscanned_items.splice(scanAccess, 1)\n                                      this.setState({ typeScanState: item.sku })\n                                      scanpush = true\n                                      SKU = item.sku\n                                      Log_count = barcode.packing_count\n                                      product_name = item.name\n                                      qty_remain = item.qty_remaining\n                                    } else {\n                                      if (scanpush === false) {\n                                        if (type === \"item_present\") {\n                                          item.qty_remaining = item.qty_remaining - 1\n                                          item.scanned_qty = item.scanned_qty + 1\n                                        } else {\n                                          item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                          item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                        }\n                                        // scanned_items.push(item)\n                                        scanned_items.splice(0, 0, item)\n                                        this.setState({ typeScanState: item.sku })\n                                        scanpush = true\n                                        SKU = item.sku\n                                        Log_count = barcode.packing_count\n                                        product_name = item.name\n                                        qty_remain = item.qty_remaining\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                              if (unscanned_items.length > 0) {\n                                if (serialScanAccess) {\n                                  if (type === \"item_present\") {\n                                    this.responseAction(\"scan_success\")\n                                  } else {\n                                    if (remain_qty >= parseInt(barcode.packing_count)) {\n                                      this.responseAction(\"scan_success\")\n                                    } else {\n                                      this.alertBox(`The multi-pack barcode scanned exceeds the quantity remaining`)\n                                    }\n                                  }\n                                }\n\n                              } else {\n                                order_complete_flag = true\n                                // this.responseAction(\"order_complete\")\n                              }\n                              itemFound = true\n                              if ((this.state.blockItemToScan && this.state.blockItemToScan.name !== item.name) || item.qty_remaining === 0) {\n                                confirmProductConfirmation = false\n                              }\n                            }\n                          } else {\n                            if (item.product_type === \"depends\" && mainItem === false) {\n                              item && item.child_items.map((childItem, childItemIndex) => {\n                                childItem.barcodes.map((childItemBarcode, childItemBarcodeIndex) => {\n                                  let Barcode = lowercase === true ? childItemBarcode.barcode.toLowerCase() : childItemBarcode.barcode\n                                  // let serialScanAccess = false\n                                  if (Barcode === bar_code && scanpush === false && item.qty_remaining > 0) {\n                                    let serialScanAccess = false\n                                    if (enableSerial || childItem.record_serial === false && childItem.second_record_serial === false) {\n                                      serialScanAccess = true\n                                    } else {\n                                      if ((childItem.record_serial) || (childItem.second_record_serial)) {\n                                        let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\n                                        rejectLocalLog = false\n                                        this.setState({ serialRecordPopUpShow: true, type: eventType })\n                                      }\n                                    }\n                                    if (serialScanAccess) {\n                                      let tempItem = Object.assign({}, item);\n                                      let tempItem1 = Object.assign({}, item);\n                                      let tempItemChildArr = []\n                                      let tempItem1ChildArr = []\n                                      let arr = []\n                                      tempItem.qty_remaining = 1\n                                      tempItem.product_type = \"individual\"\n                                      let kitDivide = tempItem1.qty_remaining\n                                      tempItem.child_items.map((child) => {\n                                        let newCopy = Object.assign({}, child)\n                                        newCopy.qty_remaining = newCopy.qty_remaining / kitDivide\n                                        tempItemChildArr.push(newCopy)\n                                      })\n                                      tempItem.child_items = tempItemChildArr\n                                      tempItem1.qty_remaining = tempItem1.qty_remaining - 1\n                                      tempItem1.child_items.map((childTemp) => {\n                                        let newCopy = Object.assign({}, childTemp)\n                                        let sub = newCopy.qty_remaining / kitDivide\n                                        let final = newCopy.qty_remaining - sub\n                                        newCopy.qty_remaining = final\n                                        tempItem1ChildArr.push(newCopy)\n                                        tempItem1.child_items = tempItem1ChildArr\n                                        arr.push(tempItem, tempItem1)\n                                      })\n                                      // unscanned_items[index] = arr[0]\n                                      // if(arr[1].qty_remaining > 1){\n                                      unscanned_items.splice(index, 1, arr[0], arr[1])\n                                      // }\n                                    }\n                                    unscanned_items.map((updateProduct, updateProductIndex) => {\n                                      updateProduct && updateProduct.child_items && updateProduct.child_items.map((updateChildItem, updatedChildItemIndex) => {\n                                        updateChildItem.barcodes.map((barcode) => {\n                                          let Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode\n                                          if (Barcode === bar_code && scanpush === false) {\n                                            let serialScanAccess = false\n                                            if (enableSerial || updateChildItem.record_serial === false && updateChildItem.second_record_serial === false) {\n                                              serialScanAccess = true\n                                            } else {\n                                              if ((updateChildItem.record_serial) || (updateChildItem.second_record_serial)) {\n                                                let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\n                                                rejectLocalLog = false\n                                                this.setState({ serialRecordPopUpShow: true, type: eventType })\n                                              }\n                                            }\n                                            if (confirmProductConfirmation === false) {\n                                              if (general_settings.conf_code_product_instruction === \"always\") {\n                                                this.setState({ productConfirmationCheck: true, blockItemToScan: childItem, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\n                                                skipError = true\n                                                blockScan = true\n                                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                                                if (childItem.confirmation === true) {\n                                                  this.setState({ productConfirmationCheck: true, blockItemToScan: childItem, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\n                                                  skipError = true\n                                                  blockScan = true\n                                                }\n                                              }\n                                            }\n                                            if (blockScan === false || confirmProductConfirmation === true) {\n                                              if (serialScanAccess) {\n                                                if (scanned_items.length > 0) {\n                                                  scanned_items.map((scan, scanIndex) => {\n                                                    scan.barcodes.map((scancode) => {\n                                                      let Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode\n                                                      if (type === \"item_present\" ? updateChildItem.qty_remaining >= 1 : updateChildItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                                        if (Scancode === Barcode && Scancode === bar_code && scan.order_item_id === item.order_item_id) {\n                                                          if (scan.qty_remaining === 1 && scanpush === false) {\n                                                            if (type === \"item_present\") {\n                                                              updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\n                                                              updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\n                                                              //scan.scanned_qty = updateChildItem.scanned_qty\n                                                              //scan.qty_remaining = updateChildItem.qty_remaining\n                                                            } else {\n                                                              updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\n                                                              updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\n                                                              //scan.scanned_qty = updateChildItem.scanned_qty\n                                                              //scan.qty_remaining = updateChildItem.qty_remaining\n                                                            }\n                                                            updateProduct.child_items.splice(updatedChildItemIndex, 1)\n                                                            scanned_items.splice(scanIndex, 1)\n                                                            scanned_items.splice(0, 0, scan)\n                                                            this.setState({ typeScanState: updateChildItem.sku })\n                                                            scanpush = true\n                                                            SKU = updateChildItem.sku\n                                                            Log_count = barcode.packing_count\n                                                            product_name = updateChildItem.name\n                                                            qty_remain = updateChildItem.qty_remaining\n                                                          } else {\n                                                            if (scan.qty_remaining > 0 && scanpush === false) {\n                                                              if (type === \"item_present\") {\n                                                                updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\n                                                                updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\n                                                                //scan.scanned_qty = updateChildItem.scanned_qty\n                                                                //scan.qty_remaining = updateChildItem.qty_remaining\n                                                                updateChildItem.qty_remaining === 0 && updateProduct.child_items.splice(index, 1)\n                                                              } else {\n                                                                updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\n                                                                updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\n                                                                //scan.scanned_qty = updateChildItem.scanned_qty\n                                                                //scan.qty_remaining = updateChildItem.qty_remaining\n                                                                updateChildItem.qty_remaining === 0 && updateProduct.child_items.splice(index, 1)\n                                                              }\n                                                              scanned_items.splice(scanIndex, 1)\n                                                              scanned_items.splice(0, 0, scan)\n                                                              this.setState({ typeScanState: updateChildItem.sku })\n                                                              scanpush = true\n                                                              SKU = updateChildItem.sku\n                                                              Log_count = barcode.packing_count\n                                                              product_name = updateChildItem.name\n                                                              qty_remain = updateChildItem.qty_remaining\n                                                            }\n                                                            if (updateChildItem.qty_remaining === 0) {\n                                                              item.child_items.splice(scanAccess, 1)\n                                                              item.child_items.length === 0 && unscanned_items.splice(index, 1)\n                                                            }\n                                                          }\n                                                        } else {\n                                                          if (Barcode === bar_code && updateChildItem.qty_remaining >= 1) {\n                                                            if (updateChildItem.qty_remaining === 1 && scanpush === false) {\n                                                              if (type === \"item_present\") {\n                                                                updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\n                                                                updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\n                                                              } else {\n                                                                updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\n                                                                updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\n                                                              }\n                                                              //scanned_items.push(updateChildItem)\n                                                              scanned_items.splice(0, 0, updateChildItem)\n                                                              updateProduct.child_items.splice(updatedChildItemIndex, 1)\n                                                              //scanned_items.splice(scanIndex , 1)\n                                                              //scanned_items.splice(0, 0, scan)\n                                                              this.setState({ typeScanState: updateChildItem.sku })\n                                                              scanpush = true\n                                                              SKU = updateChildItem.sku\n                                                              Log_count = barcode.packing_count\n                                                              product_name = updateChildItem.name\n                                                              qty_remain = updateChildItem.qty_remaining\n                                                            } else {\n                                                              if (scanpush === false) {\n                                                                if (type === \"item_present\") {\n                                                                  updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\n                                                                  updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\n                                                                  //scan.scanned_qty = updateChildItem.scanned_qty\n                                                                  //scan.qty_remaining = updateChildItem.qty_remaining\n                                                                } else {\n                                                                  updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\n                                                                  updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\n                                                                  //scan.scanned_qty = updateChildItem.scanned_qty\n                                                                  //scan.qty_remaining = updateChildItem.qty_remaining\n                                                                }\n                                                                //scanned_items.push(updateChildItem)\n                                                                scanned_items.splice(0, 0, updateChildItem)\n                                                                //scanned_items.splice(scanIndex , 1)\n                                                                //scanned_items.splice(0, 0, scan)\n                                                                this.setState({ typeScanState: updateChildItem.sku })\n                                                                scanpush = true\n                                                                SKU = updateChildItem.sku\n                                                                Log_count = barcode.packing_count\n                                                                product_name = updateChildItem.name\n                                                                qty_remain = updateChildItem.qty_remaining\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    })\n                                                  })\n                                                } else {\n                                                  if (Barcode === bar_code && updateChildItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                                    if (updateChildItem.qty_remaining === 1 && scanpush === false) {\n                                                      if (type === \"item_present\") {\n                                                        updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\n                                                        updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\n                                                      } else {\n                                                        updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\n                                                        updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\n                                                      }\n                                                      //scanned_items.push(updateChildItem)\n                                                      scanned_items.splice(0, 0, updateChildItem)\n                                                      updateProduct.child_items.splice(updatedChildItemIndex, 1)\n                                                      // item.child_items.splice(scanAccess , 1 )\n                                                      // item.child_items.length === 0 && unscanned_items.splice(scanAccess , 1)\n                                                      this.setState({ typeScanState: updateChildItem.sku })\n                                                      scanpush = true\n                                                      SKU = updateChildItem.sku\n                                                      Log_count = barcode.packing_count\n                                                      product_name = updateChildItem.name\n                                                      qty_remain = updateChildItem.qty_remaining\n                                                    } else {\n                                                      if (scanpush === false) {\n                                                        if (type === \"item_present\") {\n                                                          updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\n                                                          updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\n                                                        } else {\n                                                          updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\n                                                          updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\n                                                        }\n                                                        //scanned_items.push(updateChildItem)\n                                                        scanned_items.splice(0, 0, updateChildItem)\n                                                        this.setState({ typeScanState: updateChildItem.sku })\n                                                        scanpush = true\n                                                        SKU = updateChildItem.sku\n                                                        Log_count = barcode.packing_count\n                                                        product_name = updateChildItem.name\n                                                        qty_remain = updateChildItem.qty_remaining\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                              if (unscanned_items.length > 0) {\n                                                if (serialScanAccess) {\n                                                  if (type === \"item_present\") {\n                                                    this.responseAction(\"scan_success\")\n                                                  } else {\n                                                    if (remain_qty >= parseInt(barcode.packing_count)) {\n                                                      this.responseAction(\"scan_success\")\n                                                    } else {\n                                                      this.alertBox(`The multi-pack barcode scanned exceeds the quantity remaining`)\n                                                    }\n                                                  }\n                                                }\n                                              } else {\n                                                order_complete_flag = true\n                                                // this.responseAction(\"order_complete\")\n                                              }\n                                              itemFound = true\n                                              if ((this.state.blockItemToScan && this.state.blockItemToScan.name !== updateChildItem.name) || updateChildItem.qty_remaining === 0) {\n                                                confirmProductConfirmation = false\n                                              }\n                                            }\n                                          }\n                                        })\n                                      })\n                                    })\n                                  }\n                                })\n                              })\n                              item.qty_remaining === 0 && unscanned_items.splice(index, 1)\n                            }\n                          }\n                        })\n                        :\n                        item && item.barcodes.map((barcode) => {\n                          let Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode\n                          if (Barcode === bar_code && scanpush === false) {\n                            let serialScanAccess = false\n                            if (enableSerial || item.record_serial === false && item.second_record_serial === false) {\n                              serialScanAccess = true\n                            } else {\n                              if ((item.record_serial) || (item.second_record_serial)) {\n                                let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\n                                rejectLocalLog = false\n                                this.setState({ serialRecordPopUpShow: true, type: eventType })\n                              }\n                            }\n\n                            if (confirmProductConfirmation === false) {\n                              if (general_settings.conf_code_product_instruction === \"always\") {\n                                this.setState({ productConfirmationCheck: true, blockItemToScan: item, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\n                                skipError = true\n                                blockScan = true\n                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                                if (item.confirmation === true) {\n                                  this.setState({ productConfirmationCheck: true, blockItemToScan: item, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\n                                  skipError = true\n                                  blockScan = true\n                                }\n                              }\n                            }\n\n                            if (blockScan === false || confirmProductConfirmation === true) {\n                              if (serialScanAccess) {\n                                if (scanned_items.length > 0) {\n                                  scanned_items.map((scan, scanItemIndex) => {\n                                    if (scan.order_item_id === item.order_item_id) {\n                                      scan.barcodes.map((scancode) => {\n                                        let Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode\n                                        if (type === \"item_present\" ? item.qty_remaining >= 1 : item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                          if (Scancode === Barcode && Barcode === bar_code && item.order_item_id === scan.order_item_id) {\n                                            if (scan.qty_remaining === 1 && scanpush === false) {\n                                              if (type === \"item_present\") {\n                                                item.qty_remaining = item.qty_remaining - 1\n                                                item.scanned_qty = item.scanned_qty + 1\n                                                //scan.qty_remaining = item.qty_remaining\n                                                //scan.scanned_qty = item.scanned_qty\n                                              } else {\n                                                if (item.qty_remaining > 0) {\n                                                  item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                                  item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                                  //scan.qty_remaining = item.qty_remaining\n                                                  //scan.scanned_qty = item.scanned_qty\n                                                }\n                                              }\n                                              unscanned_items.splice(scanAccess, 1)\n                                              scanned_items.splice(scanItemIndex, 1)\n                                              scanned_items.splice(0, 0, scan)\n                                              this.setState({ typeScanState: item.sku })\n                                              scanpush = true\n                                              SKU = item.sku\n                                              Log_count = barcode.packing_count\n                                              product_name = item.name\n                                              qty_remain = item.qty_remaining\n                                            } else {\n                                              if (scan.qty_remaining > 1 && scanpush === false) {\n                                                if (type === \"item_present\" && item.qty_remaining > 0) {\n                                                  item.qty_remaining = item.qty_remaining - 1\n                                                  item.scanned_qty = item.scanned_qty + 1\n                                                  //scan.qty_remaining = item.qty_remaining\n                                                  //scan.scanned_qty = item.scanned_qty\n                                                } else {\n                                                  if (item.qty_remaining > 0) {\n                                                    item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                                    item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                                    //scan.qty_remaining = item.qty_remaining\n                                                    //scan.scanned_qty = item.scanned_qty\n                                                  }\n                                                }\n                                                scanned_items.splice(scanItemIndex, 1)\n                                                scanned_items.splice(0, 0, scan)\n                                                this.setState({ typeScanState: item.sku })\n                                                scanpush = true\n                                                SKU = item.sku\n                                                Log_count = barcode.packing_count\n                                                product_name = item.name\n                                                qty_remain = item.qty_remaining\n                                              }\n                                              if (item.qty_remaining === 0) {\n                                                unscanned_items.splice(scanAccess, 1)\n                                              }\n                                            }\n                                          } else {\n                                            if (Scancode !== bar_code && item.scanned_qty === 0) {\n                                              if (item.qty_remaining === 1 && scanpush === false) {\n                                                if (type === \"item_present\") {\n                                                  item.qty_remaining = item.qty_remaining - 1\n                                                  item.scanned_qty = item.scanned_qty + 1\n                                                } else {\n                                                  if (item.qty_remaining > 0) {\n                                                    item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                                    item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                                  }\n                                                }\n                                                // scanned_items.push(item)\n                                                scanned_items.splice(0, 0, item)\n                                                unscanned_items.splice(scanAccess, 1)\n                                                this.setState({ typeScanState: item.sku })\n                                                scanpush = true\n                                                SKU = item.sku\n                                                Log_count = barcode.packing_count\n                                                product_name = item.name\n                                                qty_remain = item.qty_remaining\n                                              } else {\n                                                if (scanpush === false && item.qty_remaining > 0) {\n                                                  if (type === \"item_present\") {\n                                                    item.qty_remaining = item.qty_remaining - 1\n                                                    item.scanned_qty = item.scanned_qty + 1\n                                                  } else {\n                                                    if (item.qty_remaining > 0) {\n                                                      item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                                      item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                                    }\n                                                  }\n                                                  // scanned_items.push(item)\n                                                  scanned_items.splice(0, 0, item)\n                                                  this.setState({ typeScanState: item.sku })\n                                                  scanpush = true\n                                                  SKU = item.sku\n                                                  Log_count = barcode.packing_count\n                                                  product_name = item.name\n                                                  qty_remain = item.qty_remaining\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      })\n                                    } else {\n                                      //share barcode start when barcode is same//\n                                      if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                        if (item.qty_remaining === 1 && scanpush === false) {\n                                          if (type === \"item_present\") {\n                                            item.qty_remaining = item.qty_remaining - 1\n                                            item.scanned_qty = item.scanned_qty + 1\n                                          } else {\n                                            if (item.qty_remaining > 0) {\n                                              item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                              item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                            }\n                                          }\n                                          // scanned_items.push(item)\n                                          scanned_items.splice(0, 0, item)\n                                          unscanned_items.splice(scanAccess, 1)\n                                          this.setState({ typeScanState: item.sku })\n                                          scanpush = true\n                                          SKU = item.sku\n                                          Log_count = barcode.packing_count\n                                          product_name = item.name\n                                          qty_remain = item.qty_remaining\n                                        } else {\n                                          if (scanpush === false && item.qty_remaining > 0) {\n                                            if (type === \"item_present\") {\n                                              item.qty_remaining = item.qty_remaining - 1\n                                              item.scanned_qty = item.scanned_qty + 1\n                                            } else {\n                                              if (item.qty_remaining > 0) {\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                              }\n                                            }\n                                            // scanned_items.push(item)\n                                            scanned_items.splice(0, 0, item)\n                                            this.setState({ typeScanState: item.sku })\n                                            scanpush = true\n                                            SKU = item.sku\n                                            Log_count = barcode.packing_count\n                                            product_name = item.name\n                                            qty_remain = item.qty_remaining\n                                          }\n                                        }\n                                      }\n                                      //share barcode end when barcode is same//\n                                    }\n                                  })\n                                } else {\n                                  if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                    if (item.qty_remaining === 1 && scanpush === false) {\n                                      if (type === \"item_present\") {\n                                        item.qty_remaining = item.qty_remaining - 1\n                                        item.scanned_qty = item.scanned_qty + 1\n                                      } else {\n                                        if (item.qty_remaining > 0) {\n                                          item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                          item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                        }\n                                      }\n                                      // scanned_items.push(item)\n                                      scanned_items.splice(0, 0, item)\n                                      unscanned_items.splice(scanAccess, 1)\n                                      this.setState({ typeScanState: item.sku })\n                                      scanpush = true\n                                      SKU = item.sku\n                                      Log_count = barcode.packing_count\n                                      product_name = item.name\n                                      qty_remain = item.qty_remaining\n                                    } else {\n                                      if (scanpush === false && item.qty_remaining > 0) {\n                                        if (type === \"item_present\") {\n                                          item.qty_remaining = item.qty_remaining - 1\n                                          item.scanned_qty = item.scanned_qty + 1\n                                        } else {\n                                          if (item.qty_remaining > 0) {\n                                            item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\n                                            item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\n                                          }\n                                        }\n                                        // scanned_items.push(item)\n                                        scanned_items.splice(0, 0, item)\n                                        this.setState({ typeScanState: item.sku })\n                                        scanpush = true\n                                        SKU = item.sku\n                                        Log_count = barcode.packing_count\n                                        product_name = item.name\n                                        qty_remain = item.qty_remaining\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                              if (unscanned_items.length > 0) {\n                                if (serialScanAccess) {\n                                  if (type === \"item_present\") {\n                                    this.responseAction(\"scan_success\")\n                                  } else {\n                                    if (remain_qty >= parseInt(barcode.packing_count)) {\n                                      this.responseAction(\"scan_success\")\n                                    } else {\n                                      this.alertBox(`The multi-pack barcode scanned exceeds the quantity remaining`)\n                                    }\n                                  }\n                                }\n                              } else {\n                                order_complete_flag = true\n                                // this.responseAction(\"order_complete\")\n                              }\n                              if ((this.state.blockItemToScan && this.state.blockItemToScan.name !== item.name) || item.qty_remaining === 0) {\n                                confirmProductConfirmation = false\n                              }\n                              itemFound = true\n                            }\n                          }\n                        })\n                    )\n                }\n              }\n              return item\n            })\n            if (skipError === false) {\n              itemFound === false ? this.responseAction(\"scan_fail\") : \"\"\n            }\n          }\n        } else {\n          order_complete_flag = true\n          // this.responseAction(\"order_complete\")\n        }\n        order.order.unscanned_items.map((noCode, index) => {\n          if (noCode.barcodes && noCode.barcodes.length === 1 && noCode.barcodes[0].barcode === \"noBarcode\") {\n            noCode.barcodes = []\n          }\n        })\n        if (this.state.serialRecordInput !== \"\") {\n          temp_order = updateSerialLog\n        } else {\n          temp_order[\"input\"] = event_code;\n          temp_order[\"id\"] = order_num;\n          temp_order[\"order_item_id\"] = unscanned_items.length > 0 ? unscanned_items[0].order_item_id : (scanned_items.length > 0 ? scanned_items[0].order_item_id : \"\")\n          temp_order[\"time\"] = new Date()\n          temp_order[\"rem_qty\"] = remain_qty\n          temp_order[\"qty_rem\"] = qty_remain\n          temp_order[\"SKU\"] = SKU ? SKU : unscanned_items.length > 0 && unscanned_items[0].sku\n          temp_order[\"Log_count\"] = Log_count\n          temp_order[\"product_name\"] = product_name\n          temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\n          temp_order[\"actionBarcode\"] = ActionBarcode\n          if (type !== \"item_present\") {\n            temp_order[\"state\"] = 'scanpack.rfp.default'\n          }\n          temp_order[\"increment_id\"] = order.order.increment_id\n          temp_order[\"event\"] = this.state.bar_code ? \"regular\" : \"click_scan\"\n          temp_order[\"updated_at\"] = order.order.updated_at\n          event_scanned === true ? temp_order[\"event\"] = \"regular\" : temp_order[\"event\"]\n        }\n        // event_scanned === true ? temp_order[\"event\"] = \"scanned\" : temp_order[\"event\"]\n        if (stop_add_log !== true && temp_order !== undefined) {\n          if (order_complete_flag) {\n            this.updateLog(temp_order, \"order_complete\")\n          } else {\n            this.updateLog(temp_order, Action_Type)\n          }\n          if (this.state.serialRecordInput === \"\" && rejectLocalLog) {\n            // localLogs.push(temp_order)\n            localLogs.splice(0, 0, temp_order)\n          }\n        }\n        this.setState({ scanned_items: scanned_items, serialRecordInput: \"\" })\n        blockScan = false\n      } else {\n        if (event.keyCode === 13 && bar_code === \"\") {\n          this.responseAction(\"not_ready\")\n        }\n      }\n    }\n    try {\n      // this.barcode.current.focus();\n    } catch (error) {\n    }\n    enableSerial = false\n  }\n  /*SCAN BARCODE METHOD END*/\n\n  /*METHOD TO UPDATE EVERY EVNET LOG START*/\n  updateLog = async (logData, type) => {\n    let temp = []\n    let getItem = await AsyncStorage.getItem(\"logsArray\")\n    let logging = await AsyncStorage.getItem(\"Logging\")\n    let LoggingArray = JSON.parse(logging)\n    if (LoggingArray && LoggingArray.length >= 80) {\n      var indexToRemove = 0;\n      var numberToRemove = 1;\n      LoggingArray.splice(indexToRemove, numberToRemove);\n    }\n    LoggingArray && LoggingArray.length > 0 ? LoggingArray.push(logData) : LoggingArray = [logData]\n    let getTemp = getItem !== \"undefined\" && JSON.parse(getItem)\n    // console.log(JSON.parse(getItem))\n    let arr = getTemp ? temp.concat(getTemp) : temp\n    arr.push(logData)\n    console.log(arr)\n    await AsyncStorage.setItem(\"logsArray\", JSON.stringify(arr))\n    if (logData && logData.event === \"scanned\") {\n      this.multipleTime()\n    }\n    if (type === \"issue\") {\n      this.multipleTime()\n      this.nav(this.state.order)\n    }\n    if (type === \"RESTART\") {\n      this.multipleTime()\n      this.nav(this.state.order)\n    }\n    if (type === \"order_complete\") {\n      if (this.state.scan_pack_settings.post_scanning_option === \"None\") {\n        this.responseAction(\"complete_order\")\n      }\n    }\n    if (type === \"recordTracking\") {\n      this.responseAction(\"complete_order\")\n      this.setState({ trackingOrderInput: \"\" })\n    }\n    await AsyncStorage.setItem(\"Logging\", JSON.stringify(LoggingArray))\n    // if(type === \"tracking\"){\n    //   // this.multipleTime()\n    //   // this.nav(this.state.order)\n    //   this.responseAction(\"complete_order\")\n    //   this.setState({trackingOrderInput: \"\"})\n    // }\n    // this.setState({bar_code: \"\"})\n  }\n  /*METHOD TO UPDATE EVERY EVNET LOG END*/\n\n  close = (type) => {\n    if (this.state.order) {\n      let scan_pack_settings = this.state.scan_pack_settings\n      if (type === \"show_customer_notes\") {\n        scan_pack_settings['show_customer_notes'] = false\n      }\n      if (type === \"show_internal_notes\") {\n        scan_pack_settings['show_internal_notes'] = false\n      }\n      if (type === \"notes_toPacker\") {\n        this.setState({ notes_toPacker_enable: false })\n      }\n      this.setState({ scan_pack_settings })\n    }\n    // try {\n    //   this.barcode.current.focus()\n    // } catch (error) {\n    // }\n  }\n\n  leaveComponent = async (order, type) => {\n    if (type === \"submitLog\") {\n      this.multipleTime()\n    }\n  }\n\n  componentWillUnmount() {\n    let Order = this.state.order\n    searchOrderCheck = false;\n    ScanPackSettingsAccess = false;\n    GeneralSettingAccess = false;\n    orderSaveSuccess = false;\n    updateLogSuccess = true;\n    if (Order) {\n      this.leaveComponent(Order)\n    }\n  }\n\n  hideShipment = () => {\n    this.setState({ showshipments: false })\n  }\n\n  callShipmentOrder = (order) => {\n    let shipmentOrder = this.state.shipmentOrder\n    if (order.increment_id !== \"\") {\n      callOrderSuccess = true\n      shipmentOrder.input = order.increment_id\n      this.hitApi(shipmentOrder)\n    }\n  }\n\n  //according to the plateform call the function\n  hitApi = (shipmentOrder) => {\n    if (Platform.OS === \"ios\" || Platform.OS === \"android\") {\n      this.InternetCheck(shipmentOrder)\n    } else {\n      this.props.SearchScanpackOrder(shipmentOrder)\n    }\n  }\n\n  /*Check the connection for the ios and android start*/\n  InternetCheck = async (shipmentOrder) => {\n    const connectionInfo = await NetInfo.fetch();\n    if (connectionInfo.isConnected) {\n      this.props.SearchScanpackOrder(shipmentOrder)\n    } else {\n      this.setState({ errorMessageShow: true })\n    }\n  }\n  /*Check the connection for the ios and android end*/\n\n  enableToggle(e) {\n    if (this.props.route && this.props.route.params) {\n      if (e === 1) {\n        this.props.route.params.item(true)\n      } else {\n        this.props.route.params.item(false)\n      }\n    }\n  }\n\n  serialLogUpdate(type, item, recordFrom, order_id, both) {\n    let temp = {}\n    let localLog = {}\n    let localLogs = this.state.localLogs\n    temp[\"clicked\"] = type === \"clickscan\" ? true : false\n    temp[\"barcode\"] = item.barcodes[0].barcode\n    temp[\"order_id\"] = order_id\n    temp[\"order_item_id\"] = item.order_item_id\n    temp[\"product_lot_id\"] = null\n    temp[\"ask\"] = recordFrom === \"recordOne\" ? true : false\n    temp[\"ask_2\"] = recordFrom === \"recordTwo\" ? true : false\n    temp[\"product_id\"] = item.product_id\n    if (both === false) {\n      temp[\"is_scan\"] = true\n      temp[\"second_serial\"] = false\n    } else {\n      if (recordFrom === \"recordOne\") {\n        temp[\"is_scan\"] = false\n        temp[\"second_serial\"] = false\n      } else {\n        temp[\"is_scan\"] = true\n        temp[\"second_serial\"] = true\n      }\n    }\n    temp[\"box_id\"] = null\n    temp[\"serial\"] = this.state.serialRecordInput\n    temp[\"event\"] = \"serial_scan\"\n    updateSerialLog = temp\n    localLog[\"order_item_id\"] = item && item.order_item_id\n    localLog[\"time\"] = new Date()\n    localLog[\"event\"] = \"serial_scan\"\n    localLog[\"SKU\"] = item.sku ? item.sku : \"\"\n    localLog[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\n    if (both) {\n      if (recordFrom === \"recordTwo\") {\n        // localLogs.push(localLog)\n        localLogs.splice(0, 0, localLog)\n      }\n    } else {\n      // localLogs.push(localLog)\n      localLogs.splice(0, 0, localLog)\n    }\n    this.updateSerialLog(temp)\n  }\n\n  updateSerialLog = async (logData) => {\n    let temp = []\n    let getItem = await AsyncStorage.getItem(\"logsArray\")\n    let getTemp = getItem !== \"undefined\" && JSON.parse(getItem)\n    let arr = getTemp ? temp.concat(getTemp) : temp\n    arr.push(logData)\n    // console.log(arr)\n    await AsyncStorage.setItem(\"logsArray\", JSON.stringify(arr))\n    // if(logData.event === \"scanned\"){\n    //   this.multipleTime()\n    // }\n    // if(type === \"issue\"){\n    //   this.multipleTime()\n    //   this.nav(this.state.order)\n    // }\n    // if(type === \"tracking\"){\n    //   // this.multipleTime()\n    //   // this.nav(this.state.order)\n    //   this.responseAction(\"complete_order\")\n    //   this.setState({trackingOrderInput: \"\"})\n    // }\n  }\n\n  serialRecordFun() {\n    let Order = this.state.order && this.state.order.order\n    let scanPackSetting = this.state.scan_pack_settings\n    let input = this.state.serialRecordInput\n    let inputLength = input.length\n    let match = false\n    if (scanPackSetting.require_serial_lot) {\n      if (scanPackSetting.valid_prefixes) {\n        let prefix = scanPackSetting.valid_prefixes.split(',')\n        let prefixLength\n        let userInput\n        let access = false\n        prefix && prefix.length > 0 && prefix.map((serial) => {\n          prefixLength = serial.length\n          userInput = input.slice(0, prefixLength)\n          if (userInput === serial) {\n            access = true\n          }\n        })\n        if (access) {\n          match = true\n          enableSerial = true\n        } else {\n          this.responseAction(\"scan_fail\", \"serialRecord\")\n          this.alertBox(\"The Value Scanned does not appear to be a Valid serial or lot number. Please check the 'Require Serial/Lot Prefix' setting in your scan and pack options.\")\n          this.setState({ type: this.state.type, serialRecordInput: \"\", serialRecordOne: \"\", serialRecordTwo: \"\" })\n          match = false\n          enableSerial = false\n        }\n      }\n    } else {\n      match = true\n      enableSerial = true\n    }\n    let type = this.state.type\n    let item = this.state.order && this.state.order.order && this.state.order.order.unscanned_items && this.state.order.order.unscanned_items[0]\n    let order_id = this.state.order && this.state.order.order && this.state.order.order.id\n    if (match) {\n      if (item.child_items && item.child_items.length > 0 && item.child_items[0]) {\n        if (item.child_items[0].record_serial && item.child_items[0].second_record_serial) {\n          if (item.child_items[0].record_serial && this.state.serialRecordOne === \"\") {\n            this.setState({ serialRecordOne: this.state.serialRecordInput })\n            this.setState({ serialRecordInput: \"\" })\n            this.serialLogUpdate(type, item.child_items[0], \"recordOne\", order_id, true)\n          } else {\n            this.setState({ serialRecordTwo: this.state.serialRecordInput })\n            enableSerial = true\n            this.allTypeScan(type, item.child_items[0])\n            this.setState({ serialRecordPopUpShow: false, type: \"\", serialRecordInput: \"\", serialRecordOne: \"\", serialRecordTwo: \"\" })\n            this.serialLogUpdate(type, item.child_items[0], \"recordTwo\", order_id, true)\n          }\n        } else {\n          if (item.child_items[0].record_serial) {\n            this.setState({ serialRecordOne: this.state.serialRecordInput })\n            this.serialLogUpdate(type, item.child_items[0], \"recordOne\", order_id, false)\n          } else {\n            this.setState({ serialRecordTwo: this.state.serialRecordInput })\n            this.serialLogUpdate(type, item.child_items[0], \"recordTwo\", order_id, false)\n          }\n          this.allTypeScan(type, item.child_items[0])\n          this.setState({ serialRecordPopUpShow: false, type: \"\", serialRecordInput: \"\" })\n        }\n      } else {\n        if (item.record_serial && item.second_record_serial) {\n          if (this.state.serialRecordOne === \"\") {\n            this.setState({ serialRecordOne: this.state.serialRecordInput })\n            this.setState({ serialRecordInput: \"\" })\n            this.serialLogUpdate(type, item, \"recordOne\", order_id, true)\n          } else {\n            this.setState({ serialRecordTwo: this.state.serialRecordInput })\n            enableSerial = true\n            this.setState({ serialRecordPopUpShow: false, type: \"\", serialRecordInput: \"\", serialRecordOne: \"\", serialRecordTwo: \"\" })\n            this.serialLogUpdate(type, item, \"recordTwo\", order_id, true)\n            this.allTypeScan(type, item)\n          }\n        } else {\n          if (item.record_serial) {\n            this.serialLogUpdate(type, item, \"recordOne\", order_id, false)\n          } else {\n            this.serialLogUpdate(type, item, \"recordTwo\", order_id, false)\n          }\n          this.allTypeScan(type, item)\n          // enableSerial = true\n          this.setState({ serialRecordPopUpShow: false, type: \"\", serialRecordInput: \"\" })\n        }\n      }\n    }\n  }\n\n  allTypeScan = (type, item, recordSerial) => {\n    if (type === \"clickscan\") {\n      this.clickScan(item)\n    }\n    if (type === \"barcode\") {\n      this.scanBarcode()\n      this.setState({ bar_code: \"\" })\n    }\n    if (type === \"scan_all_item\") {\n      this.scanAllItem(\"scan_all_item\")\n    }\n    if (type === \"submit_type_scan\") {\n      this.submitTypeScan(\"submit_type_scan\")\n    }\n  }\n\n  handleSerialRecordInput = (e) => {\n    this.setState({ serialRecordInput: e })\n  }\n\n  /*Product Detail Nav Start*/\n  redirectToItemDetail(product) {\n    if (product && product.product_id) {\n      this.props.navigation.navigate(\"ProductDetail\", { productInfo: product.product_id, orderID: this.state.order.order.id, increment_id: this.state.order.order.increment_id })\n    }\n  }\n  /*Product Detail Nav End*/\n\n  removeFocus() {\n    // this.barcode.blur()\n    // this.barcode.current.focus()\n  }\n\n  onKeyUp(keyName, e, handle) {\n    this.setState({ focusBarcode: true })\n  }\n\n  onKeyDown(keyName, e, handle) {\n    this.setState({ focusBarcode: true })\n  }\n\n  navButton = () => {\n    this.setState({ reRenderFocus: true, unscannedItemShow: false, nextItemShow: true, scannedItemShow: false }, () => {\n      console.log(\"Update\");\n    })\n    setTimeout(function () {\n      this.setState({ reRenderFocus: false, message: \"\" });\n    }.bind(this), 1);\n  }\n\n  navButtonLeft = () => {\n    this.setState({ reRenderFocus: true, unscannedItemShow: true, nextItemShow: false, scannedItemShow: false }, () => {\n      console.log(\"Update\");\n    })\n    setTimeout(function () {\n      this.setState({ reRenderFocus: false, message: \"\" });\n    }.bind(this), 1);\n  }\n\n  showScannedList = () => {\n    this.setState({ reRenderFocus: true, unscannedList: false, scannedList: true, logList: false })\n    setTimeout(function () {\n      this.setState({ reRenderFocus: false, message: \"\" });\n    }.bind(this), 1);\n  }\n\n  showUnscannedList = () => {\n    this.setState({ reRenderFocus: true, unscannedList: true, scannedList: false, logList: false })\n    setTimeout(function () {\n      this.setState({ reRenderFocus: false, message: \"\" });\n    }.bind(this), 1);\n  }\n\n  showLogList = () => {\n    this.setState({ reRenderFocus: true, unscannedList: false, scannedList: false, logList: true })\n    setTimeout(function () {\n      this.setState({ reRenderFocus: false, message: \"\" });\n    }.bind(this), 1);\n  }\n\n  showNotesToPacker = () => {\n    this.setState({ notes_toPackerFlag: false });\n    this.currentFocus()\n  }\n\n  assignUniquebarcode = () => {\n    this.setState({ shareBarcodeShow: false, alias: false, addBarcodeWindow: false, addBarcodeText: \"\" })\n  }\n\n  proceedAliasing = () => {\n    let alias_product_data_id = this.state.updateProduct.alias_product_data.id\n    let current_product_data_id = []\n    current_product_data_id.push(this.state.updateProduct.current_product_data.id)\n    let details = {\n      product_alias_ids: current_product_data_id\n    }\n    this.props.updateProductAlias(alias_product_data_id, details)\n    updateProductInfoSuccess = true\n  }\n\n  sameBarcode = () => {\n    let newHash = {\n      value: this.state.addBarcodeText,\n      var: \"barcode\",\n      id: this.state.addBarcodeItem.product_id,\n      permit_same_barcode: true\n    }\n    this.props.updateProductList(newHash)\n    this.setState({ updateProductApiCall: new Date(), shareBarcodeShow: false, alias: false })\n    updateProductApi = true\n  }\n\n  render() {\n    const config = { velocityThreshold: 1, directionalOffsetThreshold: 80 };\n    // const config = { velocityThreshold: 1, directionalOffsetThreshold: 80, gestureIsClickThreshold : 5 };\n    const props = this.props\n    const Order = this.state.order && this.state.order.order\n    const settings = this.state.scan_pack_settings\n    const windowWidth = Dimensions.get('window').width;\n    const windowHeight = Dimensions.get('window').height;\n    return (\n      <View key=\"main\" style={{ height: \"100%\", flex: 1 }}>\n        {\n          this.state.loader\n            ?\n            <View style={{ marginTop: 100 }}>\n              <ActivityIndicator size=\"large\" color=\"#000\" />\n              <View>\n                <Text style={{ textAlign: \"center\" }}>Loading...</Text>\n              </View>\n            </View>\n            :\n            <React.Fragment>\n              {\n                Order && this.state.scan_pack_settings &&\n                <View style={[globalStyles.flex1, { height: \"100%\", position: \"relative\" }]}>\n                  {\n                    this.state.orderConfirmPopUp\n                      ?\n                      <OrderConfirmationPopUp OrderConfirmationCheckFun={() => this.OrderConfirmationCheckFun()}\n                        OrderConfirmationCheckInput={this.state.OrderConfirmationCheckInput}\n                        errorMessageOrderConfirmationCheck={this.state.errorMessageOrderConfirmationCheck}\n                        handleOrderConfirmationCheckInput={(e) => this.handleOrderConfirmationCheckInput(e)}\n                        closeAlert={this.closeAlert.bind(this)}\n                        orderDetails={this.state.order && this.state.order.order}\n                        {...this.props}\n                      />\n                      :\n\n                      <View style={{ position: \"absolute\", zIndex: 10, width: \"100%\", marginRight: \"0\", marginLeft: \"0\", marginTop: 20 }}>\n                        {\n                          Order.notes_internal !== null && Order.notes_internal.trim() !== \"\" && this.state.notes_internalFlag && settings.show_internal_notes\n                            ?\n                            <LinearGradient\n                              style={{ flexDirection: \"row\", justifyContent: \"space-between\", backgroundColor: \"#b7b7b7\", padding: 5, borderRadius: 10, marginTop: 4, width: \"80%\", marginLeft: \"auto\", marginRight: \"auto\", padding: 10, shadowColor: \"#000\", shadowOffset: { width: 0, height: 0 }, shadowOpacity: 10, shadowRadius: 10 }}\n                              locations={[0, 1]}\n                              colors={[\"#0f811a\", \"#31bd31\"]}\n                            >\n                              <Text style={{ marginLeft: 5, marginRight: 5, fontSize: 16, color: \"#fff\", fontFamily: fontFamily.font500 }}>{Order.notes_internal}</Text>\n                              <TouchableOpacity onPress={() => {\n                                this.setState({ notes_internalFlag: false });\n                                this.currentFocus()\n                              }\n                              }>\n                                <Image source={closeButton ? closeButton : \"\"}\n                                  style={{ height: 20, width: 20 }} />\n                              </TouchableOpacity>\n                            </LinearGradient>\n                            :\n                            null\n                        }\n                        {\n                          Order.customer_comments !== null && Order.customer_comments.trim() !== \"\" && this.state.customer_commentsFlag && settings.show_customer_notes\n                            ?\n                            <LinearGradient\n                              locations={[0, 1]}\n                              colors={[\"#0f811a\", \"#31bd31\"]}\n                              style={{ flexDirection: \"row\", justifyContent: \"space-between\", backgroundColor: \"#336599\", padding: 5, borderRadius: 10, width: \"80%\", marginTop: 4, marginLeft: \"auto\", marginRight: \"auto\", padding: 10, shadowColor: \"#000\", shadowOffset: { width: 0, height: 0 }, shadowOpacity: 10, shadowRadius: 10 }}>\n                              <Text style={{ marginLeft: 5, marginRight: 5, fontSize: 16, color: \"#fff\", fontFamily: fontFamily.font500 }}>{Order.customer_comments}</Text>\n                              <TouchableOpacity onPress={() => {\n                                this.setState({ customer_commentsFlag: false });\n                                this.currentFocus()\n                              }\n                              } >\n                                <Image source={closeButton ? closeButton : \"\"}\n                                  style={{ height: 20, width: 20 }} />\n                              </TouchableOpacity>\n                            </LinearGradient>\n                            :\n                            null\n                        }\n                      </View>\n\n\n                  }\n                  <ProductAlias alias={this.state.alias}\n                    Product={this.state.Product}\n                    updateProduct={this.state.updateProduct}\n                    assignUniquebarcode={() => this.assignUniquebarcode()}\n                    shareBarcodeMethod={() => { this.setState({ shareBarcodeShow: true, alias: false }) }}\n                    proceedAliasing={() => this.proceedAliasing()}\n                    shareBarcodeShow={this.state.shareBarcodeShow}\n                    sameBarcode={() => this.sameBarcode()} />\n\n                  { //Succes Image , Error Image , Order Complete Image\n                    this.state.responseShowAction &&\n                    <ResponseView orderCompleteAction={this.state.orderCompleteAction}\n                      scanSuccessAction={this.state.scanSuccessAction}\n                      // scanFailAction={this.state.scanFailAction}\n                      scanFailAction={this.state.scanFailAction}\n                      scanPackSetting={this.state.scan_pack_settings}\n                      generalSetting={this.state.general_settings}\n                    />\n                  }\n                  { //Type Scan Count Pop Up\n                    this.state.typeScanAlert &&\n                    <TypeScanAlert closeAlert={this.closeAlert.bind(this)}\n                      typeScanCount={this.state.typeScanCount}\n                      typeScanCountUpdate={(text) => this.setState({ typeScanCount: text })}\n                      submitTypeScan={this.submitTypeScan.bind(this)}\n                      // submitTypeScan={this.serialRecordCheck.bind(this , \"submit_type_scan\")}\n                      scanPackSetting={this.state.scan_pack_settings}\n                      generalSetting={this.state.general_settings}\n                    />\n                  }\n                  { // Add Note Pop Up \n                    this.state.alert &&\n                    <Alert closeAlert={this.closeAlert.bind(this)}\n                      submitAlert={this.submitAlert.bind(this)}\n                      notes_fromPacker={this.state.notes_fromPacker}\n                      noteUpdate={(text) => this.setState({ notes_fromPacker: text })}\n                      scanPackSetting={this.state.scan_pack_settings}\n                      generalSetting={this.state.general_settings}\n                    />\n                  }\n\n                  { // Add Barcode Pop Up \n                    this.state.addBarcodeWindow &&\n                    <AddBarcode closeAlert={(e) => this.closeAlert(e)}\n                      addBarcodeSubmit={(e) => this.addBarcodeSubmit(e)}\n                      addBarcodeText={this.state.addBarcodeText}\n                      addBarcodeChange={(text) => this.setState({ addBarcodeText: text })}\n                      addBarcodeWindow={this.state.addBarcodeWindow}\n                    />\n                  }\n\n                  { // Notification Pop Up for messages\n                    this.state.popUpModelShow &&\n                    <PopUpModel closeAlert={this.closeAlert.bind(this)}\n                      message={this.state.message}\n                    />\n                  }\n                  { // Serial Record Pop Up\n                    this.state.serialRecordPopUpShow &&\n                    <SerialRecord serialRecordFun={() => this.serialRecordFun()}\n                      serialRecordInput={this.state.serialRecordInput}\n                      handleSerialRecordInput={(e) => this.handleSerialRecordInput(e)}\n                      closeAlert={this.closeAlert.bind(this)}\n                      serialRecord={() => this.serialRecord}\n                      {...this.props}\n                    />\n                  }\n                  { // Click Scan Confirmation Pop Up\n                    this.state.clickScanConfirmation &&\n                    <ClickScanConfirmationPopUp clickScanConfirmFun={() => this.clickScanConfirmFun()}\n                      clickScanConfirmInput={this.state.clickScanConfirmInput}\n                      errorMessageClickScanConfirmation={this.state.errorMessageClickScanConfirmation}\n                      handleClickScanConfirmInput={(e) => this.handleClickScanConfirmInput(e)}\n                      closeAlert={this.closeAlert.bind(this)}\n                      serialFocus={myInput}\n                    />\n                  }\n\n                  {\n                    //productConfirmationCheck\n                    this.state.productConfirmationCheck &&\n                    <ProductConfirmationCheck ProductConfirmationCheckFun={() => this.ProductConfirmationCheckFun()}\n                      ProductConfirmationCheckInput={this.state.productConfirmationCheckInput}\n                      errorMessageProductConfirmationCheck={this.state.errorMessageProductConfirmationCheck}\n                      handleProductConfirmationCheckInput={(e) => this.handleProductConfirmationCheckInput(e)}\n                      closeAlert={this.closeAlert.bind(this)}\n                      instruction={this.state.blockItemToScan}\n                      {...this.props}\n                    />\n                  }\n                  {\n                    this.state.scan_pack_settings.post_scanning_option !== \"None\" && Order && Order.unscanned_items.length === 0\n                      ?\n                      <ConfirmTrackingNumber postScanningFieldLabel={this.state.postScanningFieldLabel}\n                        trackingOrderInput={this.state.trackingOrderInput}\n                        onChangeText={(text) => { this.setState({ trackingOrderInput: text }) }}\n                        onSubmitEditing={this.trackingSubmit.bind(this, this.state.trackingOrderInput)}\n                        postScanningMessageDetail={this.state.postScanningMessageDetail}\n                      />\n                      :\n                      <React.Fragment>\n                        {\n                          this.props.route && this.props.route.params && this.state.order &&\n                          <Hotkeys\n                            keyName=\"enter\"\n                            onKeyDown={this.onKeyDown.bind(this)}\n                            onKeyUp={this.onKeyUp.bind(this)}\n                          >\n                            <View style={{ flex: 1 }} >\n                              {\n                                Platform.OS === \"web\"\n                                  ?\n                                  <View style={{ flex: 1 }}>\n                                    {\n                                      windowWidth >= 900\n                                        ?\n                                        <View style={{ flex: 1, flexDirection: \"row\" }}>\n                                          <View style={{ flex: 2 }}>\n                                            <UnscannedItems {...this.props}\n                                              order={this.state.order}\n                                              currentFocus={() => this.currentFocus()}\n                                              scanPackSetting={this.state.scan_pack_settings}\n                                              generalSetting={this.state.general_settings}\n                                              redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\n                                              unscannedItemPerPage={this.state.unscannedItemPerPage}\n                                              InputField={this.InputField}\n                                              scannedList={this.state.scannedList}\n                                              unscannedList={this.state.unscannedList}\n                                              logList={this.state.logList}\n                                              showUnscannedList={() => this.showUnscannedList()}\n                                              showScannedList={() => this.showScannedList()}\n                                              showLogList={() => this.showLogList()}\n                                              localLogs={this.state.localLogs}\n                                            />\n                                          </View>\n                                          <View style={{ flex: 4 }}>\n                                            {\n                                              this.state.loadOrderSpinner\n                                                ?\n                                                <View style={{ marginTop: 100 }}>\n                                                  <ActivityIndicator size=\"large\" color=\"#000\" />\n                                                  <View>\n                                                    <Text style={{ textAlign: \"center\" }}>Fetch more item to scan...</Text>\n                                                  </View>\n                                                </View>\n                                                :\n                                                <NextItems {...this.props}\n                                                  order={this.state.order}\n                                                  currentFocus={() => this.currentFocus()}\n                                                  barcodeRef={this.barcode}\n                                                  access_token={this.state.token}\n                                                  barcodeState={this.state.bar_code}\n                                                  removeFocus={() => this.removeFocus()}\n                                                  clickScan={(e) => this.clickScan(e)}\n                                                  // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\n                                                  scanAllItem={(e) => this.scanAllItem(e)}\n                                                  // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\n                                                  scanBarcode={(e) => this.scanBarcode(e)}\n                                                  // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\n                                                  stateUpdate={(text) => this.setState({ bar_code: text })}\n                                                  scanPackSetting={this.state.scan_pack_settings}\n                                                  generalSetting={this.state.general_settings}\n                                                  activities={props && props.Order && props.Order.activities}\n                                                  localLogs={this.state.localLogs}\n                                                  restartButton={() => this.restartButton()}\n                                                  redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\n                                                  addNote={() => this.addNote()}\n                                                  saveChanges={() => this.saveChanges()}\n                                                  leaveComponent={(order, type) => this.leaveComponent(order, type)}\n                                                  loadOrderSpinner={this.state.loadOrderSpinner}\n                                                  unscannedItemPerPage={this.state.unscannedItemPerPage}\n                                                  scannedItemPerPage={this.state.scannedItemPerPage}\n                                                  InputField={this.InputField}\n                                                  scannedList={this.state.scannedList}\n                                                  unscannedList={this.state.unscannedList}\n                                                  logList={this.state.logList}\n                                                  showScannedList={() => this.showScannedList()}\n                                                  showUnscannedList={() => this.showUnscannedList()}\n                                                  showLogList={() => this.showLogList()}\n                                                  addBarcode={(e) => this.addBarcode(e)}\n                                                  notesToPackerFlag={this.state.notes_toPackerFlag}\n                                                  notesToPackerPressed={() => this.showNotesToPacker()}\n                                                  settings={settings}\n                                                />\n                                            }\n                                          </View>\n                                          <View style={{ flex: 2, zIndex: -1 }}>\n                                            <ScannedItems {...this.props}\n                                              order={this.state.order}\n                                              scanPackSetting={this.state.scan_pack_settings}\n                                              generalSetting={this.state.general_settings}\n                                              scannedItemPerPage={this.state.scannedItemPerPage}\n                                            />\n                                          </View>\n                                        </View>\n                                        :\n                                        <View style={{ flex: 1, backgroundColor: \"#292929\" }}>\n                                          {\n                                            this.state.unscannedItemShow === true && this.state.nextItemShow === false &&\n                                            <UnscannedItems {...this.props}\n                                              order={this.state.order}\n                                              currentFocus={() => this.currentFocus()}\n                                              barcodeRef={this.barcode}\n                                              access_token={this.state.token}\n                                              barcodeState={this.state.bar_code}\n                                              removeFocus={(e) => this.removeFocus(e)}\n                                              redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\n                                              clickScan={(e) => this.clickScan(e)}\n                                              // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\n                                              scanAllItem={(e) => this.scanAllItem(e)}\n                                              // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\n                                              scanBarcode={(e) => this.scanBarcode(e)}\n                                              // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\n                                              stateUpdate={(text) => this.setState({ bar_code: text })}\n                                              scanPackSetting={this.state.scan_pack_settings}\n                                              generalSetting={this.state.general_settings}\n                                              activities={props && props.Order && props.Order.activities}\n                                              localLogs={this.state.localLogs}\n                                              restartButton={() => this.restartButton()}\n                                              addNote={() => this.addNote()}\n                                              saveChanges={() => this.saveChanges()}\n                                              navButton={() => this.navButton()}\n                                              leaveComponent={(order, type) => this.leaveComponent(order, type)}\n                                              unscannedItemPerPage={this.state.unscannedItemPerPage}\n                                              InputField={this.InputField}\n                                              scannedList={this.state.scannedList}\n                                              unscannedList={this.state.unscannedList}\n                                              logList={this.state.logList}\n                                              showUnscannedList={() => this.showUnscannedList()}\n                                              showScannedList={() => this.showScannedList()}\n                                              showLogList={() => this.showLogList()}\n                                              localLogs={this.state.localLogs}\n                                            />\n                                          }\n\n                                          {\n                                            this.state.loadOrderSpinner\n                                              ?\n                                              <View style={{ marginTop: 100 }}>\n                                                <ActivityIndicator size=\"large\" color=\"#000\" />\n                                                <View>\n                                                  <Text style={{ textAlign: \"center\" }}>Fetch more item to scan...</Text>\n                                                </View>\n                                              </View>\n                                              :\n                                              <>\n                                                {\n                                                  this.state.unscannedItemShow === false && this.state.nextItemShow === true && this.state.scannedItemShow === false &&\n                                                  <NextItems {...this.props}\n                                                    order={this.state.order}\n                                                    currentFocus={() => this.currentFocus()}\n                                                    barcodeRef={this.barcode}\n                                                    access_token={this.state.token}\n                                                    barcodeState={this.state.bar_code}\n                                                    removeFocus={(e) => this.removeFocus(e)}\n                                                    redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\n                                                    clickScan={(e) => this.clickScan(e)}\n                                                    // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\n                                                    scanAllItem={(e) => this.scanAllItem(e)}\n                                                    // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\n                                                    scanBarcode={(e) => this.scanBarcode(e)}\n                                                    // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\n                                                    stateUpdate={(text) => this.setState({ bar_code: text })}\n                                                    scanPackSetting={this.state.scan_pack_settings}\n                                                    generalSetting={this.state.general_settings}\n                                                    activities={props && props.Order && props.Order.activities}\n                                                    localLogs={this.state.localLogs}\n                                                    restartButton={() => this.restartButton()}\n                                                    addNote={() => this.addNote()}\n                                                    saveChanges={() => this.saveChanges()}\n                                                    navButtonLeft={() => this.navButtonLeft()}\n                                                    navButtonRight={() => { this.setState({ unscannedItemShow: false, nextItemShow: false, scannedItemShow: true }) }}\n                                                    leaveComponent={(order, type) => this.leaveComponent(order, type)}\n                                                    loadOrderSpinner={this.state.loadOrderSpinner}\n                                                    unscannedItemPerPage={this.state.unscannedItemPerPage}\n                                                    scannedItemPerPage={this.state.scannedItemPerPage}\n                                                    InputField={this.InputField}\n                                                    scannedList={this.state.scannedList}\n                                                    unscannedList={this.state.unscannedList}\n                                                    logList={this.state.logList}\n                                                    showScannedList={() => this.showScannedList()}\n                                                    showUnscannedList={() => this.showUnscannedList()}\n                                                    showLogList={() => this.showLogList()}\n                                                    addBarcode={(e) => this.addBarcode(e)}\n                                                    notesToPackerFlag={this.state.notes_toPackerFlag}\n                                                    notesToPackerPressed={() => this.showNotesToPacker()}\n                                                    settings={settings}\n                                                  />\n                                                }\n                                              </>\n                                          }\n                                          {\n                                            this.state.nextItemShow === false && this.state.scannedItemShow === true &&\n                                            <ScannedItems {...this.props}\n                                              order={this.state.order}\n                                              scanPackSetting={this.state.scan_pack_settings}\n                                              generalSetting={this.state.general_settings}\n                                              navButton={() => { this.setState({ unscannedItemShow: false, nextItemShow: true, scannedItemShow: false }) }}\n                                              scannedItemPerPage={this.state.scannedItemPerPage}\n                                            />\n                                          }\n                                        </View>\n                                    }\n                                  </View>\n                                  :\n                                  <Swiper index={1}\n                                    onIndexChanged={(e) => this.enableToggle(e)}\n                                    keyboardShouldPersistTaps={'handled'}\n                                    loop={false}\n                                    horizontal={true}\n                                    dotStyle={{ display: \"none\" }}\n                                    activeDotStyle={{ display: \"none\" }}>\n                                    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n                                      <UnscannedItems {...this.props}\n                                        order={this.state.order}\n                                        currentFocus={() => this.currentFocus()}\n                                        barcodeRef={this.barcode}\n                                        barcodeState={this.state.bar_code}\n                                        clickScan={(e) => this.clickScan(e)}\n                                        // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\n                                        scanAllItem={(e) => this.scanAllItem(e)}\n                                        // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\n                                        scanBarcode={(e) => this.scanBarcode(e)}\n                                        // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\n                                        stateUpdate={(text) => this.setState({ bar_code: text })}\n                                        leaveComponent={(order, type) => this.leaveComponent(order, type)}\n                                        scanPackSetting={this.state.scan_pack_settings}\n                                        generalSetting={this.state.general_settings}\n                                        redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\n                                        restartButton={() => this.restartButton()}\n                                        addNote={() => this.addNote()}\n                                        saveChanges={() => this.saveChanges()}\n                                        unscannedItemPerPage={this.state.unscannedItemPerPage}\n                                        InputField={this.InputField}\n                                        scannedList={this.state.scannedList}\n                                        unscannedList={this.state.unscannedList}\n                                        logList={this.state.logList}\n                                        showUnscannedList={() => this.showUnscannedList()}\n                                        showScannedList={() => this.showScannedList()}\n                                        showLogList={() => this.showLogList()}\n                                        localLogs={this.state.localLogs}\n                                      />\n                                    </View>\n                                    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n                                      <NextItems {...this.props}\n                                        order={this.state.order}\n                                        currentFocus={() => this.currentFocus()}\n                                        barcodeRef={this.barcode}\n                                        access_token={this.state.token}\n                                        barcodeState={this.state.bar_code}\n                                        clickScan={(e) => this.clickScan(e)}\n                                        removeFocus={(e) => this.removeFocus(e)}\n                                        // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\n                                        scanAllItem={(e) => this.scanAllItem(e)}\n                                        // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\n                                        scanBarcode={(e) => this.scanBarcode(e)}\n                                        // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\n                                        stateUpdate={(text) => this.setState({ bar_code: text })}\n                                        scanPackSetting={this.state.scan_pack_settings}\n                                        generalSetting={this.state.general_settings}\n                                        activities={props && props.Order && props.Order.activities}\n                                        localLogs={this.state.localLogs}\n                                        restartButton={() => this.restartButton()}\n                                        addNote={() => this.addNote()}\n                                        saveChanges={() => this.saveChanges()}\n                                        leaveComponent={(order, type) => this.leaveComponent(order, type)}\n                                        redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\n                                        loadOrderSpinner={this.state.loadOrderSpinner}\n                                        unscannedItemPerPage={this.state.unscannedItemPerPage}\n                                        scannedItemPerPage={this.state.scannedItemPerPage}\n                                        InputField={this.InputField}\n                                        scannedList={this.state.scannedList}\n                                        unscannedList={this.state.unscannedList}\n                                        logList={this.state.logList}\n                                        showScannedList={() => this.showScannedList()}\n                                        showUnscannedList={() => this.showUnscannedList()}\n                                        showLogList={() => this.showLogList()}\n                                        addBarcode={(e) => this.addBarcode(e)}\n                                      />\n                                    </View>\n                                    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n                                      <ScannedItems {...this.props}\n                                        order={this.state.order}\n                                        scanPackSetting={this.state.scan_pack_settings}\n                                        generalSetting={this.state.general_settings}\n                                        redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\n                                        scannedItemPerPage={this.state.scannedItemPerPage}\n                                      />\n                                    </View>\n                                  </Swiper>\n                              }\n                            </View>\n                          </Hotkeys>\n                        }\n                      </React.Fragment>\n                  }\n                </View>\n              }\n            </React.Fragment>\n        }\n      </View>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    Order: state.order.order,\n    ordersList: state.order.list,\n    bothSettings: state.user.bothSettings,\n    searchOrder: state.scanpack,\n    saveData: state.updateAsync.retriveData,\n    updateLog: state.saveLog,\n    callOrder: state.scanpack.searchOrder,\n    updateProduct: state.product.updateProductList,\n    updateProductAlias: state.product.updateProductAlias\n  }\n};\n\nconst mapDispatchToProps = {\n  GetOrderDetail,\n  GetOrderList,\n  GetBothSettings,\n  SearchScanpackOrder,\n  GetItem,\n  SetItem,\n  SubmitLog,\n  SearchOrder,\n  updateProductList,\n  updateProductAlias\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanPackItem)\n"]},"metadata":{},"sourceType":"module"}