{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL PC\\\\Downloads\\\\GroovePacker\\\\src\\\\components\\\\scanpack\\\\orderConfirmationPopUp.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"../../style/scanpack\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { fontFamily } from \"../../helpers/fontFamily\";\n\nvar OrderConfirmationPopUp = function (_Component) {\n  _inherits(OrderConfirmationPopUp, _Component);\n\n  var _super = _createSuper(OrderConfirmationPopUp);\n\n  function OrderConfirmationPopUp(props) {\n    var _this;\n\n    _classCallCheck(this, OrderConfirmationPopUp);\n\n    _this = _super.call(this, props);\n    _this.typeScanFocus = React.createRef();\n    return _this;\n  }\n\n  _createClass(OrderConfirmationPopUp, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.typeScanFocus.current.focus();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.typeScanContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 7\n        }\n      }, React.createElement(LinearGradient, {\n        locations: [0, 0.13, 1],\n        colors: [\"#000000\", \"#fdf359\", \"#d2c609\"],\n        style: [styles.typeScanBox, {\n          backgroundColor: \"#d3dfea\",\n          paddingHorizontal: 10,\n          paddingVertical: 5,\n          width: '70%'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: [styles.scanCountText, {\n          fontFamily: fontFamily.font400,\n          fontSize: 20,\n          marginTop: 10\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }\n      }, \"Confirmation is required for this note. Other elements are darkened until it has been submitted.\"), React.createElement(View, {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: 'column',\n          marginTop: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }\n      }, React.createElement(TextInput, {\n        value: this.props.OrderConfirmationCheckInput,\n        onChangeText: this.props.handleOrderConfirmationCheckInput,\n        autoFocus: true,\n        ref: this.typeScanFocus,\n        onSubmitEditing: this.props.OrderConfirmationCheckFun,\n        style: [styles.typeScanCountInput, {\n          backgroundColor: \"#f2e730\",\n          outline: \"none\",\n          width: \"60%\",\n          color: \"#000\",\n          fontFamily: fontFamily.font500,\n          fontSize: 18\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }), React.createElement(Text, {\n        style: {\n          fontFamily: fontFamily.font500,\n          marginTop: 5,\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      }, \"Enter or scan your confirmation code to continue.\")), React.createElement(View, {\n        style: {\n          alignItems: 'flex-end'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: this.props.closeAlert,\n        style: [styles.scanCountSubmitBtnBox, {\n          marginTop: 20\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: [styles.scanCountSubmitBtn, {\n          fontFamily: fontFamily.font400\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }\n      }, \"SKIP\")))));\n    }\n  }]);\n\n  return OrderConfirmationPopUp;\n}(Component);\n\nexport { OrderConfirmationPopUp as default };","map":{"version":3,"sources":["C:/Users/DELL PC/Downloads/GroovePacker/src/components/scanpack/orderConfirmationPopUp.js"],"names":["React","Component","styles","LinearGradient","fontFamily","OrderConfirmationPopUp","props","typeScanFocus","createRef","current","focus","typeScanContainer","typeScanBox","backgroundColor","paddingHorizontal","paddingVertical","width","scanCountText","font400","fontSize","marginTop","display","alignItems","flexDirection","OrderConfirmationCheckInput","handleOrderConfirmationCheckInput","OrderConfirmationCheckFun","typeScanCountInput","outline","color","font500","textAlign","closeAlert","scanCountSubmitBtnBox","scanCountSubmitBtn"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAEA,OAAOC,MAAP;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,UAAT;;IAEqBC,sB;;;;;AACnB,kCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,aAAL,GAAqBP,KAAK,CAACQ,SAAN,EAArB;AAFiB;AAGlB;;;;WAED,8BAAqB;AACnB,WAAKD,aAAL,CAAmBE,OAAnB,CAA2BC,KAA3B;AACD;;;WAED,kBAAS;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAER,MAAM,CAACS,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AACE,QAAA,SAAS,EAAE,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CADb;AAEE,QAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAFV;AAGE,QAAA,KAAK,EAAE,CAACT,MAAM,CAACU,WAAR,EAAqB;AAAEC,UAAAA,eAAe,EAAE,SAAnB;AAA8BC,UAAAA,iBAAiB,EAAE,EAAjD;AAAqDC,UAAAA,eAAe,EAAE,CAAtE;AAAyEC,UAAAA,KAAK,EAAE;AAAhF,SAArB,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACd,MAAM,CAACe,aAAR,EAAuB;AAAEb,UAAAA,UAAU,EAAEA,UAAU,CAACc,OAAzB;AAAkCC,UAAAA,QAAQ,EAAE,EAA5C;AAAgDC,UAAAA,SAAS,EAAE;AAA3D,SAAvB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4GAJF,EAQE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,UAAU,EAAE,QAA/B;AAAyCC,UAAAA,aAAa,EAAE,QAAxD;AAAkEH,UAAAA,SAAS,EAAE;AAA7E,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAE,KAAKd,KAAL,CAAWkB,2BADpB;AAEE,QAAA,YAAY,EAAE,KAAKlB,KAAL,CAAWmB,iCAF3B;AAGE,QAAA,SAAS,EAAE,IAHb;AAIE,QAAA,GAAG,EAAE,KAAKlB,aAJZ;AAKE,QAAA,eAAe,EAAE,KAAKD,KAAL,CAAWoB,yBAL9B;AAME,QAAA,KAAK,EAAE,CAACxB,MAAM,CAACyB,kBAAR,EAA4B;AAAEd,UAAAA,eAAe,EAAE,SAAnB;AAA8Be,UAAAA,OAAO,EAAE,MAAvC;AAA+CZ,UAAAA,KAAK,EAAE,KAAtD;AAA6Da,UAAAA,KAAK,EAAE,MAApE;AAA4EzB,UAAAA,UAAU,EAAEA,UAAU,CAAC0B,OAAnG;AAA4GX,UAAAA,QAAQ,EAAE;AAAtH,SAA5B,CANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EASE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEf,UAAAA,UAAU,EAAEA,UAAU,CAAC0B,OAAzB;AAAkCV,UAAAA,SAAS,EAAE,CAA7C;AAAgDW,UAAAA,SAAS,EAAE;AAA3D,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DATF,CARF,EAmBE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACT,UAAAA,UAAU,EAAE;AAAb,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKhB,KAAL,CAAW0B,UAAtC;AACE,QAAA,KAAK,EAAE,CAAC9B,MAAM,CAAC+B,qBAAR,EAA+B;AAAEb,UAAAA,SAAS,EAAE;AAAb,SAA/B,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAAClB,MAAM,CAACgC,kBAAR,EAA4B;AAAE9B,UAAAA,UAAU,EAAEA,UAAU,CAACc;AAAzB,SAA5B,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADF,CAnBF,CADF,CADF;AAiCD;;;;EA5CiDjB,S;;SAA/BI,sB","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\r\nimport styles from '../../style/scanpack';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { fontFamily } from '../../helpers/fontFamily';\r\n\r\nexport default class OrderConfirmationPopUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.typeScanFocus = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.typeScanFocus.current.focus()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.typeScanContainer}>\r\n        <LinearGradient\r\n          locations={[0, 0.13, 1]}\r\n          colors={[\"#000000\", \"#fdf359\", \"#d2c609\"]}\r\n          style={[styles.typeScanBox, { backgroundColor: \"#d3dfea\", paddingHorizontal: 10, paddingVertical: 5, width: '70%' }]}>\r\n          <Text style={[styles.scanCountText, { fontFamily: fontFamily.font400, fontSize: 20, marginTop: 10 }]}>\r\n            Confirmation is required for this note. Other elements are\r\n            darkened until it has been submitted.\r\n          </Text>\r\n          <View style={{ display: \"flex\", alignItems: \"center\", flexDirection: 'column', marginTop: 10 }}>\r\n            <TextInput\r\n              value={this.props.OrderConfirmationCheckInput}\r\n              onChangeText={this.props.handleOrderConfirmationCheckInput}\r\n              autoFocus={true}\r\n              ref={this.typeScanFocus}\r\n              onSubmitEditing={this.props.OrderConfirmationCheckFun}\r\n              style={[styles.typeScanCountInput, { backgroundColor: \"#f2e730\", outline: \"none\", width: \"60%\", color: \"#000\", fontFamily: fontFamily.font500, fontSize: 18 }]}>\r\n            </TextInput>\r\n            <Text style={{ fontFamily: fontFamily.font500, marginTop: 5, textAlign: \"center\" }}>Enter or scan your confirmation code to continue.</Text>\r\n          </View>\r\n          <View style={{alignItems: 'flex-end'}}>\r\n            <TouchableOpacity onPress={this.props.closeAlert}\r\n              style={[styles.scanCountSubmitBtnBox, { marginTop: 20 }]}\r\n            >\r\n              <Text style={[styles.scanCountSubmitBtn, { fontFamily: fontFamily.font400 }]}>\r\n                SKIP\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </LinearGradient>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}