{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL PC\\\\Downloads\\\\GroovePacker\\\\src\\\\components\\\\scanpack\\\\scanpack_item.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Audio } from 'expo-av';\nimport { connect } from 'react-redux';\nimport Swiper from 'react-native-swiper/src';\nimport NetInfo from \"@react-native-community/netinfo\";\nimport completeSound from \"../../../assets/sounds/_order_complete.mp3\";\nimport scanSuccessSound from \"../../../assets/sounds/scan_success_pop.mp3\";\nimport scanFailSound from \"../../../assets/sounds/scan_fail_shorter.mp3\";\nimport notReady from \"../../../assets/sounds/not_ready.mp3\";\nimport closeButton from \"../../../assets/closeicon.png\";\nimport { SearchScanpackOrder } from \"../../actions/scanpackAction\";\nimport { GetOrderList, SearchOrder } from \"../../actions/orderActions\";\nimport { updateProductList, updateProductAlias } from \"../../actions/productAction\";\nimport { GetBothSettings } from \"../../actions/userAction\";\nimport { GetOrderDetail } from \"../../actions/orderActions\";\nimport { SetItem, GetItem } from \"../../actions/updateAsyncAction\";\nimport { SubmitLog } from \"../../actions/saveLogAction\";\nimport styles from \"../../style/scanpack\";\nimport UnscannedItems from \"./unscanned_items\";\nimport ScannedItems from \"./scanned_items\";\nimport NextItems from \"./next_items\";\nimport Notes from \"./internal_notes\";\nimport Alert from \"./alert\";\nimport AddBarcode from \"./addBarcode\";\nimport PopUpModel from \"./pop_up_model\";\nimport ShipmentRecord from \"./shipmentsRecord\";\nimport TypeScanAlert from \"./type_scan_alert\";\nimport ResponseView from \"./response_view\";\nimport LogView from \"./log\";\nimport SerialRecord from \"./serial_record\";\nimport ClickScanConfirmationPopUp from \"./click_scan_confirmation_pop_up\";\nimport ProductConfirmationCheck from \"./productConfirmationCheck\";\nimport ConfirmTrackingNumber from \"./confirmTrackingNumber\";\nimport OrderConfirmationPopUp from \"./orderConfirmationPopUp\";\nimport globalStyles from \"../../style/global\";\nimport SwipeGesture from \"../../helpers/swipe-gesture\";\nimport Hotkeys from 'react-hot-keys';\nimport ProductAlias from \"../Alias/productAlias\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { fontFamily } from \"../../helpers/fontFamily\";\nvar searchOrderCheck = false;\nvar updateProductInfoSuccess = false;\nvar ScanPackSettingsAccess = false;\nvar GeneralSettingAccess = false;\nvar orderSaveSuccess = false;\nvar updateLogSuccess = true;\nvar callOrderSuccess = true;\nvar formOrderDetailPage = true;\nvar updateSerialLog = {};\nvar enableSerial = false;\nvar myInput = \"\";\nvar ordersListSuccess = true;\nvar blockScan = false;\nvar confirmProductConfirmation = false;\nvar updateFromOrderDetailPage = true;\nvar searchOrderSuccess = false;\nvar updateFromProductSuccess = false;\nvar updateProductApi = false;\nvar updateAliasSuccess = false;\n\nvar ScanPackItem = function (_Component) {\n  _inherits(ScanPackItem, _Component);\n\n  var _super = _createSuper(ScanPackItem);\n\n  function ScanPackItem(props) {\n    var _this;\n\n    _classCallCheck(this, ScanPackItem);\n\n    _this = _super.call(this, props);\n\n    _this.getUserInfo = function _callee() {\n      var info, userInfo;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"userInfo\"));\n\n            case 2:\n              info = _context.sent;\n              userInfo = info && JSON.parse(info);\n\n              _this.setState({\n                userInfo: userInfo\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.apiCall = function () {\n      var fetchListData = _this.state.shipmentOrder;\n      fetchListData.input = _this.props.route.params.incrementID;\n      var data = _this.props.route.params.data;\n\n      _this.setState({\n        order: data\n      });\n\n      _this.props.GetBothSettings();\n\n      ordersListSuccess = false;\n    };\n\n    _this.addBarcode = function (item) {\n      if (item.barcodes && item.barcodes.length === 0) {\n        _this.setState({\n          addBarcodeWindow: true,\n          addBarcodeItem: item\n        });\n      }\n    };\n\n    _this.addBarcodeSubmit = function () {\n      var newHash = {\n        value: _this.state.addBarcodeText,\n        var: \"barcode\",\n        id: _this.state.addBarcodeItem.product_id\n      };\n\n      _this.props.updateProductList(newHash);\n\n      _this.setState({\n        updateProductApiCall: new Date()\n      });\n\n      updateProductApi = true;\n    };\n\n    _this.nav = function _callee2(order, completeOrder) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              completeOrder && _this.multipleTime();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.statusFunction = function (message) {\n      var data = _this.state.data;\n      data[\"input\"] = \"\";\n\n      _this.setState({\n        rfoTitle: message,\n        data: data\n      });\n    };\n\n    _this.responseAction = function (response, from) {\n      var _this$state$scan_pack = _this.state.scan_pack_settings,\n          play_success_sound = _this$state$scan_pack.play_success_sound,\n          show_success_image = _this$state$scan_pack.show_success_image,\n          success_image_time = _this$state$scan_pack.success_image_time,\n          play_fail_sound = _this$state$scan_pack.play_fail_sound,\n          show_fail_image = _this$state$scan_pack.show_fail_image,\n          fail_image_time = _this$state$scan_pack.fail_image_time,\n          play_order_complete_sound = _this$state$scan_pack.play_order_complete_sound,\n          show_order_complete_image = _this$state$scan_pack.show_order_complete_image,\n          order_complete_image_time = _this$state$scan_pack.order_complete_image_time;\n      var popup_show_time = 0.3;\n\n      if (response === \"not_ready\") {\n        popup_show_time = fail_image_time;\n        show_fail_image ? _this.setState({\n          scanFailAction: true,\n          responseShowAction: true\n        }) : null;\n        play_fail_sound ? _this.playSound(notReady) : null;\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      if (response === \"scan_fail\") {\n        popup_show_time = fail_image_time;\n        show_fail_image ? _this.setState({\n          scanFailAction: true,\n          responseShowAction: true\n        }) : null;\n        play_fail_sound ? _this.playSound(scanFailSound) : null;\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      if (response === \"scan_success\") {\n        popup_show_time = success_image_time;\n        show_success_image ? _this.setState({\n          scanSuccessAction: true,\n          responseShowAction: true\n        }) : null;\n        play_success_sound ? _this.playSound(scanSuccessSound) : null;\n\n        _this.setState({\n          bar_code: \"\",\n          forSerialRecord: \"\"\n        });\n      }\n\n      if (response === \"order_complete\") {\n        if (_this.state.scan_pack_settings.post_scanning_option === \"None\") {\n          response = \"complete_order\";\n        } else {\n          var scanType = _this.state.scan_pack_settings.post_scanning_option;\n\n          _this.postScanFunction(scanType);\n        }\n      }\n\n      if (response === \"complete_order\") {\n        popup_show_time = order_complete_image_time;\n        show_order_complete_image ? _this.setState({\n          orderCompleteAction: true,\n          responseShowAction: true\n        }) : null;\n        play_order_complete_sound ? _this.playSound(completeSound) : null;\n\n        _this.nav(_this.state.order, true);\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      if (response === \"restart_action_complete\") {\n        _this.nav(_this.state.order);\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      var showTime = popup_show_time * 300;\n      setTimeout(function () {\n        _this.setState({\n          scanFailAction: false,\n          scanSuccessAction: false,\n          orderCompleteAction: false,\n          responseShowAction: false\n        });\n      }, showTime);\n\n      _this.updateAction.bind(_assertThisInitialized(_this));\n\n      try {\n        if (from === \"serialRecord\") {\n          _this.serialRecord.current.focus();\n        } else {}\n      } catch (error) {}\n    };\n\n    _this.playSound = function _callee3(response) {\n      var sound;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              sound = new Audio.Sound();\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(sound.unloadAsync());\n\n            case 3:\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(sound.loadAsync(response));\n\n            case 5:\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(sound.playAsync());\n\n            case 7:\n              _this.currentFocus();\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.currentFocus = function () {};\n\n    _this.sleep = function _callee4(ms) {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", new Promise(function (resolve) {\n                setTimeout(resolve, ms);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.postScanFunction = function (type, timeSecond) {\n      var scanPack = _this.state.scan_pack_settings;\n      var Order = _this.state.order && _this.state.order.order;\n\n      if (timeSecond) {\n        if (type === \"Record\") {\n          _this.setState({\n            trackingNumberView: true,\n            timeSecond: true,\n            postScanningFieldLabel: \"Scan Tracking Number for Order \" + Order.increment_id,\n            postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\n          });\n        }\n\n        if (type === \"Verify\") {\n          Order.tracking_num !== null ? _this.setState({\n            trackingNumberView: true,\n            timeSecond: true,\n            postScanningFieldLabel: \"Scan Shipping Label for Order \" + Order.increment_id,\n            postScanningMessageDetail: \"Please scan the shipping label.\"\n          }) : _this.setState({\n            trackingNumberView: true,\n            timeSecond: true,\n            postScanningFieldLabel: \"Scan Shipping Label for Order \" + Order.increment_id,\n            postScanSecond: true,\n            postScanningMessageDetail: \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\n          });\n        }\n      } else {\n        if (type === \"Record\") {\n          _this.setState({\n            trackingNumberView: true,\n            postScanningFieldLabel: \"Scan Tracking Number for Order \" + Order.increment_id,\n            postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\n          });\n        }\n\n        if (type === \"Verify\") {\n          Order.tracking_num !== null ? _this.setState({\n            trackingNumberView: true,\n            postScanningFieldLabel: \"Scan Shipping Label for Order \" + Order.increment_id,\n            postScanningMessageDetail: \"Please scan the shipping label.\"\n          }) : _this.setState({\n            trackingNumberView: true,\n            postScanningFieldLabel: \"Scan Shipping Label for Order \" + Order.increment_id,\n            postScan: true,\n            postScanningMessageDetail: \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\n          });\n        }\n      }\n    };\n\n    _this.updateAction = function _callee5(time) {\n      var soundObject;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              soundObject = new Audio.Sound();\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(soundObject.unloadAsync());\n\n            case 3:\n              _this.setState({\n                bar_code: \"\"\n              });\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.multipleTime = function _callee6() {\n      var getItem, convert;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logsArray\"));\n\n            case 2:\n              getItem = _context6.sent;\n              convert = getItem && JSON.parse(getItem);\n\n              _this.props.SubmitLog(convert);\n\n              setTimeout(function () {\n                return _this.redirectFun();\n              }, 1000);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.submitAlert = function () {\n      var order_num = _this.state.order.order.id;\n      var order = _this.state.order;\n      var notes_fromPacker = _this.state.notes_fromPacker;\n      order.order.notes_fromPacker = notes_fromPacker;\n      var localLogs = _this.state.localLogs;\n      var temp_order = {};\n      var event = \"\";\n      temp_order[\"message\"] = notes_fromPacker;\n      temp_order[\"input\"] = \"\";\n      temp_order[\"id\"] = order_num;\n      temp_order[\"order_item_id\"] = \"\";\n      temp_order[\"time\"] = new Date();\n      temp_order[\"state\"] = \"\";\n      temp_order[\"event\"] = \"note\";\n      temp_order[\"SKU\"] = \"\";\n      temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n      temp_order[\"updated_at\"] = order.order.updated_at;\n      temp_order[\"increment_id\"] = order.order.increment_id;\n\n      if (_this.state.issueFlag) {\n        _this.updateLog(temp_order, \"issue\");\n      }\n\n      if (_this.state.noteFlag) {\n        _this.updateLog(temp_order, \"note\");\n      }\n\n      _this.setState({\n        issueFlag: false,\n        noteFlag: false,\n        alert: false,\n        notes_fromPacker: \"\",\n        order: order\n      });\n    };\n\n    _this.scanAllItem = function () {\n      var order = _this.state.order;\n      var count = parseInt(_this.state.typeScanCount);\n      var bar_code = _this.state.scan_pack_settings.type_scan_code;\n      var unscanned_items = order.order.unscanned_items;\n      var items = unscanned_items && unscanned_items[0];\n      var scanned_items = order.order.scanned_items;\n      var log = _this.state.log;\n      var order_num = order.order.id;\n      var next_state = order.next_state;\n      var general_settings = _this.state.general_settings;\n      var temp_order = {};\n      var itemFound = false;\n      var localLogs = _this.state.localLogs;\n      var SKU = \"\";\n      var orderComplete = false;\n\n      if (general_settings.conf_code_product_instruction === \"always\") {\n        _this.setState({\n          productConfirmationCheck: true,\n          blockItemType: \"bulk_scan\"\n        });\n\n        blockScan = true;\n      } else if (general_settings.conf_code_product_instruction === \"optional\") {\n        if (items.child_items && items.child_items.length >= 1) {\n          if (items.child_items[0].confirmation === true) {\n            _this.setState({\n              productConfirmationCheck: true,\n              blockItemToScan: items.child_items[0],\n              blockItemType: \"bulk_scan\"\n            });\n\n            blockScan = true;\n          } else if (items.confirmation === true) {\n            _this.setState({\n              productConfirmationCheck: true,\n              blockItemToScan: items,\n              blockItemType: \"bulk_scan\"\n            });\n\n            blockScan = true;\n          }\n        }\n      }\n\n      if (blockScan === false || confirmProductConfirmation === true) {\n        if (items.product_type === \"individual\" && items.child_items && items.child_items.length > 0) {\n          var serialScanAccess = false;\n\n          if (enableSerial || items.child_items[0].record_serial === false && items.child_items[0].second_record_serial === false) {\n            serialScanAccess = true;\n          } else {\n            if (items.child_items[0].record_serial || items.child_items[0].second_record_serial) {\n              var eventType = \"scan_all_item\";\n\n              _this.setState({\n                serialRecordPopUpShow: true,\n                type: eventType\n              });\n            }\n          }\n\n          if (serialScanAccess) {\n            items.child_items && items.child_items.length > 0 && items.child_items.map(function (childItem, index) {\n              if (index === 0) {\n                if (scanned_items.length > 0) {\n                  scanned_items.map(function (scan) {\n                    if (childItem.product_id === scan.product_id && itemFound === false) {\n                      scan.scanned_qty = childItem.scanned_qty + childItem.qty_remaining;\n                      childItem.qty_remaining = 0;\n                      items.child_items.splice(index, 1);\n                      itemFound = true;\n                      SKU = childItem.sku;\n                      items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                    } else {\n                      if (childItem.scanned_qty === 0 && itemFound === false) {\n                        childItem.scanned_qty = childItem.scanned_qty + childItem.qty_remaining;\n                        childItem.qty_remaining = 0;\n                        scanned_items.splice(0, 0, childItem);\n                        items.child_items.splice(index, 1);\n                        itemFound = true;\n                        SKU = childItem.sku;\n                        items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                      }\n                    }\n                  });\n                } else {\n                  if (itemFound === false) {\n                    childItem.scanned_qty = childItem.scanned_qty + childItem.qty_remaining;\n                    childItem.qty_remaining = 0;\n                    scanned_items.splice(0, 0, childItem);\n                    items.child_items.splice(index, 1);\n                    itemFound = true;\n                    SKU = childItem.sku;\n                    items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                  }\n                }\n\n                if (unscanned_items.length === 0) {\n                  orderComplete = true;\n                }\n              }\n\n              return childItem;\n            });\n          }\n        } else {\n          if (items && items.qty_remaining > 0) {\n            var _serialScanAccess = false;\n\n            if (enableSerial || items.record_serial === false && items.second_record_serial === false) {\n              _serialScanAccess = true;\n            } else {\n              if (items.record_serial || items.second_record_serial) {\n                var _eventType = \"submit_type_scan\";\n\n                _this.setState({\n                  serialRecordPopUpShow: true,\n                  type: _eventType\n                });\n              }\n            }\n\n            if (_serialScanAccess) {\n              unscanned_items.map(function (unscan, index) {\n                if (index === 0) {\n                  if (scanned_items.length > 0) {\n                    scanned_items.map(function (scan) {\n                      if (unscan.order_item_id === scan.order_item_id && itemFound === false) {\n                        scan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining;\n                        scan.qty_remaining = 0;\n                        unscanned_items.splice(index, 1);\n                        itemFound = true;\n                        SKU = unscan.sku;\n                      } else {\n                        if (unscan.scanned_qty === 0 && itemFound === false) {\n                          unscan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining;\n                          unscan.qty_remaining = 0;\n                          scanned_items.splice(0, 0, unscan);\n                          unscanned_items.splice(index, 1);\n                          itemFound = true;\n                          SKU = unscan.sku;\n                        }\n                      }\n                    });\n                  } else {\n                    unscan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining;\n                    unscan.qty_remaining = 0;\n                    scanned_items.splice(0, 0, unscan);\n                    unscanned_items.splice(index, 1);\n                    SKU = unscan.sku;\n                  }\n\n                  if (unscanned_items.length === 0) {\n                    orderComplete = true;\n                  }\n                }\n\n                return unscan;\n              });\n            }\n          }\n        }\n\n        if (_this.state.type == \"scan_all_item\") {} else {\n          temp_order[\"input\"] = bar_code;\n          temp_order[\"id\"] = order_num;\n          temp_order[\"order_item_id\"] = items && items.order_item_id;\n          temp_order[\"time\"] = new Date();\n          temp_order[\"state\"] = next_state;\n          temp_order[\"event\"] = \"bulk_scan\";\n          temp_order[\"SKU\"] = SKU ? SKU : \"\";\n          temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n          temp_order[\"updated_at\"] = order.order.updated_at;\n          temp_order[\"increment_id\"] = order.order.increment_id;\n\n          _this.updateLog(temp_order, \"skip_curser\");\n\n          localLogs.splice(0, 0, temp_order);\n        }\n\n        _this.setState({\n          typeScanAlert: false,\n          typeScanCount: \"\"\n        });\n\n        enableSerial = false;\n\n        if (orderComplete === true) {\n          _this.updateLog(temp_order, \"order_complete\");\n        } else {\n          _this.responseAction(\"scan_success\");\n        }\n\n        confirmProductConfirmation = false;\n      }\n    };\n\n    _this.submitTypeScan = function () {\n      var order = _this.state.order;\n      var count = parseInt(_this.state.typeScanCount);\n      var bar_code = _this.state.scan_pack_settings.type_scan_code;\n      var unscanned_items = order.order.unscanned_items;\n      var items = unscanned_items && unscanned_items[0];\n      var scanned_items = order.order.scanned_items;\n      var order_num = order.order.id;\n      var next_state = order.next_state;\n      var temp_order = {};\n      var remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null;\n      var scanAccess = false;\n      var scanpush = false;\n      var match = false;\n      var skip = false;\n      var localLogs = _this.state.localLogs;\n      var orderInputType = items.product_type === \"individual\" && items.child_items.length > 0 ? items.child_items[0].barcodes[0].barcode : items.barcodes[0].barcode;\n      var SKU = \"\";\n\n      if (_this.state.type === \"submit_type_scan\") {\n        count = 1;\n      } else {\n        count = _this.state.typeScanState !== _this.state.typeScanDeductCountState ? count - 1 : count;\n      }\n\n      if (items.product_type === \"individual\" && items.child_items.length > 0) {\n        if (items.child_items[0].qty_remaining >= count) {\n          var serialScanAccess = false;\n\n          if (enableSerial || items.child_items[0].record_serial === false && items.child_items[0].second_record_serial === false) {\n            serialScanAccess = true;\n          } else {\n            if (items.child_items[0].record_serial || items.child_items[0].second_record_serial) {\n              var eventType = \"submit_type_scan\";\n\n              _this.setState({\n                serialRecordPopUpShow: true,\n                type: eventType\n              });\n            }\n          }\n\n          if (serialScanAccess) {\n            items.child_items && items.child_items.map(function (child, index) {\n              if (index === 0) {\n                if (scanned_items.length > 0) {\n                  scanned_items.map(function (scan) {\n                    var count_item = count;\n\n                    if (child.product_id === scan.product_id) {\n                      child.qty_remaining = child.qty_remaining - count_item;\n                      child.scanned_qty = child.scanned_qty + count_item;\n                      scan.qty_remaining = child.qty_remaining;\n                      scan.scanned_qty = child.scanned_qty;\n                      child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                      SKU = child.sku;\n                    } else {\n                      if (child.qty_remaining === count && child.scanned_qty === 0) {\n                        child.qty_remaining = child.qty_remaining - count_item;\n                        child.scanned_qty = child.scanned_qty + count_item;\n                        scan.qty_remaining = child.qty_remaining;\n                        scan.scanned_qty = child.scanned_qty;\n                        scanned_items.splice(0, 0, child);\n                        child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                        items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                        SKU = child.sku;\n                      } else {\n                        if (child.qty_remaining >= count && child.scanned_qty === 0) {\n                          child.qty_remaining = child.qty_remaining - count_item;\n                          child.scanned_qty = child.scanned_qty + count_item;\n                          scan.qty_remaining = child.qty_remaining;\n                          scan.scanned_qty = child.scanned_qty;\n                          scanned_items.splice(0, 0, child);\n                          child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                          SKU = child.sku;\n                        }\n                      }\n                    }\n                  });\n\n                  if (child.qty_remaining === 0) {\n                    items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                  }\n                } else {\n                  if (child.qty_remaining === count) {\n                    var count_item = count;\n                    child.qty_remaining = child.qty_remaining - count_item;\n                    child.scanned_qty = child.scanned_qty + count_item;\n                    scanned_items.splice(0, 0, child);\n                    child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                    items.child_items.length === 0 && unscanned_items.splice(index, 1);\n                    SKU = child.sku;\n                  } else {\n                    if (child.qty_remaining >= count && child.scanned_qty === 0) {\n                      var _count_item = count;\n                      child.qty_remaining = child.qty_remaining - _count_item;\n                      child.scanned_qty = child.scanned_qty + _count_item;\n                      child.qty_remaining === 0 && items.child_items.splice(index, 1);\n                      scanned_items.splice(0, 0, child);\n                      SKU = child.sku;\n                    }\n                  }\n                }\n              }\n            });\n\n            if (unscanned_items.length > 0) {\n              _this.responseAction(\"scan_success\");\n            } else {\n              _this.responseAction(\"order_complete\");\n            }\n          }\n        } else {\n          _this.alertBox(\"The quantity entered exceeds the remaining \" + items.child_items[0].qty_remaining + \" pieces in the order. Please try again\", true);\n\n          skip = true;\n        }\n      } else {\n        if (items.qty_remaining >= count) {\n          var _serialScanAccess2 = false;\n\n          if (enableSerial || items.record_serial === false && items.second_record_serial === false) {\n            _serialScanAccess2 = true;\n          } else {\n            if (items.record_serial || items.second_record_serial) {\n              var _eventType2 = \"submit_type_scan\";\n\n              _this.setState({\n                serialRecordPopUpShow: true,\n                type: _eventType2\n              });\n            }\n          }\n\n          if (_serialScanAccess2) {\n            unscanned_items.map(function (unscan, index) {\n              if (index === 0) {\n                if (scanned_items.length > 0) {\n                  scanned_items.map(function (scan) {\n                    var count_item = count;\n\n                    if (unscan.order_item_id === scan.order_item_id) {\n                      unscan.qty_remaining = unscan.qty_remaining - count_item;\n                      unscan.scanned_qty = unscan.scanned_qty + count_item;\n                      scan.qty_remaining = unscan.qty_remaining;\n                      scan.scanned_qty = unscan.scanned_qty;\n                      SKU = unscan.sku;\n                    } else {\n                      if (unscan.qty_remaining === count && unscan.scanned_qty === 0) {\n                        unscan.qty_remaining = unscan.qty_remaining - count_item;\n                        unscan.scanned_qty = unscan.scanned_qty + count_item;\n                        scan.qty_remaining = unscan.qty_remaining;\n                        scan.scanned_qty = unscan.scanned_qty;\n                        scanned_items.splice(0, 0, unscan);\n                        unscanned_items.splice(index, 1);\n                        SKU = unscan.sku;\n                      } else {\n                        if (unscan.qty_remaining >= count && unscan.scanned_qty === 0) {\n                          unscan.qty_remaining = unscan.qty_remaining - count_item;\n                          unscan.scanned_qty = unscan.scanned_qty + count_item;\n                          scan.qty_remaining = unscan.qty_remaining;\n                          scan.scanned_qty = unscan.scanned_qty;\n                          scanned_items.splice(0, 0, unscan);\n                          SKU = unscan.sku;\n                        }\n                      }\n                    }\n                  });\n\n                  if (unscan.qty_remaining === 0) {\n                    unscanned_items.splice(index, 1);\n                  }\n                } else {\n                  if (unscan.qty_remaining === count) {\n                    var count_item = count;\n                    unscan.qty_remaining = unscan.qty_remaining - count_item;\n                    unscan.scanned_qty = unscan.scanned_qty + count_item;\n                    scanned_items.splice(0, 0, unscan);\n                    unscanned_items.splice(index, 1);\n                    SKU = unscan.sku;\n                  } else {\n                    if (unscan.qty_remaining >= count && unscan.scanned_qty === 0) {\n                      var _count_item2 = count;\n                      unscan.qty_remaining = unscan.qty_remaining - _count_item2;\n                      unscan.scanned_qty = unscan.scanned_qty + _count_item2;\n                      scanned_items.splice(0, 0, unscan);\n                      SKU = unscan.sku;\n                    }\n                  }\n                }\n\n                if (unscanned_items.length > 0) {\n                  _this.responseAction(\"scan_success\");\n                } else {\n                  _this.responseAction(\"order_complete\");\n                }\n              }\n            });\n          }\n        } else {\n          _this.alertBox(\"The quantity entered exceeds the remaining \" + items.qty_remaining + \" pieces in the order. Please try again\", true);\n\n          skip = true;\n        }\n      }\n\n      if (_this.state.type === \"submit_type_scan\") {} else {\n        temp_order[\"input\"] = orderInputType;\n        temp_order[\"id\"] = order_num;\n        temp_order[\"order_item_id\"] = items && items.order_item_id;\n        temp_order[\"time\"] = new Date();\n        temp_order[\"box_id\"] = null;\n        temp_order[\"state\"] = 'scanpack.rfp.default';\n        temp_order[\"count\"] = count;\n        temp_order[\"event\"] = \"type_scan\";\n        temp_order[\"SKU\"] = SKU ? SKU : \"\";\n        temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n        temp_order[\"updated_at\"] = order.order.updated_at;\n        temp_order[\"increment_id\"] = order.order.increment_id;\n\n        if (skip === false) {\n          _this.updateLog(temp_order);\n\n          localLogs.splice(0, 0, temp_order);\n        }\n      }\n\n      if (count <= remain_qty) {\n        _this.setState({\n          typeScanAlert: false,\n          typeScanCount: \"\"\n        });\n      }\n\n      enableSerial = false;\n\n      _this.setState({\n        typeScanCount: \"\",\n        typeScanDeductCountState: _this.state.typeScanState,\n        typeScanAlert: false\n      });\n    };\n\n    _this.alertBox = function (message, skip, messageTypeSuccess) {\n      if (messageTypeSuccess === true) {\n        _this.setState({\n          popUpModelShow: true,\n          message: message,\n          messageTypeSuccess: true\n        });\n      } else {\n        _this.setState({\n          popUpModelShow: true,\n          message: message\n        });\n      }\n\n      setTimeout(function () {\n        this.setState({\n          popUpModelShow: false,\n          message: \"\",\n          messageTypeSuccess: false\n        });\n      }.bind(_assertThisInitialized(_this)), 4000);\n    };\n\n    _this.closeAlert = function () {\n      _this.setState({\n        alert: false,\n        notes_fromPacker: \"\",\n        typeScanAlert: false,\n        typeScanCount: 0,\n        popUpModelShow: false,\n        addBarcodeWindow: false,\n        message: \"\",\n        serialRecordPopUpShow: false,\n        serialRecordInput: \"\",\n        serialRecordTwo: \"\",\n        serialRecordOne: \"\",\n        clickScanConfirmation: false,\n        confirmationCheckItem: null,\n        clickScanConfirmInput: \"\",\n        productConfirmationCheck: false,\n        errorMessageProductConfirmationCheck: false,\n        errorMessageClickScanConfirmation: false,\n        orderConfirmPopUp: false\n      });\n\n      _this.currentFocus();\n\n      enableSerial = false;\n    };\n\n    _this.noBarcodeScan = function (item) {};\n\n    _this.ProductConfirmationCheckFun = function () {\n      var userCode = _this.state.userInfo.confirmation_code;\n      var userInput = _this.state.productConfirmationCheckInput;\n\n      if (userInput !== \"\") {\n        if (userCode === userInput) {\n          if (_this.state.blockItemType === \"item_present\") {\n            confirmProductConfirmation = true;\n\n            _this.clickScan(_this.state.blockItemToScan);\n          }\n\n          if (_this.state.blockItemType === \"barcode\") {\n            confirmProductConfirmation = true;\n\n            _this.scanBarcode();\n          }\n\n          if (_this.state.blockItemType === \"bulk_scan\") {\n            confirmProductConfirmation = true;\n\n            _this.scanAllItem();\n          }\n\n          _this.setState({\n            productConfirmationCheckInput: \"\",\n            productConfirmationCheck: false\n          });\n        } else {\n          _this.setState({\n            productConfirmationCheckInput: \"\"\n          });\n\n          _this.responseAction(\"scan_fail\");\n        }\n      } else {\n        if (_this.state.generalSettings.strict_cc === true) {\n          _this.responseAction(\"not_ready\");\n        } else {\n          if (_this.state.blockItemType === \"item_present\") {\n            confirmProductConfirmation = true;\n\n            _this.clickScan(_this.state.blockItemToScan);\n          }\n\n          if (_this.state.blockItemType === \"barcode\") {\n            confirmProductConfirmation = true;\n\n            _this.scanBarcode();\n          }\n\n          if (_this.state.blockItemType === \"bulk_scan\") {\n            confirmProductConfirmation = true;\n\n            _this.scanAllItem();\n          }\n\n          _this.setState({\n            productConfirmationCheckInput: \"\",\n            productConfirmationCheck: false\n          });\n        }\n      }\n    };\n\n    _this.handleProductConfirmationCheckInput = function (e) {\n      _this.setState({\n        productConfirmationCheckInput: e,\n        errorMessageProductConfirmationCheck: false\n      });\n    };\n\n    _this.OrderConfirmationCheckFun = function () {\n      var userCode = _this.state.userInfo.confirmation_code;\n      var userInput = _this.state.OrderConfirmationCheckInput;\n\n      if (userInput !== \"\") {\n        if (userCode === userInput) {\n          _this.setState({\n            orderConfirmPopUp: false\n          });\n        } else {\n          _this.setState({\n            OrderConfirmationCheckInput: \"\"\n          });\n\n          _this.responseAction(\"scan_fail\");\n        }\n      } else {\n        if (_this.state.generalSettings.strict_cc === true) {\n          _this.responseAction(\"not_ready\");\n        } else {\n          _this.setState({\n            orderConfirmPopUp: false\n          });\n\n          _this.currentFocus();\n        }\n      }\n    };\n\n    _this.handleOrderConfirmationCheckInput = function (e) {\n      _this.setState({\n        OrderConfirmationCheckInput: e,\n        errorMessageOrderConfirmationCheck: false\n      });\n    };\n\n    _this.restartButton = function () {\n      var order = _this.state.order;\n      var scanned_items = order.order.scanned_items;\n      var unscanned_items = order.order.unscanned_items;\n      var scan_pack_settings = _this.state.scan_pack_settings;\n      var order_num = order.order.id;\n      var Log_count = \"\";\n      var SKU = \"\";\n      var product_name = \"\";\n      var localLogs = _this.state.localLogs;\n      var remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null;\n      var temp_order = {};\n      var ActionBarcode = true;\n      temp_order[\"input\"] = scan_pack_settings.restart_code;\n      temp_order[\"id\"] = order_num;\n      temp_order[\"order_item_id\"] = unscanned_items.length > 0 ? unscanned_items[0].order_item_id : scanned_items.length > 0 ? scanned_items[0].order_item_id : \"\";\n      temp_order[\"time\"] = new Date();\n      temp_order[\"rem_qty\"] = remain_qty;\n      temp_order[\"SKU\"] = SKU ? SKU : unscanned_items[0].sku;\n      temp_order[\"Log_count\"] = Log_count;\n      temp_order[\"product_name\"] = product_name;\n      temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n      temp_order[\"state\"] = 'scanpack.rfp.default';\n      temp_order[\"event\"] = \"regular\";\n      temp_order[\"updated_at\"] = order.order.updated_at;\n      temp_order[\"increment_id\"] = order.order.increment_id;\n\n      _this.updateLog(temp_order, \"RESTART\");\n\n      if (_this.state.serialRecordInput === \"\") {\n        localLogs.splice(0, 0, temp_order);\n      }\n\n      _this.props.navigation.navigate(\"ScanPack\");\n    };\n\n    _this.addNote = function () {\n      if (_this.state.order) {\n        var order = _this.state.order;\n        var notes_fromPacker = order.order.notes_fromPacker;\n\n        _this.setState({\n          alert: true,\n          notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker,\n          noteFlag: true\n        });\n      }\n    };\n\n    _this.saveChanges = function _callee7() {\n      var getItem, count;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logsArray\"));\n\n            case 2:\n              getItem = _context7.sent;\n              count = getItem !== null && JSON.parse(getItem);\n\n              if (count && count.length > 0) {\n                _this.alertBox(\"Save Changes Successful\", true);\n\n                _this.multipleTime();\n              }\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.scanBarcode = function (clickBarcode, type) {\n      if (_this.state.order) {\n        var order = _this.state.order;\n        var scan_pack_settings = _this.state.scan_pack_settings;\n        var localScannedItems = _this.state.scanned_items;\n        var scanned_items = order.order.scanned_items;\n        var notes_fromPacker = order.order.notes_fromPacker;\n        var unscanned_items = order.order.unscanned_items;\n        var bar_code = _this.state.bar_code;\n        var event_code = _this.state.bar_code;\n        var ActionBarcode = false;\n        var remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null;\n\n        if (type === \"item_present\") {\n          bar_code = clickBarcode;\n          event_code = clickBarcode;\n          var tempArr = [{\n            barcode: \"noBarcode\",\n            id: 0,\n            is_multipack_barcode: true,\n            packing_count: \"1\"\n          }];\n          order.order.unscanned_items.map(function (noCode, index) {\n            if (noCode.barcodes && noCode.barcodes.length === 0) {\n              noCode.barcodes = tempArr;\n            }\n          });\n        } else {\n          bar_code = _this.state.bar_code === \"\" ? _this.state.forSerialRecord : _this.state.bar_code;\n        }\n\n        var findKit3 = false;\n        var log = _this.state.log;\n        var order_num = order.order.id;\n        var next_state = order.next_state;\n        var general_settings = _this.state.general_settings;\n        var master_switch = general_settings && general_settings.master_switch;\n        var temp_order = {};\n        var stop_add_log = false;\n        var lowercase = false;\n        var skipError = false;\n        var event_scanned = false;\n        var SKU = \"\";\n        var Log_count = \"\";\n        var localLogs = _this.state.localLogs;\n        var product_name = \"\";\n        var rejectLocalLog = true;\n        var Action_Type = \"\";\n        var order_complete_flag = false;\n        var qty_remain = 0;\n        var scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : \"\";\n\n        if (bar_code !== \"\") {\n          if (scan_pack_settings.escape_string_enabled && type !== \"item_present\") {\n            var removeSpaceBarCode = bar_code;\n\n            if (scan_pack_settings.first_escape_string_enabled) {\n              var check = scan_pack_settings.escape_string;\n\n              if (removeSpaceBarCode && removeSpaceBarCode.includes(check) && scan_pack_settings.first_escape_string_enabled !== \"\") {\n                var tempIndex = removeSpaceBarCode.indexOf(check);\n                bar_code = removeSpaceBarCode.slice(0, tempIndex);\n              }\n            }\n\n            if (scan_pack_settings.second_escape_string_enabled) {\n              var _check = scan_pack_settings.second_escape_string;\n\n              if (removeSpaceBarCode && removeSpaceBarCode.includes(_check) && scan_pack_settings.second_escape_string !== \"\") {\n                var _tempIndex = removeSpaceBarCode.indexOf(_check);\n\n                bar_code = removeSpaceBarCode.slice(0, _tempIndex);\n              }\n            }\n          }\n\n          if (scan_pack_settings.note_from_packer_code_enabled) {\n            if (scan_pack_settings.note_from_packer_code === bar_code) {\n              stop_add_log = true;\n              skipError = true;\n\n              _this.setState({\n                alert: true,\n                notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker,\n                noteFlag: true,\n                bar_code: \"\"\n              });\n            }\n          }\n\n          if (scan_pack_settings && scan_pack_settings.restart_code_enabled && scan_pack_settings.restart_code === bar_code) {\n            skipError = true;\n            Action_Type = \"RESTART\";\n            ActionBarcode = true;\n          }\n\n          if (scan_pack_settings.type_scan_code_enabled) {\n            if (scan_pack_settings.type_scan_code === bar_code) {\n              if (_this.state.typeScanState !== \"\") {\n                if (unscanned_items[0].product_type === \"individual\" && unscanned_items[0].child_items.length > 0) {\n                  if (_this.state.typeScanState === unscanned_items[0].child_items[0].sku) {\n                    if (unscanned_items[0].child_items[0].record_serial || unscanned_items[0].child_items[0].second_record_serial) {\n                      _this.setState({\n                        typeScanAlert: true,\n                        type: \"submit_type_scan\"\n                      });\n                    } else {\n                      _this.setState({\n                        typeScanAlert: true\n                      });\n                    }\n                  } else {\n                    _this.alertBox(\"Please scan the item once before triggering a type-in count.\");\n                  }\n                } else {\n                  if (_this.state.typeScanState === unscanned_items[0].sku) {\n                    if (unscanned_items[0].record_serial || unscanned_items[0].second_record_serial) {\n                      _this.setState({\n                        typeScanAlert: true,\n                        type: \"submit_type_scan\"\n                      });\n                    } else {\n                      _this.setState({\n                        typeScanAlert: true\n                      });\n                    }\n                  } else {\n                    _this.alertBox(\"Please scan the item once before triggering a type-in count.\");\n                  }\n                }\n              } else {\n                _this.alertBox(\"Please scan the item once before triggering a type-in count.\");\n              }\n\n              skipError = true;\n              stop_add_log = true;\n            }\n          }\n\n          if (scan_pack_settings.scanned) {\n            if (scan_pack_settings.scanned_barcode === bar_code) {\n              skipError = true;\n              event_scanned = true;\n              var Order = _this.state.order && _this.state.order.order;\n              Order[\"unscanned_items\"] = [];\n\n              _this.setState({\n                Order: Order\n              });\n\n              _this.responseAction(\"order_complete\");\n\n              ActionBarcode = true;\n            }\n          }\n\n          if (scan_pack_settings.service_issue_code_enabled) {\n            if (scan_pack_settings.service_issue_code === bar_code) {\n              _this.setState({\n                alert: true,\n                notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker,\n                issueFlag: true\n              });\n\n              skipError = true;\n            }\n          }\n\n          if (scan_pack_settings.click_scan) {\n            if (scan_pack_settings.click_scan_barcode === bar_code) {\n              var item = unscanned_items && unscanned_items[0];\n\n              _this.clickScan(item, \"actionbarcode\");\n\n              skipError = true;\n              ActionBarcode = true;\n            }\n          }\n\n          if (unscanned_items[0].product_type === \"individual\") {\n            if (unscanned_items[0].child_items && unscanned_items[0].child_items.length > 0) {\n              if (scan_pack_settings.remove_barcode && scan_pack_settings.remove_barcode === bar_code) {\n                unscanned_items[0].child_items.shift();\n                unscanned_items[0].child_items.length === 0 && unscanned_items.shift();\n\n                _this.responseAction(\"scan_success\");\n\n                skipError = true;\n                ActionBarcode = true;\n              }\n            }\n          } else {\n            if (unscanned_items && unscanned_items.length > 0) {\n              if (scan_pack_settings.remove_barcode && scan_pack_settings.remove_barcode === bar_code) {\n                unscanned_items.shift();\n\n                _this.responseAction(\"scan_success\");\n\n                skipError = true;\n                ActionBarcode = true;\n              }\n            }\n          }\n\n          if (scan_pack_settings.scanning_sequence === \"any_sequence\" && master_switch === false) {\n            bar_code = bar_code.toLowerCase();\n            lowercase = true;\n          }\n\n          if (unscanned_items.length > 0) {\n            if (scan_pack_settings.scanning_sequence === \"any_sequence\" ? \"any_sequence\" : \"items_sequence\") {\n              var scanpush = false;\n              var itemFound = false;\n              unscanned_items.length > 0 && unscanned_items.map(function (item, index) {\n                if (item.product_type === \"individual\" && item.child_items && item.child_items.length > 0) {\n                  if (item.child_items[0].skippable) {\n                    var skip_code = lowercase === true ? scan_pack_settings.skip_code.toLowerCase() : scan_pack_settings.skip_code;\n\n                    if (scan_pack_settings.skip_code_enabled && skip_code === bar_code) {\n                      item.child_items.splice(index, 1);\n                      itemFound = true;\n\n                      _this.responseAction(\"scan_success\");\n\n                      if (unscanned_items.length === 0) {\n                        order_complete_flag = true;\n                      }\n\n                      ActionBarcode = true;\n                    }\n                  }\n                } else {\n                  if (item.skippable) {\n                    var _skip_code = lowercase === true ? scan_pack_settings.skip_code.toLowerCase() : scan_pack_settings.skip_code;\n\n                    if (scan_pack_settings.skip_code_enabled && _skip_code === bar_code) {\n                      unscanned_items.splice(index, 1);\n                      itemFound = true;\n\n                      _this.responseAction(\"scan_success\");\n\n                      if (unscanned_items.length === 0) {\n                        order_complete_flag = true;\n                      }\n\n                      ActionBarcode = true;\n                    }\n                  }\n                }\n\n                scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : index;\n\n                if (index === scanAccess) {\n                  {\n                    item && item.product_type === \"individual\" && item.child_items && item.child_items.length > 0 ? item && item.child_items.map(function (childItem, childIndex) {\n                      scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : childIndex;\n\n                      if (childIndex === scanAccess) {\n                        childItem.barcodes.map(function (barcode) {\n                          var Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode;\n\n                          if (Barcode === bar_code && scanpush === false) {\n                            var serialScanAccess = false;\n\n                            if (enableSerial || childItem.record_serial === false && childItem.second_record_serial === false) {\n                              serialScanAccess = true;\n                            } else {\n                              if (childItem.record_serial || childItem.second_record_serial) {\n                                var eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n                                rejectLocalLog = false;\n\n                                _this.setState({\n                                  serialRecordPopUpShow: true,\n                                  type: eventType\n                                });\n                              }\n                            }\n\n                            if (confirmProductConfirmation === false) {\n                              if (general_settings.conf_code_product_instruction === \"always\") {\n                                _this.setState({\n                                  productConfirmationCheck: true,\n                                  blockItemToScan: childItem,\n                                  blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                                });\n\n                                skipError = true;\n                                blockScan = true;\n                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                                if (childItem.confirmation === true) {\n                                  _this.setState({\n                                    productConfirmationCheck: true,\n                                    blockItemToScan: childItem,\n                                    blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                                  });\n\n                                  skipError = true;\n                                  blockScan = true;\n                                }\n                              }\n                            }\n\n                            if (blockScan === false || confirmProductConfirmation === true) {\n                              if (serialScanAccess) {\n                                if (scanned_items.length > 0) {\n                                  scanned_items.map(function (scan, scanItemIndex) {\n                                    scan.barcodes.map(function (scancode) {\n                                      var Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode;\n\n                                      if (type === \"item_present\" ? childItem.qty_remaining >= 1 : childItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                        if (Scancode === Barcode && Barcode === bar_code && childItem.product_id === scan.product_id) {\n                                          if (scan.qty_remaining === 1 && scanpush === false) {\n                                            if (type === \"item_present\") {\n                                              childItem.qty_remaining = childItem.qty_remaining - 1;\n                                              childItem.scanned_qty = childItem.scanned_qty + 1;\n                                            } else {\n                                              if (childItem.qty_remaining > 0) {\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                              }\n                                            }\n\n                                            item.child_items.splice(scanAccess, 1);\n                                            item.child_items.length === 0 && unscanned_items.splice(index, 1);\n                                            scanned_items.splice(scanItemIndex, 1);\n                                            scanned_items.splice(0, 0, scan);\n\n                                            _this.setState({\n                                              typeScanState: childItem.sku\n                                            });\n\n                                            scanpush = true;\n                                            SKU = childItem.sku;\n                                            Log_count = barcode.packing_count;\n                                            product_name = childItem.name;\n                                            qty_remain = childItem.qty_remaining;\n                                          } else {\n                                            if (scan.qty_remaining > 0 && scanpush === false) {\n                                              if (type === \"item_present\") {\n                                                childItem.scanned_qty = childItem.scanned_qty + 1;\n                                                childItem.qty_remaining = childItem.qty_remaining - 1;\n                                              } else {\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                              }\n\n                                              scanned_items.splice(scanItemIndex, 1);\n                                              scanned_items.splice(0, 0, scan);\n\n                                              _this.setState({\n                                                typeScanState: childItem.sku\n                                              });\n\n                                              scanpush = true;\n                                              SKU = childItem.sku;\n                                              Log_count = barcode.packing_count;\n                                              product_name = childItem.name;\n                                              qty_remain = childItem.qty_remaining;\n                                            }\n\n                                            if (childItem.qty_remaining === 0) {\n                                              item.child_items.splice(scanAccess, 1);\n                                              item.child_items.length === 0 && unscanned_items.splice(index, 1);\n                                            }\n                                          }\n                                        } else {\n                                          if (scancode !== bar_code && childItem.scanned_qty === 0) {\n                                            if (childItem.qty_remaining === 1 && scanpush === false) {\n                                              if (type === \"item_present\") {\n                                                childItem.qty_remaining = childItem.qty_remaining - 1;\n                                                childItem.scanned_qty = childItem.scanned_qty + 1;\n                                              } else {\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                              }\n\n                                              scanned_items.splice(0, 0, childItem);\n                                              item.child_items.splice(scanAccess, 1);\n                                              item.child_items.length === 0 && unscanned_items.splice(index, 1);\n\n                                              _this.setState({\n                                                typeScanState: childItem.sku\n                                              });\n\n                                              scanpush = true;\n                                              SKU = childItem.sku;\n                                              Log_count = barcode.packing_count;\n                                              product_name = childItem.name;\n                                              qty_remain = childItem.qty_remaining;\n                                            } else {\n                                              if (scanpush === false) {\n                                                if (type === \"item_present\") {\n                                                  childItem.qty_remaining = childItem.qty_remaining - 1;\n                                                  childItem.scanned_qty = childItem.scanned_qty + 1;\n                                                } else {\n                                                  childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                                  childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                                }\n\n                                                scanned_items.splice(0, 0, childItem);\n\n                                                _this.setState({\n                                                  typeScanState: childItem.sku\n                                                });\n\n                                                scanpush = true;\n                                                SKU = childItem.sku;\n                                                Log_count = barcode.packing_count;\n                                                product_name = childItem.name;\n                                                qty_remain = childItem.qty_remaining;\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    });\n                                  });\n                                } else {\n                                  if (Barcode === bar_code && childItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                    if (childItem.qty_remaining === 1 && scanpush === false) {\n                                      if (type === \"item_present\") {\n                                        childItem.qty_remaining = childItem.qty_remaining - 1;\n                                        childItem.scanned_qty = childItem.scanned_qty + 1;\n                                      } else {\n                                        childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                        childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                      }\n\n                                      scanned_items.splice(0, 0, childItem);\n                                      item.child_items.splice(scanAccess, 1);\n                                      item.child_items.length === 0 && unscanned_items.splice(index, 1);\n\n                                      _this.setState({\n                                        typeScanState: childItem.sku\n                                      });\n\n                                      scanpush = true;\n                                      SKU = childItem.sku;\n                                      Log_count = barcode.packing_count;\n                                      product_name = childItem.name;\n                                      qty_remain = childItem.qty_remaining;\n                                    } else {\n                                      if (scanpush === false) {\n                                        if (type === \"item_present\") {\n                                          childItem.qty_remaining = childItem.qty_remaining - 1;\n                                          childItem.scanned_qty = childItem.scanned_qty + 1;\n                                        } else {\n                                          childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count);\n                                          childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count);\n                                        }\n\n                                        scanned_items.splice(0, 0, childItem);\n\n                                        _this.setState({\n                                          typeScanState: childItem.sku\n                                        });\n\n                                        scanpush = true;\n                                        SKU = childItem.sku;\n                                        Log_count = barcode.packing_count;\n                                        product_name = childItem.name;\n                                        qty_remain = childItem.qty_remaining;\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n\n                              if (unscanned_items.length > 0) {\n                                if (serialScanAccess) {\n                                  if (type === \"item_present\") {\n                                    _this.responseAction(\"scan_success\");\n                                  } else {\n                                    if (remain_qty >= parseInt(barcode.packing_count)) {\n                                      _this.responseAction(\"scan_success\");\n                                    } else {\n                                      _this.alertBox(\"The multi-pack barcode scanned exceeds the quantity remaining\");\n                                    }\n                                  }\n                                }\n                              } else {\n                                order_complete_flag = true;\n                              }\n\n                              if (_this.state.blockItemToScan && _this.state.blockItemToScan.name !== childItem.name || childItem.qty_remaining === 0) {\n                                confirmProductConfirmation = false;\n                              }\n\n                              itemFound = true;\n                            }\n                          }\n                        });\n                      }\n                    }) : item && item.product_type === \"depends\" ? item && item.barcodes.map(function (barcode, barcodeIndex) {\n                      var Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode;\n                      var mainItem = false;\n                      unscanned_items.map(function (un) {\n                        un.barcodes.map(function (bar) {\n                          if (bar.barcode === bar_code) {\n                            mainItem = true;\n                          }\n                        });\n                      });\n\n                      if (Barcode === bar_code && scanpush === false) {\n                        var serialScanAccess = false;\n\n                        if (enableSerial || item.record_serial === false && item.second_record_serial === false) {\n                          serialScanAccess = true;\n                        } else {\n                          if (item.record_serial || item.second_record_serial) {\n                            var eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n                            rejectLocalLog = false;\n\n                            _this.setState({\n                              serialRecordPopUpShow: true,\n                              type: eventType\n                            });\n                          }\n                        }\n\n                        if (confirmProductConfirmation === false) {\n                          if (general_settings.conf_code_product_instruction === \"always\") {\n                            _this.setState({\n                              productConfirmationCheck: true,\n                              blockItemToScan: item,\n                              blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                            });\n\n                            skipError = true;\n                            blockScan = true;\n                          } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                            if (item.confirmation === true) {\n                              _this.setState({\n                                productConfirmationCheck: true,\n                                blockItemToScan: item,\n                                blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                              });\n\n                              skipError = true;\n                              blockScan = true;\n                            }\n                          }\n                        }\n\n                        if (blockScan === false || confirmProductConfirmation === true) {\n                          if (serialScanAccess) {\n                            if (scanned_items.length > 0) {\n                              scanned_items.map(function (scan, scanIndex) {\n                                scan.barcodes.map(function (scancode, scancodeIndex) {\n                                  var Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode;\n\n                                  if (type === \"item_present\" ? item.qty_remaining >= 1 : item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                    if (Scancode === Barcode && Barcode === bar_code && item.order_item_id === scan.order_item_id) {\n                                      if (scan.qty_remaining === 1 && scanpush === false) {\n                                        if (type === \"item_present\") {\n                                          item.qty_remaining = item.qty_remaining - 1;\n                                          item.scanned_qty = item.scanned_qty + 1;\n                                          scan.qty_remaining = item.qty_remaining;\n                                          scan.scanned_qty = item.scanned_qty;\n                                        } else {\n                                          item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                          item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                          scan.qty_remaining = item.qty_remaining;\n                                          scan.scanned_qty = item.scanned_qty;\n                                        }\n\n                                        unscanned_items.splice(scanAccess, 1);\n                                        scanned_items.splice(scanIndex, 1);\n                                        scanned_items.splice(0, 0, scan);\n\n                                        _this.setState({\n                                          typeScanState: item.sku\n                                        });\n\n                                        scanpush = true;\n                                        SKU = item.sku;\n                                        Log_count = barcode.packing_count;\n                                        product_name = item.name;\n                                        qty_remain = item.qty_remaining;\n                                      } else {\n                                        if (scan.qty_remaining > 0 && scanpush === false) {\n                                          if (type === \"item_present\") {\n                                            item.scanned_qty = item.scanned_qty + 1;\n                                            item.qty_remaining = item.qty_remaining - 1;\n                                            scan.qty_remaining = item.qty_remaining;\n                                            scan.scanned_qty = item.scanned_qty;\n                                          } else {\n                                            item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                            item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                            scan.qty_remaining = item.qty_remaining;\n                                            scan.scanned_qty = item.scanned_qty;\n                                          }\n\n                                          scanned_items.splice(scanIndex, 1);\n                                          scanned_items.splice(0, 0, scan);\n\n                                          _this.setState({\n                                            typeScanState: item.sku\n                                          });\n\n                                          scanpush = true;\n                                          SKU = item.sku;\n                                          Log_count = barcode.packing_count;\n                                          product_name = item.name;\n                                          qty_remain = item.qty_remaining;\n                                        }\n\n                                        if (item.qty_remaining === 0) {\n                                          unscanned_items.splice(scanAccess, 1);\n                                        }\n                                      }\n                                    } else {\n                                      if (scancode !== bar_code && item.scanned_qty === 0) {\n                                        if (item.qty_remaining === 1 && scanpush === false) {\n                                          if (type === \"item_present\") {\n                                            item.qty_remaining = item.qty_remaining - 1;\n                                            item.scanned_qty = item.scanned_qty + 1;\n                                            scan.qty_remaining = item.qty_remaining;\n                                            scan.scanned_qty = item.scanned_qty;\n                                          } else {\n                                            item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                            item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                            scan.qty_remaining = item.qty_remaining;\n                                            scan.scanned_qty = item.scanned_qty;\n                                          }\n\n                                          scanned_items.splice(0, 0, item);\n                                          unscanned_items.splice(scanAccess, 1);\n\n                                          _this.setState({\n                                            typeScanState: item.sku\n                                          });\n\n                                          scanpush = true;\n                                          SKU = item.sku;\n                                          Log_count = barcode.packing_count;\n                                          product_name = item.name;\n                                          qty_remain = item.qty_remaining;\n                                        } else {\n                                          if (scanpush === false) {\n                                            if (type === \"item_present\") {\n                                              item.qty_remaining = item.qty_remaining - 1;\n                                              item.scanned_qty = item.scanned_qty + 1;\n                                              scan.qty_remaining = item.qty_remaining;\n                                              scan.scanned_qty = item.scanned_qty;\n                                            } else {\n                                              item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                              item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                              scan.qty_remaining = item.qty_remaining;\n                                              scan.scanned_qty = item.scanned_qty;\n                                            }\n\n                                            scanned_items.splice(0, 0, item);\n\n                                            _this.setState({\n                                              typeScanState: item.sku\n                                            });\n\n                                            scanpush = true;\n                                            SKU = item.sku;\n                                            Log_count = barcode.packing_count;\n                                            product_name = item.name;\n                                            qty_remain = item.qty_remaining;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                });\n                              });\n                            } else {\n                              if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                if (item.qty_remaining === 1 && scanpush === false) {\n                                  if (type === \"item_present\") {\n                                    item.qty_remaining = item.qty_remaining - 1;\n                                    item.scanned_qty = item.scanned_qty + 1;\n                                  } else {\n                                    item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                    item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                  }\n\n                                  scanned_items.splice(0, 0, item);\n                                  unscanned_items.splice(scanAccess, 1);\n\n                                  _this.setState({\n                                    typeScanState: item.sku\n                                  });\n\n                                  scanpush = true;\n                                  SKU = item.sku;\n                                  Log_count = barcode.packing_count;\n                                  product_name = item.name;\n                                  qty_remain = item.qty_remaining;\n                                } else {\n                                  if (scanpush === false) {\n                                    if (type === \"item_present\") {\n                                      item.qty_remaining = item.qty_remaining - 1;\n                                      item.scanned_qty = item.scanned_qty + 1;\n                                    } else {\n                                      item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                      item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                    }\n\n                                    scanned_items.splice(0, 0, item);\n\n                                    _this.setState({\n                                      typeScanState: item.sku\n                                    });\n\n                                    scanpush = true;\n                                    SKU = item.sku;\n                                    Log_count = barcode.packing_count;\n                                    product_name = item.name;\n                                    qty_remain = item.qty_remaining;\n                                  }\n                                }\n                              }\n                            }\n                          }\n\n                          if (unscanned_items.length > 0) {\n                            if (serialScanAccess) {\n                              if (type === \"item_present\") {\n                                _this.responseAction(\"scan_success\");\n                              } else {\n                                if (remain_qty >= parseInt(barcode.packing_count)) {\n                                  _this.responseAction(\"scan_success\");\n                                } else {\n                                  _this.alertBox(\"The multi-pack barcode scanned exceeds the quantity remaining\");\n                                }\n                              }\n                            }\n                          } else {\n                            order_complete_flag = true;\n                          }\n\n                          itemFound = true;\n\n                          if (_this.state.blockItemToScan && _this.state.blockItemToScan.name !== item.name || item.qty_remaining === 0) {\n                            confirmProductConfirmation = false;\n                          }\n                        }\n                      } else {\n                        if (item.product_type === \"depends\" && mainItem === false) {\n                          item && item.child_items.map(function (childItem, childItemIndex) {\n                            childItem.barcodes.map(function (childItemBarcode, childItemBarcodeIndex) {\n                              var Barcode = lowercase === true ? childItemBarcode.barcode.toLowerCase() : childItemBarcode.barcode;\n\n                              if (Barcode === bar_code && scanpush === false && item.qty_remaining > 0) {\n                                var _serialScanAccess3 = false;\n\n                                if (enableSerial || childItem.record_serial === false && childItem.second_record_serial === false) {\n                                  _serialScanAccess3 = true;\n                                } else {\n                                  if (childItem.record_serial || childItem.second_record_serial) {\n                                    var _eventType3 = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n\n                                    rejectLocalLog = false;\n\n                                    _this.setState({\n                                      serialRecordPopUpShow: true,\n                                      type: _eventType3\n                                    });\n                                  }\n                                }\n\n                                if (_serialScanAccess3) {\n                                  var tempItem = _extends({}, item);\n\n                                  var tempItem1 = _extends({}, item);\n\n                                  var tempItemChildArr = [];\n                                  var tempItem1ChildArr = [];\n                                  var arr = [];\n                                  tempItem.qty_remaining = 1;\n                                  tempItem.product_type = \"individual\";\n                                  var kitDivide = tempItem1.qty_remaining;\n                                  tempItem.child_items.map(function (child) {\n                                    var newCopy = _extends({}, child);\n\n                                    newCopy.qty_remaining = newCopy.qty_remaining / kitDivide;\n                                    tempItemChildArr.push(newCopy);\n                                  });\n                                  tempItem.child_items = tempItemChildArr;\n                                  tempItem1.qty_remaining = tempItem1.qty_remaining - 1;\n                                  tempItem1.child_items.map(function (childTemp) {\n                                    var newCopy = _extends({}, childTemp);\n\n                                    var sub = newCopy.qty_remaining / kitDivide;\n                                    var final = newCopy.qty_remaining - sub;\n                                    newCopy.qty_remaining = final;\n                                    tempItem1ChildArr.push(newCopy);\n                                    tempItem1.child_items = tempItem1ChildArr;\n                                    arr.push(tempItem, tempItem1);\n                                  });\n                                  unscanned_items.splice(index, 1, arr[0], arr[1]);\n                                }\n\n                                unscanned_items.map(function (updateProduct, updateProductIndex) {\n                                  updateProduct && updateProduct.child_items && updateProduct.child_items.map(function (updateChildItem, updatedChildItemIndex) {\n                                    updateChildItem.barcodes.map(function (barcode) {\n                                      var Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode;\n\n                                      if (Barcode === bar_code && scanpush === false) {\n                                        var _serialScanAccess4 = false;\n\n                                        if (enableSerial || updateChildItem.record_serial === false && updateChildItem.second_record_serial === false) {\n                                          _serialScanAccess4 = true;\n                                        } else {\n                                          if (updateChildItem.record_serial || updateChildItem.second_record_serial) {\n                                            var _eventType4 = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n\n                                            rejectLocalLog = false;\n\n                                            _this.setState({\n                                              serialRecordPopUpShow: true,\n                                              type: _eventType4\n                                            });\n                                          }\n                                        }\n\n                                        if (confirmProductConfirmation === false) {\n                                          if (general_settings.conf_code_product_instruction === \"always\") {\n                                            _this.setState({\n                                              productConfirmationCheck: true,\n                                              blockItemToScan: childItem,\n                                              blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                                            });\n\n                                            skipError = true;\n                                            blockScan = true;\n                                          } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                                            if (childItem.confirmation === true) {\n                                              _this.setState({\n                                                productConfirmationCheck: true,\n                                                blockItemToScan: childItem,\n                                                blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                                              });\n\n                                              skipError = true;\n                                              blockScan = true;\n                                            }\n                                          }\n                                        }\n\n                                        if (blockScan === false || confirmProductConfirmation === true) {\n                                          if (_serialScanAccess4) {\n                                            if (scanned_items.length > 0) {\n                                              scanned_items.map(function (scan, scanIndex) {\n                                                scan.barcodes.map(function (scancode) {\n                                                  var Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode;\n\n                                                  if (type === \"item_present\" ? updateChildItem.qty_remaining >= 1 : updateChildItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                                    if (Scancode === Barcode && Scancode === bar_code && scan.order_item_id === item.order_item_id) {\n                                                      if (scan.qty_remaining === 1 && scanpush === false) {\n                                                        if (type === \"item_present\") {\n                                                          updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                          updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                        } else {\n                                                          updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                          updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                        }\n\n                                                        updateProduct.child_items.splice(updatedChildItemIndex, 1);\n                                                        scanned_items.splice(scanIndex, 1);\n                                                        scanned_items.splice(0, 0, scan);\n\n                                                        _this.setState({\n                                                          typeScanState: updateChildItem.sku\n                                                        });\n\n                                                        scanpush = true;\n                                                        SKU = updateChildItem.sku;\n                                                        Log_count = barcode.packing_count;\n                                                        product_name = updateChildItem.name;\n                                                        qty_remain = updateChildItem.qty_remaining;\n                                                      } else {\n                                                        if (scan.qty_remaining > 0 && scanpush === false) {\n                                                          if (type === \"item_present\") {\n                                                            updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                            updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                            updateChildItem.qty_remaining === 0 && updateProduct.child_items.splice(index, 1);\n                                                          } else {\n                                                            updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                            updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                            updateChildItem.qty_remaining === 0 && updateProduct.child_items.splice(index, 1);\n                                                          }\n\n                                                          scanned_items.splice(scanIndex, 1);\n                                                          scanned_items.splice(0, 0, scan);\n\n                                                          _this.setState({\n                                                            typeScanState: updateChildItem.sku\n                                                          });\n\n                                                          scanpush = true;\n                                                          SKU = updateChildItem.sku;\n                                                          Log_count = barcode.packing_count;\n                                                          product_name = updateChildItem.name;\n                                                          qty_remain = updateChildItem.qty_remaining;\n                                                        }\n\n                                                        if (updateChildItem.qty_remaining === 0) {\n                                                          item.child_items.splice(scanAccess, 1);\n                                                          item.child_items.length === 0 && unscanned_items.splice(index, 1);\n                                                        }\n                                                      }\n                                                    } else {\n                                                      if (Barcode === bar_code && updateChildItem.qty_remaining >= 1) {\n                                                        if (updateChildItem.qty_remaining === 1 && scanpush === false) {\n                                                          if (type === \"item_present\") {\n                                                            updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                            updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                          } else {\n                                                            updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                            updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                          }\n\n                                                          scanned_items.splice(0, 0, updateChildItem);\n                                                          updateProduct.child_items.splice(updatedChildItemIndex, 1);\n\n                                                          _this.setState({\n                                                            typeScanState: updateChildItem.sku\n                                                          });\n\n                                                          scanpush = true;\n                                                          SKU = updateChildItem.sku;\n                                                          Log_count = barcode.packing_count;\n                                                          product_name = updateChildItem.name;\n                                                          qty_remain = updateChildItem.qty_remaining;\n                                                        } else {\n                                                          if (scanpush === false) {\n                                                            if (type === \"item_present\") {\n                                                              updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                              updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                            } else {\n                                                              updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                              updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                            }\n\n                                                            scanned_items.splice(0, 0, updateChildItem);\n\n                                                            _this.setState({\n                                                              typeScanState: updateChildItem.sku\n                                                            });\n\n                                                            scanpush = true;\n                                                            SKU = updateChildItem.sku;\n                                                            Log_count = barcode.packing_count;\n                                                            product_name = updateChildItem.name;\n                                                            qty_remain = updateChildItem.qty_remaining;\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                });\n                                              });\n                                            } else {\n                                              if (Barcode === bar_code && updateChildItem.qty_remaining >= parseInt(barcode.packing_count)) {\n                                                if (updateChildItem.qty_remaining === 1 && scanpush === false) {\n                                                  if (type === \"item_present\") {\n                                                    updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                    updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                  } else {\n                                                    updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                    updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                  }\n\n                                                  scanned_items.splice(0, 0, updateChildItem);\n                                                  updateProduct.child_items.splice(updatedChildItemIndex, 1);\n\n                                                  _this.setState({\n                                                    typeScanState: updateChildItem.sku\n                                                  });\n\n                                                  scanpush = true;\n                                                  SKU = updateChildItem.sku;\n                                                  Log_count = barcode.packing_count;\n                                                  product_name = updateChildItem.name;\n                                                  qty_remain = updateChildItem.qty_remaining;\n                                                } else {\n                                                  if (scanpush === false) {\n                                                    if (type === \"item_present\") {\n                                                      updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1;\n                                                      updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1;\n                                                    } else {\n                                                      updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count);\n                                                      updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count);\n                                                    }\n\n                                                    scanned_items.splice(0, 0, updateChildItem);\n\n                                                    _this.setState({\n                                                      typeScanState: updateChildItem.sku\n                                                    });\n\n                                                    scanpush = true;\n                                                    SKU = updateChildItem.sku;\n                                                    Log_count = barcode.packing_count;\n                                                    product_name = updateChildItem.name;\n                                                    qty_remain = updateChildItem.qty_remaining;\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n\n                                          if (unscanned_items.length > 0) {\n                                            if (_serialScanAccess4) {\n                                              if (type === \"item_present\") {\n                                                _this.responseAction(\"scan_success\");\n                                              } else {\n                                                if (remain_qty >= parseInt(barcode.packing_count)) {\n                                                  _this.responseAction(\"scan_success\");\n                                                } else {\n                                                  _this.alertBox(\"The multi-pack barcode scanned exceeds the quantity remaining\");\n                                                }\n                                              }\n                                            }\n                                          } else {\n                                            order_complete_flag = true;\n                                          }\n\n                                          itemFound = true;\n\n                                          if (_this.state.blockItemToScan && _this.state.blockItemToScan.name !== updateChildItem.name || updateChildItem.qty_remaining === 0) {\n                                            confirmProductConfirmation = false;\n                                          }\n                                        }\n                                      }\n                                    });\n                                  });\n                                });\n                              }\n                            });\n                          });\n                          item.qty_remaining === 0 && unscanned_items.splice(index, 1);\n                        }\n                      }\n                    }) : item && item.barcodes.map(function (barcode) {\n                      var Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode;\n\n                      if (Barcode === bar_code && scanpush === false) {\n                        var serialScanAccess = false;\n\n                        if (enableSerial || item.record_serial === false && item.second_record_serial === false) {\n                          serialScanAccess = true;\n                        } else {\n                          if (item.record_serial || item.second_record_serial) {\n                            var eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\";\n                            rejectLocalLog = false;\n\n                            _this.setState({\n                              serialRecordPopUpShow: true,\n                              type: eventType,\n                              forSerialRecord: bar_code\n                            });\n                          }\n                        }\n\n                        if (confirmProductConfirmation === false) {\n                          if (general_settings.conf_code_product_instruction === \"always\") {\n                            _this.setState({\n                              productConfirmationCheck: true,\n                              blockItemToScan: item,\n                              blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                            });\n\n                            skipError = true;\n                            blockScan = true;\n                          } else if (general_settings.conf_code_product_instruction === \"optional\") {\n                            if (item.confirmation === true) {\n                              _this.setState({\n                                productConfirmationCheck: true,\n                                blockItemToScan: item,\n                                blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\"\n                              });\n\n                              skipError = true;\n                              blockScan = true;\n                            }\n                          }\n                        }\n\n                        if (blockScan === false || confirmProductConfirmation === true) {\n                          if (serialScanAccess) {\n                            if (scanned_items.length > 0) {\n                              scanned_items.map(function (scan, scanItemIndex) {\n                                if (scan.order_item_id === item.order_item_id) {\n                                  scan.barcodes.map(function (scancode) {\n                                    var Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode;\n\n                                    if (type === \"item_present\" ? item.qty_remaining >= 1 : item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                      if (Scancode === Barcode && Barcode === bar_code && item.order_item_id === scan.order_item_id) {\n                                        if (scan.qty_remaining === 1 && scanpush === false) {\n                                          if (type === \"item_present\") {\n                                            item.qty_remaining = item.qty_remaining - 1;\n                                            item.scanned_qty = item.scanned_qty + 1;\n                                          } else {\n                                            if (item.qty_remaining > 0) {\n                                              item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                              item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                            }\n                                          }\n\n                                          unscanned_items.splice(scanAccess, 1);\n                                          scanned_items.splice(scanItemIndex, 1);\n                                          scanned_items.splice(0, 0, scan);\n\n                                          _this.setState({\n                                            typeScanState: item.sku\n                                          });\n\n                                          scanpush = true;\n                                          SKU = item.sku;\n                                          Log_count = barcode.packing_count;\n                                          product_name = item.name;\n                                          qty_remain = item.qty_remaining;\n                                        } else {\n                                          if (scan.qty_remaining > 1 && scanpush === false) {\n                                            if (type === \"item_present\" && item.qty_remaining > 0) {\n                                              item.qty_remaining = item.qty_remaining - 1;\n                                              item.scanned_qty = item.scanned_qty + 1;\n                                            } else {\n                                              if (item.qty_remaining > 0) {\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                              }\n                                            }\n\n                                            scanned_items.splice(scanItemIndex, 1);\n                                            scanned_items.splice(0, 0, scan);\n\n                                            _this.setState({\n                                              typeScanState: item.sku\n                                            });\n\n                                            scanpush = true;\n                                            SKU = item.sku;\n                                            Log_count = barcode.packing_count;\n                                            product_name = item.name;\n                                            qty_remain = item.qty_remaining;\n                                          }\n\n                                          if (item.qty_remaining === 0) {\n                                            unscanned_items.splice(scanAccess, 1);\n                                          }\n                                        }\n                                      } else {\n                                        if (Scancode !== bar_code && item.scanned_qty === 0) {\n                                          if (item.qty_remaining === 1 && scanpush === false) {\n                                            if (type === \"item_present\") {\n                                              item.qty_remaining = item.qty_remaining - 1;\n                                              item.scanned_qty = item.scanned_qty + 1;\n                                            } else {\n                                              if (item.qty_remaining > 0) {\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                              }\n                                            }\n\n                                            scanned_items.splice(0, 0, item);\n                                            unscanned_items.splice(scanAccess, 1);\n\n                                            _this.setState({\n                                              typeScanState: item.sku\n                                            });\n\n                                            scanpush = true;\n                                            SKU = item.sku;\n                                            Log_count = barcode.packing_count;\n                                            product_name = item.name;\n                                            qty_remain = item.qty_remaining;\n                                          } else {\n                                            if (scanpush === false && item.qty_remaining > 0) {\n                                              if (type === \"item_present\") {\n                                                item.qty_remaining = item.qty_remaining - 1;\n                                                item.scanned_qty = item.scanned_qty + 1;\n                                              } else {\n                                                if (item.qty_remaining > 0) {\n                                                  item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                                  item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                                }\n                                              }\n\n                                              scanned_items.splice(0, 0, item);\n\n                                              _this.setState({\n                                                typeScanState: item.sku\n                                              });\n\n                                              scanpush = true;\n                                              SKU = item.sku;\n                                              Log_count = barcode.packing_count;\n                                              product_name = item.name;\n                                              qty_remain = item.qty_remaining;\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  });\n                                } else {\n                                  if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                    if (item.qty_remaining === 1 && scanpush === false) {\n                                      if (type === \"item_present\") {\n                                        item.qty_remaining = item.qty_remaining - 1;\n                                        item.scanned_qty = item.scanned_qty + 1;\n                                      } else {\n                                        if (item.qty_remaining > 0) {\n                                          item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                          item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                        }\n                                      }\n\n                                      scanned_items.splice(0, 0, item);\n                                      unscanned_items.splice(scanAccess, 1);\n\n                                      _this.setState({\n                                        typeScanState: item.sku\n                                      });\n\n                                      scanpush = true;\n                                      SKU = item.sku;\n                                      Log_count = barcode.packing_count;\n                                      product_name = item.name;\n                                      qty_remain = item.qty_remaining;\n                                    } else {\n                                      if (scanpush === false && item.qty_remaining > 0) {\n                                        if (type === \"item_present\") {\n                                          item.qty_remaining = item.qty_remaining - 1;\n                                          item.scanned_qty = item.scanned_qty + 1;\n                                        } else {\n                                          if (item.qty_remaining > 0) {\n                                            item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                            item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                          }\n                                        }\n\n                                        scanned_items.splice(0, 0, item);\n\n                                        _this.setState({\n                                          typeScanState: item.sku\n                                        });\n\n                                        scanpush = true;\n                                        SKU = item.sku;\n                                        Log_count = barcode.packing_count;\n                                        product_name = item.name;\n                                        qty_remain = item.qty_remaining;\n                                      }\n                                    }\n                                  }\n                                }\n                              });\n                            } else {\n                              if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\n                                if (item.qty_remaining === 1 && scanpush === false) {\n                                  if (type === \"item_present\") {\n                                    item.qty_remaining = item.qty_remaining - 1;\n                                    item.scanned_qty = item.scanned_qty + 1;\n                                  } else {\n                                    if (item.qty_remaining > 0) {\n                                      item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                      item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                    }\n                                  }\n\n                                  scanned_items.splice(0, 0, item);\n                                  unscanned_items.splice(scanAccess, 1);\n\n                                  _this.setState({\n                                    typeScanState: item.sku\n                                  });\n\n                                  scanpush = true;\n                                  SKU = item.sku;\n                                  Log_count = barcode.packing_count;\n                                  product_name = item.name;\n                                  qty_remain = item.qty_remaining;\n                                } else {\n                                  if (scanpush === false && item.qty_remaining > 0) {\n                                    if (type === \"item_present\") {\n                                      item.qty_remaining = item.qty_remaining - 1;\n                                      item.scanned_qty = item.scanned_qty + 1;\n                                    } else {\n                                      if (item.qty_remaining > 0) {\n                                        item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count);\n                                        item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count);\n                                      }\n                                    }\n\n                                    scanned_items.splice(0, 0, item);\n\n                                    _this.setState({\n                                      typeScanState: item.sku\n                                    });\n\n                                    scanpush = true;\n                                    SKU = item.sku;\n                                    Log_count = barcode.packing_count;\n                                    product_name = item.name;\n                                    qty_remain = item.qty_remaining;\n                                  }\n                                }\n                              }\n                            }\n                          }\n\n                          if (unscanned_items.length > 0) {\n                            if (serialScanAccess) {\n                              if (type === \"item_present\") {\n                                _this.responseAction(\"scan_success\");\n                              } else {\n                                if (remain_qty >= parseInt(barcode.packing_count)) {\n                                  _this.responseAction(\"scan_success\");\n                                } else {\n                                  _this.alertBox(\"The multi-pack barcode scanned exceeds the quantity remaining\");\n                                }\n                              }\n                            }\n                          } else {\n                            order_complete_flag = true;\n                          }\n\n                          if (_this.state.blockItemToScan && _this.state.blockItemToScan.name !== item.name || item.qty_remaining === 0) {\n                            confirmProductConfirmation = false;\n                          }\n\n                          itemFound = true;\n                        }\n                      }\n                    });\n                  }\n                }\n\n                return item;\n              });\n\n              if (skipError === false) {\n                itemFound === false ? _this.responseAction(\"scan_fail\") : \"\";\n              }\n            }\n          } else {\n            order_complete_flag = true;\n          }\n\n          order.order.unscanned_items.map(function (noCode, index) {\n            if (noCode.barcodes && noCode.barcodes.length === 1 && noCode.barcodes[0].barcode === \"noBarcode\") {\n              noCode.barcodes = [];\n            }\n          });\n\n          if (_this.state.serialRecordInput !== \"\") {\n            temp_order = updateSerialLog;\n          } else {\n            temp_order[\"input\"] = event_code;\n            temp_order[\"id\"] = order_num;\n            temp_order[\"order_item_id\"] = unscanned_items.length > 0 ? unscanned_items[0].order_item_id : scanned_items.length > 0 ? scanned_items[0].order_item_id : \"\";\n            temp_order[\"time\"] = new Date();\n            temp_order[\"rem_qty\"] = remain_qty;\n            temp_order[\"qty_rem\"] = qty_remain;\n            temp_order[\"SKU\"] = SKU ? SKU : unscanned_items.length > 0 && unscanned_items[0].sku;\n            temp_order[\"Log_count\"] = Log_count;\n            temp_order[\"product_name\"] = product_name;\n            temp_order[\"name\"] = _this.state.userInfo && _this.state.userInfo.name ? _this.state.userInfo.name : \"\";\n            temp_order[\"actionBarcode\"] = ActionBarcode;\n\n            if (type !== \"item_present\") {\n              temp_order[\"state\"] = 'scanpack.rfp.default';\n            }\n\n            temp_order[\"increment_id\"] = order.order.increment_id;\n            temp_order[\"event\"] = _this.state.bar_code ? \"regular\" : \"click_scan\";\n            temp_order[\"updated_at\"] = order.order.updated_at;\n            event_scanned === true ? temp_order[\"event\"] = \"regular\" : temp_order[\"event\"];\n          }\n\n          if (stop_add_log !== true && temp_order !== undefined) {\n            if (order_complete_flag) {\n              _this.updateLog(temp_order, \"order_complete\");\n            } else {\n              _this.updateLog(temp_order, Action_Type);\n            }\n\n            if (_this.state.serialRecordInput === \"\" && rejectLocalLog) {\n              localLogs.splice(0, 0, temp_order);\n            }\n          }\n\n          _this.setState({\n            scanned_items: scanned_items,\n            serialRecordInput: \"\"\n          });\n\n          blockScan = false;\n        } else {\n          if (event.keyCode === 13 && bar_code === \"\" && _this.state.serialRecordInput === \"\") {\n            _this.responseAction(\"not_ready\");\n          }\n        }\n      }\n\n      try {} catch (error) {}\n\n      enableSerial = false;\n    };\n\n    _this.clickScan = function (item, fromActionBarcode) {\n      var scan_pack_settings = _this.state.scan_pack_settings;\n      var access = fromActionBarcode === \"actionbarcode\" ? scan_pack_settings.click_scan : scan_pack_settings.enable_click_sku;\n\n      if (access && item) {\n        if (item.click_scan_enabled === \"on\" || item.click_scan_enabled === \"on_with_confirmation\") {\n          if (item.click_scan_enabled === \"on_with_confirmation\") {\n            _this.setState({\n              clickScanConfirmation: true,\n              confirmationCheckItem: item\n            });\n          } else {\n            var barcode = item.barcodes && item.barcodes.length === 0 ? \"noBarcode\" : item.barcodes[0].barcode;\n\n            _this.scanBarcode(barcode, \"item_present\");\n          }\n        } else {\n          _this.alertBox(\"Click scan is not enable\");\n        }\n      }\n\n      _this.props.updateProductList(null);\n    };\n\n    _this.clickScanConfirmFun = function () {\n      var userInfo = _this.state.userInfo;\n      var item = _this.state.confirmationCheckItem;\n\n      if (item && userInfo) {\n        if (_this.state.userInfo.confirmation_code === _this.state.clickScanConfirmInput) {\n          var barcode = item.barcodes[0].barcode;\n\n          _this.scanBarcode(barcode, \"item_present\");\n\n          _this.setState({\n            clickScanConfirmation: false,\n            confirmationCheckItem: null,\n            clickScanConfirmInput: \"\"\n          });\n        } else {\n          if (_this.state.general_settings && _this.state.general_settings.strict_cc) {\n            _this.setState({\n              errorMessageClickScanConfirmation: true\n            });\n          } else {\n            var _barcode = item.barcodes[0].barcode;\n\n            _this.scanBarcode(_barcode, \"item_present\");\n\n            _this.setState({\n              clickScanConfirmation: false,\n              confirmationCheckItem: null,\n              clickScanConfirmInput: \"\"\n            });\n          }\n        }\n      }\n    };\n\n    _this.handleClickScanConfirmInput = function (e) {\n      _this.setState({\n        clickScanConfirmInput: e,\n        errorMessageClickScanConfirmation: false\n      });\n    };\n\n    _this.updateLog = function _callee8(logData, type) {\n      var temp, getItem, logging, LoggingArray, indexToRemove, numberToRemove, getTemp, arr;\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              temp = [];\n              _context8.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logsArray\"));\n\n            case 3:\n              getItem = _context8.sent;\n              _context8.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"Logging\"));\n\n            case 6:\n              logging = _context8.sent;\n              LoggingArray = JSON.parse(logging);\n\n              if (LoggingArray && LoggingArray.length >= 80) {\n                indexToRemove = 0;\n                numberToRemove = 1;\n                LoggingArray.splice(indexToRemove, numberToRemove);\n              }\n\n              LoggingArray && LoggingArray.length > 0 ? LoggingArray.push(logData) : LoggingArray = [logData];\n              getTemp = getItem !== \"undefined\" && JSON.parse(getItem);\n              arr = getTemp ? temp.concat(getTemp) : temp;\n              arr.push(logData);\n              _context8.next = 15;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"logsArray\", JSON.stringify(arr)));\n\n            case 15:\n              if (logData && logData.event === \"scanned\") {\n                _this.multipleTime();\n              }\n\n              if (type === \"issue\") {\n                _this.multipleTime();\n\n                _this.nav(_this.state.order);\n              }\n\n              if (type === \"RESTART\") {\n                _this.multipleTime();\n\n                _this.nav(_this.state.order);\n              }\n\n              if (type === \"order_complete\") {\n                if (_this.state.scan_pack_settings.post_scanning_option === \"None\") {\n                  _this.responseAction(\"complete_order\");\n                }\n              }\n\n              if (type === \"recordTracking\") {\n                _this.responseAction(\"complete_order\");\n\n                _this.setState({\n                  trackingOrderInput: \"\"\n                });\n              }\n\n              _context8.next = 22;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"Logging\", JSON.stringify(LoggingArray)));\n\n            case 22:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.close = function (type) {\n      if (_this.state.order) {\n        var scan_pack_settings = _this.state.scan_pack_settings;\n\n        if (type === \"show_customer_notes\") {\n          scan_pack_settings['show_customer_notes'] = false;\n        }\n\n        if (type === \"show_internal_notes\") {\n          scan_pack_settings['show_internal_notes'] = false;\n        }\n\n        if (type === \"notes_toPacker\") {\n          _this.setState({\n            notes_toPacker_enable: false\n          });\n        }\n\n        _this.setState({\n          scan_pack_settings: scan_pack_settings\n        });\n      }\n    };\n\n    _this.leaveComponent = function _callee9(order, type) {\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (type === \"submitLog\") {\n                _this.multipleTime();\n              }\n\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.updateDimensions = function () {\n      _this.setState({\n        windowWidth: window.innerWidth\n      });\n    };\n\n    _this.hideShipment = function () {\n      _this.setState({\n        showshipments: false\n      });\n    };\n\n    _this.callShipmentOrder = function (order) {\n      var shipmentOrder = _this.state.shipmentOrder;\n\n      if (order.increment_id !== \"\") {\n        callOrderSuccess = true;\n        shipmentOrder.input = order.increment_id;\n\n        _this.hitApi(shipmentOrder);\n      }\n    };\n\n    _this.hitApi = function (shipmentOrder) {\n      if (Platform.OS === \"ios\" || Platform.OS === \"android\") {\n        _this.InternetCheck(shipmentOrder);\n      } else {\n        _this.props.SearchScanpackOrder(shipmentOrder);\n      }\n    };\n\n    _this.InternetCheck = function _callee10(shipmentOrder) {\n      var connectionInfo;\n      return _regeneratorRuntime.async(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regeneratorRuntime.awrap(NetInfo.fetch());\n\n            case 2:\n              connectionInfo = _context10.sent;\n\n              if (connectionInfo.isConnected) {\n                _this.props.SearchScanpackOrder(shipmentOrder);\n              } else {\n                _this.setState({\n                  errorMessageShow: true\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.updateSerialLog = function _callee11(logData) {\n      var temp, getItem, getTemp, arr;\n      return _regeneratorRuntime.async(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              temp = [];\n              _context11.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"logsArray\"));\n\n            case 3:\n              getItem = _context11.sent;\n              getTemp = getItem !== \"undefined\" && JSON.parse(getItem);\n              arr = getTemp ? temp.concat(getTemp) : temp;\n              arr.push(logData);\n              _context11.next = 9;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"logsArray\", JSON.stringify(arr)));\n\n            case 9:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.allTypeScan = function (type, item, recordSerial) {\n      if (type === \"clickscan\") {\n        _this.clickScan(item);\n      }\n\n      if (type === \"barcode\") {\n        _this.scanBarcode();\n\n        _this.setState({\n          bar_code: \"\"\n        });\n      }\n\n      if (type === \"scan_all_item\") {\n        _this.scanAllItem(\"scan_all_item\");\n      }\n\n      if (type === \"submit_type_scan\") {\n        _this.submitTypeScan(\"submit_type_scan\");\n      }\n    };\n\n    _this.handleSerialRecordInput = function (e) {\n      _this.setState({\n        serialRecordInput: e\n      });\n    };\n\n    _this.navButton = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedItemShow: false,\n        nextItemShow: true,\n        scannedItemShow: false\n      }, function () {\n        console.log(\"Update\");\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.navButtonLeft = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedItemShow: true,\n        nextItemShow: false,\n        scannedItemShow: false\n      }, function () {\n        console.log(\"Update\");\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.showScannedList = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedList: false,\n        scannedList: true,\n        logList: false\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.showUnscannedList = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedList: true,\n        scannedList: false,\n        logList: false\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.showLogList = function () {\n      _this.setState({\n        reRenderFocus: true,\n        unscannedList: false,\n        scannedList: false,\n        logList: true\n      });\n\n      setTimeout(function () {\n        this.setState({\n          reRenderFocus: false,\n          message: \"\"\n        });\n      }.bind(_assertThisInitialized(_this)), 1);\n    };\n\n    _this.closeNotes = function () {\n      _this.setState({\n        notes_toPackerFlag: false,\n        notes_internalFlag: false,\n        customer_commentsFlag: false\n      });\n\n      _this.currentFocus();\n    };\n\n    _this.assignUniquebarcode = function (from) {\n      _this.setState({\n        shareBarcodeShow: false,\n        alias: false,\n        addBarcodeWindow: false,\n        addBarcodeText: \"\"\n      });\n    };\n\n    _this.proceedAliasing = function () {\n      var alias_product_data_id = _this.state.updateProduct.alias_product_data.id;\n      var current_product_data_id = [];\n      current_product_data_id.push(_this.state.updateProduct.current_product_data.id);\n      var details = {\n        product_alias_ids: current_product_data_id\n      };\n\n      _this.props.updateProductAlias(alias_product_data_id, details);\n\n      _this.props.SearchScanpackOrder(\"\", false);\n\n      updateProductInfoSuccess = true;\n      updateFromProductSuccess = true;\n      updateAliasSuccess = true;\n    };\n\n    _this.sameBarcode = function () {\n      var newHash = {\n        value: _this.state.addBarcodeText,\n        var: \"barcode\",\n        id: _this.state.addBarcodeItem.product_id,\n        permit_same_barcode: true\n      };\n\n      _this.props.updateProductList(newHash);\n\n      _this.setState({\n        updateProductApiCall: new Date(),\n        shareBarcodeShow: false,\n        alias: false\n      });\n\n      updateProductApi = true;\n    };\n\n    _this.state = {\n      shipmentOrder: {\n        \"input\": \"\",\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null,\n        \"app\": \"app\"\n      },\n      data: {\n        \"input\": \"\",\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null\n      },\n      orderList: {\n        \"filter\": \"awaiting\",\n        \"order\": \"DESC\",\n        \"limit\": \"1\",\n        \"offset\": \"0\",\n        \"app\": \"app\",\n        \"count\": 0\n      },\n      orderDetail: {\n        \"filter\": \"awaiting\",\n        \"order\": \"DESC\",\n        \"limit\": \"1\",\n        \"offset\": \"0\",\n        \"type\": \"app\"\n      },\n      type: \"\",\n      log: [],\n      localLogs: [],\n      firstScreen: true,\n      secondScreen: false,\n      thirdScreen: false,\n      logScreen: false,\n      bar_code: \"\",\n      alert: false,\n      notes_fromPacker: \"\",\n      typeScanAlert: false,\n      typeScanCount: \"\",\n      notes_toPacker_enable: true,\n      showshipments: true,\n      errorMessage: \"Please check the internet connection\",\n      errorMessageShow: false,\n      matchOrderShow: true,\n      typeScanState: \"\",\n      message: \"\",\n      unscannedItemShow: false,\n      nextItemShow: true,\n      scannedItemShow: false,\n      typeScanDeductCountState: \"\",\n      issueFlag: false,\n      noteFlag: false,\n      trackingOrderInput: \"\",\n      trackingNumberView: false,\n      postScanningFieldLabel: \"\",\n      postScanningMessageDetail: \"\",\n      timeSecond: false,\n      postScan: false,\n      serialRecordPopUpShow: false,\n      serialRecordInput: \"\",\n      serialRecordTwo: \"\",\n      clickScanConfirmInput: \"\",\n      serialRecordOne: \"\",\n      notes_toPackerFlag: true,\n      notes_internalFlag: true,\n      customer_commentsFlag: true,\n      scanSuccessAction: false,\n      scanFailAction: false,\n      orderCompleteAction: false,\n      responseShowAction: false,\n      errorMessageClickScanConfirmation: false,\n      loadOrderSpinner: false,\n      loader: false,\n      unscannedItemPerPage: 1,\n      scannedItemPerPage: 1,\n      productConfirmationCheck: false,\n      productConfirmationCheckInput: \"\",\n      errorMessageProductConfirmationCheck: false,\n      blockScan: false,\n      orderConfirmPopUp: false,\n      OrderConfirmationCheckInput: \"\",\n      errorMessageOrderConfirmationCheck: false,\n      popUpModelShow: false,\n      messageTypeSuccess: false,\n      reRenderFocus: false,\n      clickScanConfirmation: false,\n      focusBarcode: false,\n      scannedList: true,\n      unscannedList: false,\n      logList: false,\n      addBarcodeWindow: false,\n      alias: false,\n      Product: [],\n      windowWidth: Dimensions.get('window').width\n    };\n    _this.barcode = React.createRef();\n    _this.serialRecord = React.createRef();\n    _this.multipleTime = _this.multipleTime.bind(_assertThisInitialized(_this));\n    _this.responseAction = _this.responseAction.bind(_assertThisInitialized(_this));\n    _this.redirectFun = _this.redirectFun.bind(_assertThisInitialized(_this));\n    _this.InputField = React.createRef();\n    return _this;\n  }\n\n  _createClass(ScanPackItem, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('resize', this.updateDimensions);\n      this.setState({\n        loader: true\n      });\n      this.getUserInfo();\n      this.apiCall();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var searchOrder = this.props.searchOrder;\n      var searchData = searchOrder && searchOrder.data;\n      var asyncData = this.props && this.props.bothSettings;\n      var updateLog = this.props && this.props.updateLog;\n      var order = {\n        \"order\": this.props && this.props.route.params && this.props.route.params.data\n      };\n      var setFocus = this.state.orderConfirmPopUp === false && this.state.addBarcodeWindow === false && this.state.responseShowAction === false && this.state.typeScanAlert === false && this.state.popUpModelShow === false && this.state.reRenderFocus === false && this.state.serialRecordPopUpShow === false && this.state.clickScanConfirmation === false && this.state.productConfirmationCheck === false;\n\n      if (setFocus === true || setFocus === true && this.state.focusBarcode) {\n        try {\n          this.InputField.current.focus();\n        } catch (error) {}\n      }\n\n      if (this.props && this.props.route && this.props.route.params && this.props.route.params.data && this.props.route.params.data.from === \"productDetailPage\" && this.props.route.params.data !== this.state.productDetail) {\n        var data = {\n          \"input\": this.props.route.params.data.increment_id,\n          \"state\": \"scanpack.rfo\",\n          \"id\": null,\n          \"box_id\": null,\n          \"store_order_id\": null,\n          \"app\": \"app\"\n        };\n        updateFromProductSuccess = true;\n        this.props.SearchScanpackOrder(data);\n        this.setState({\n          productDetail: this.props.route.params.data,\n          loader: true,\n          apiCallTime: new Date()\n        });\n      }\n\n      if (updateFromProductSuccess && this.props && this.props.searchOrder && this.props.searchOrder) {\n        var searchResult = this.props.searchOrder && this.props.searchOrder.searchOrder;\n\n        var _order = searchResult && searchResult.data.order && searchResult.data.order[0];\n\n        if (searchResult) {\n          if (searchResult.matched) {\n            if (searchResult.data.status === \"awaiting\" && this.props.route.params.data.increment_id === this.props.searchOrder.searchOrder.data.order_num) {\n              this.setState({\n                oldOne: this.props.searchOrder,\n                loader: false,\n                order: this.props.searchOrder.searchOrder.data.order[0].scan_hash.data\n              });\n              updateFromProductSuccess = false;\n            }\n\n            if (searchResult.data.status === \"onhold\" && this.props.route.params.data.increment_id === this.props.searchOrder.searchOrder.data.order_num) {\n              this.setState({\n                oldOne: this.props.searchOrder,\n                loader: false,\n                order: this.props.searchOrder.searchOrder.data.order[0].scan_hash.data\n              });\n              updateFromProductSuccess = false;\n            }\n          }\n        }\n      }\n\n      if (this.props && this.props.route && this.props.route.params && this.props.route.params.data && this.props.route.params.data.from === \"orderDetailPage\" && this.props.route.params.data !== this.state.detailData) {\n        this.setState({\n          order: this.props.route.params.data,\n          detailData: this.props.route.params.data,\n          notes_toPackerFlag: true,\n          notes_internalFlag: true,\n          customer_commentsFlag: true\n        });\n        updateFromOrderDetailPage = false;\n      }\n\n      if (this.props && this.props.bothSettings && this.props.bothSettings !== this.state.bothSettings) {\n        this.setState({\n          scanpackSettings: this.props.bothSettings.data.data.scanpack_setting,\n          generalSettings: this.props.bothSettings.data.data.general_setting,\n          scan_pack_settings: this.props.bothSettings.data.data.scanpack_setting,\n          general_settings: this.props.bothSettings.data.data.general_setting,\n          bothSettings: this.props.bothSettings,\n          loader: false\n        });\n\n        if (this.props.bothSettings.data.data.general_setting.conf_req_on_notes_to_packer === \"always\") {\n          this.setState({\n            orderConfirmPopUp: true\n          });\n        }\n\n        if (this.props.bothSettings.data.data.general_setting.conf_req_on_notes_to_packer === \"optional\") {\n          if (order.order.order.note_confirmation) {\n            this.setState({\n              orderConfirmPopUp: true\n            });\n          }\n        }\n      }\n\n      if (updateProductInfoSuccess === true && this.props && this.props.updateProduct && this.props.updateProduct.data) {\n        updateProductInfoSuccess = false;\n        this.setState({\n          alias: false\n        });\n\n        if (this.props.route.params.data.order) {\n          var _data = {\n            \"input\": this.props.route.params.data.order.increment_id,\n            \"state\": \"scanpack.rfo\",\n            \"id\": null,\n            \"box_id\": null,\n            \"store_order_id\": null,\n            \"app\": \"app\"\n          };\n          this.props.SearchScanpackOrder(_data);\n          updateFromProductSuccess = true;\n        }\n      }\n\n      if (asyncData !== \"\") {\n        var convert = asyncData;\n        var scData = convert && convert.data && convert.data.data && convert.data.data.scanpack_setting;\n        var gsData = convert && convert.data && convert.data.data && convert.data.data.general_setting;\n\n        if (ScanPackSettingsAccess === false && scData) {\n          ScanPackSettingsAccess = true;\n\n          if (scData && scData.post_scanning_option !== \"None\") {\n            var type = scData.post_scanning_option;\n\n            if (type === \"Record\") {\n              this.setState({\n                notes_toPackerFlag: false,\n                notes_internalFlag: false,\n                customer_commentsFlag: false,\n                postScanningFieldLabel: \"Scan Tracking Number for Order \" + order.order.order.increment_id,\n                postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\n              });\n            }\n\n            if (type === \"Verify\") {\n              var postScanMessage = \"\";\n\n              if (order.order.order.tracking_num !== null && order.order.order.tracking_num !== \"\") {\n                postScanMessage = \"Please scan the shipping label.\";\n              } else {\n                postScanMessage = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\";\n              }\n\n              this.setState({\n                notes_toPackerFlag: false,\n                notes_internalFlag: false,\n                customer_commentsFlag: false,\n                postScanningFieldLabel: \"Scan Shipping Label for Order \" + order.order.order.increment_id,\n                postScanningMessageDetail: postScanMessage\n              });\n            }\n          }\n\n          this.setState({\n            scan_pack_settings: scData\n          });\n          this.props.GetItem(\"GeneralSetting\");\n        }\n\n        if (GeneralSettingAccess === false && gsData !== undefined) {\n          GeneralSettingAccess = true;\n          this.setState({\n            general_settings: gsData\n          });\n        }\n      }\n\n      if (this.props.updateLog.time !== this.state.logTime) {\n        if (this.props.updateLog && this.props.updateLog.logs && this.props.updateLog.logs.status === \"OK\" && this.props.updateLog.updateLog && this.props.updateLog.time) {\n          this.setState({\n            logTime: this.props.updateLog.time\n          });\n        }\n      }\n\n      if (this.props.route.params.restart === true) {\n        this.props.route.params.restartButton;\n      }\n\n      if (updateProductApi === true && this.props && this.props.updateProduct && this.props.updateProduct.data !== \"\" && this.props.updateProduct.time >= this.state.updateProductApiCall) {\n        updateProductApi = false;\n        var productID = this.state.addBarcodeItem && this.state.addBarcodeItem.product_id;\n        var _order2 = this.state.order;\n\n        if (this.props.updateProduct.data.show_alias_popup) {\n          this.setState({\n            alias: true,\n            addBarcodeWindow: false,\n            Product: this.props.updateProduct.data,\n            updateProduct: this.props.updateProduct.data\n          });\n        } else {\n          _order2.order.unscanned_items && _order2.order.unscanned_items.length > 0 && _order2.order.unscanned_items.map(function (item, index) {\n            if (item.child_items.length > 0) {\n              item.child_items.map(function (child, index) {\n                if (child.product_id === productID) {\n                  child.barcodes = [{\n                    barcode: _this2.state.addBarcodeText,\n                    created_at: \"\",\n                    id: 0,\n                    packing_count: \"1\",\n                    product_id: productID,\n                    updated_at: new Date()\n                  }];\n                }\n              });\n            } else {\n              if (item.product_id === productID) {\n                item.barcodes = [{\n                  barcode: _this2.state.addBarcodeText,\n                  created_at: \"\",\n                  id: 0,\n                  packing_count: \"1\",\n                  product_id: productID,\n                  updated_at: new Date()\n                }];\n              }\n            }\n          });\n          var unItem = _order2.order.unscanned_items.length > 0 && _order2.order.unscanned_items[0];\n          var item = unItem.child_items.length > 0 ? unItem.child_items[0] : unItem;\n          this.clickScan(item);\n          this.setState({\n            addBarcodeWindow: false,\n            addBarcodeText: \"\",\n            addBarcodeItem: \"\",\n            order: _order2,\n            updateProductApiCall: \"\"\n          });\n        }\n      }\n\n      if (updateAliasSuccess && this.props && this.props.updateAlias) {\n        if (this.props.updateAlias.status) {\n          var fetchListData = this.state.shipmentOrder;\n          fetchListData.input = this.state.order.order.increment_id;\n          this.props.SearchScanpackOrder(fetchListData);\n          this.setState({\n            updateProductApiCall: new Date()\n          });\n          updateAliasSuccess = false;\n          updateProductInfoSuccess = true;\n          updateFromProductSuccess = true;\n        } else {}\n      }\n    }\n  }, {\n    key: \"redirectFun\",\n    value: function redirectFun() {\n      if (this.state.order && this.state.order.order && this.state.order.order.unscanned_items && this.state.order.order.unscanned_items.length === 0) {\n        this.props.SearchScanpackOrder(\"\", false);\n        this.props.navigation.navigate(\"ScanPack\", {\n          update: true,\n          time: new Date()\n        });\n      }\n    }\n  }, {\n    key: \"trackingSubmit\",\n    value: function trackingSubmit(trackingNumber) {\n      var setting = this.state.scan_pack_settings;\n      var trackingLength = trackingNumber.length;\n      var temp_order = {};\n      var num = \"\";\n      var order = this.state.order;\n      var order_num = order.order.id;\n      var localLogs = this.state.localLogs;\n      var strict_cc = this.state.general_settings.strict_cc;\n\n      if (setting.post_scanning_option !== \"None\") {\n        if (this.state.timeSecond === true) {\n          var type = setting.post_scanning_option_second;\n\n          if (type === \"Record\") {\n            if (setting.tracking_number_validation_enabled) {\n              var prefix = setting.tracking_number_validation_prefixes.split(\",\");\n              var validate = \"\";\n              var scan = false;\n              var scanAccess = false;\n              prefix.map(function (prefix, index) {\n                var prefixLength = prefix.length;\n                validate = trackingNumber.slice(0, prefixLength);\n\n                if (scanAccess === false) {\n                  if (validate === prefix) {\n                    temp_order[\"id\"] = order_num;\n                    temp_order[\"input\"] = trackingNumber;\n                    temp_order[\"state\"] = 'scanpack.rfp.default';\n                    temp_order[\"event\"] = \"record\";\n                    temp_order[\"updated_at\"] = order.order.updated_at;\n                    temp_order[\"increment_id\"] = order.order.increment_id;\n                    localLogs.splice(0, 0, temp_order);\n                    scan = true;\n                    scanAccess = true;\n                  } else {\n                    scan = false;\n                  }\n                }\n              });\n\n              if (scan === true) {\n                localLogs.splice(0, 0, temp_order);\n                this.updateLog(temp_order, \"recordTracking\");\n              } else {\n                this.responseAction(\"scan_fail\");\n                this.alertBox(\"The tracking number barcode you scanned does not match any of the saved prefixes. Please check your tracking validation settings or contact an admin.\", true);\n              }\n            } else {\n              temp_order[\"id\"] = order_num;\n              temp_order[\"input\"] = trackingNumber;\n              temp_order[\"state\"] = 'scanpack.rfp.default';\n              temp_order[\"event\"] = \"record\";\n              temp_order[\"updated_at\"] = order.order.updated_at;\n              temp_order[\"increment_id\"] = order.order.increment_id;\n              localLogs.splice(0, 0, temp_order);\n              this.updateLog(temp_order, \"recordTracking\");\n            }\n          }\n\n          if (type === \"Verify\") {\n            var trackNumber = order.order.tracking_num;\n\n            if (setting.post_scanning_option === \"Record\" && setting.post_scanning_option_second === \"Verify\") {\n              trackNumber = 123;\n            }\n\n            if (trackNumber !== null) {\n              var _scan = false;\n\n              if (this.state.scanSecondTime === true) {\n                if (trackingNumber === this.state.userInfo.confirmation_code || strict_cc === false && trackingNumber === \"\") {\n                  _scan = true;\n                }\n              }\n\n              if (trackingNumber === trackNumber || _scan === true) {\n                temp_order[\"id\"] = order_num;\n                temp_order[\"input\"] = trackingNumber;\n                temp_order[\"state\"] = this.state.trackingStateSecond === \"scanpack.rfp.no_match\" ? \"scanpack.rfp.no_match\" : \"scanpack.rfp.verifying\";\n                temp_order[\"state\"] = temp_order[\"event\"] = \"verify\";\n                temp_order[\"updated_at\"] = order.order.updated_at;\n                temp_order[\"increment_id\"] = order.order.increment_id;\n                localLogs.splice(0, 0, temp_order);\n                this.updateLog(temp_order, \"recordTracking\");\n                this.setState({\n                  trackingStateSecond: \"\"\n                });\n              } else {\n                this.responseAction(\"scan_fail\");\n                this.setState({\n                  trackingStateSecond: \"scanpack.rfp.no_match\",\n                  scanSecondTime: true,\n                  postScanningMessageDetail: \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\n                });\n              }\n            } else {\n              var message = \"\";\n\n              if (order.order.tracking_num !== null && order.order.tracking_num !== \"\") {\n                message = \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\";\n              } else {\n                message = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\";\n              }\n\n              if (this.state.postScanSecond) {\n                if (trackingNumber === this.state.userInfo.confirmation_code || strict_cc === false && trackingNumber === \"\") {\n                  temp_order[\"id\"] = order_num;\n                  temp_order[\"input\"] = trackingNumber;\n                  temp_order[\"state\"] = 'scanpack.rfp.no_tracking_info';\n                  temp_order[\"event\"] = \"verify\";\n                  temp_order[\"updated_at\"] = order.order.updated_at;\n                  temp_order[\"increment_id\"] = order.order.increment_id;\n                  localLogs.splice(0, 0, temp_order);\n                  this.updateLog(temp_order, \"recordTracking\");\n                  this.setState({\n                    postScanSecond: false\n                  });\n                } else {\n                  this.responseAction(\"scan_fail\");\n                }\n              }\n\n              this.setState({\n                postScanSecond: true,\n                postScanningMessageDetail: message\n              });\n            }\n          }\n        } else {\n          var _type = setting.post_scanning_option;\n\n          if (_type === \"Record\") {\n            if (setting.tracking_number_validation_enabled) {\n              var _prefix = setting.tracking_number_validation_prefixes.split(\",\");\n\n              var _validate = \"\";\n              var _scan2 = false;\n              var _scanAccess = false;\n\n              _prefix.map(function (prefix, index) {\n                var prefixLength = prefix.length;\n                _validate = trackingNumber.slice(0, prefixLength);\n\n                if (_scanAccess === false) {\n                  if (_validate === prefix) {\n                    temp_order[\"id\"] = order_num;\n                    temp_order[\"input\"] = trackingNumber;\n                    temp_order[\"state\"] = 'scanpack.rfp.default';\n                    temp_order[\"event\"] = \"record\";\n                    temp_order[\"updated_at\"] = order.order.updated_at;\n                    temp_order[\"increment_id\"] = order.order.increment_id;\n                    _scan2 = true;\n                    _scanAccess = true;\n                  } else {\n                    _scan2 = false;\n                  }\n                }\n              });\n\n              if (_scan2 === true) {\n                localLogs.splice(0, 0, temp_order);\n                this.updateLog(temp_order, \"recordTracking\");\n\n                if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                  this.postScanFunction(setting.post_scanning_option_second, true);\n                  this.setState({\n                    trackingOrderInput: \"\"\n                  });\n                  this.updateLog(temp_order, \"tracking\");\n                } else {\n                  this.updateLog(temp_order, \"recordTracking\");\n                }\n              } else {\n                this.responseAction(\"scan_fail\");\n                this.alertBox(\"The tracking number barcode you scanned does not match any of the saved prefixes. Please check your tracking validation settings or contact an admin.\", true);\n              }\n            } else {\n              temp_order[\"id\"] = order_num;\n              temp_order[\"input\"] = trackingNumber;\n              temp_order[\"state\"] = 'scanpack.rfp.default';\n              temp_order[\"event\"] = \"record\";\n              temp_order[\"updated_at\"] = order.order.updated_at;\n              temp_order[\"increment_id\"] = order.order.increment_id;\n\n              if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                this.postScanFunction(setting.post_scanning_option_second, true);\n                this.setState({\n                  trackingOrderInput: \"\"\n                });\n                this.updateLog(temp_order, \"tracking\");\n              } else {\n                localLogs.splice(0, 0, temp_order);\n                this.updateLog(temp_order, \"recordTracking\");\n              }\n            }\n          }\n\n          if (_type === \"Verify\") {\n            var _trackNumber = order.order.tracking_num;\n\n            if (order.order.tracking_num !== null) {\n              var _scan3 = false;\n\n              if (this.state.scanSecondTime === true) {\n                if (trackingNumber === this.state.userInfo.confirmation_code || strict_cc === false && trackingNumber === \"\") {\n                  _scan3 = true;\n                }\n              }\n\n              if (trackingNumber.length > order.order.tracking_num.length || trackingNumber.length === order.order.tracking_num.length) {\n                var tempNum = trackingLength - order.order.tracking_num.length;\n                num = trackingNumber.slice(tempNum);\n              }\n\n              if (num === order.order.tracking_num || _scan3 === true) {\n                temp_order[\"id\"] = order_num;\n                temp_order[\"input\"] = trackingNumber;\n                temp_order[\"state\"] = this.state.trackingState === \"scanpack.rfp.no_match\" ? \"scanpack.rfp.no_match\" : \"scanpack.rfp.verifying\";\n                temp_order[\"event\"] = \"verify\";\n                temp_order[\"updated_at\"] = order.order.updated_at;\n                temp_order[\"increment_id\"] = order.order.increment_id;\n\n                if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                  this.postScanFunction(setting.post_scanning_option_second, true);\n                  this.updateLog(temp_order, \"tracking\");\n                } else {\n                  localLogs.splice(0, 0, temp_order);\n                  this.updateLog(temp_order, \"recordTracking\");\n                }\n              } else {\n                this.responseAction(\"scan_fail\");\n                this.setState({\n                  trackingState: \"scanpack.rfp.no_match\",\n                  scanSecondTime: true,\n                  postScanningMessageDetail: \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\n                });\n              }\n            } else {\n              var _message = \"\";\n\n              if (order.order.tracking_num !== null && order.order.tracking_num !== \"\") {\n                _message = \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\";\n              } else {\n                _message = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\";\n              }\n\n              if (this.state.postScan) {\n                if (trackingNumber === this.state.userInfo.confirmation_code || strict_cc === false && trackingNumber === \"\") {\n                  temp_order[\"id\"] = order_num;\n                  temp_order[\"input\"] = trackingNumber;\n                  temp_order[\"state\"] = 'scanpack.rfp.no_tracking_info';\n                  temp_order[\"event\"] = \"verify\";\n                  temp_order[\"updated_at\"] = order.order.updated_at;\n                  temp_order[\"increment_id\"] = order.order.increment_id;\n\n                  if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\n                    this.postScanFunction(setting.post_scanning_option_second, true);\n                    this.setState({\n                      postScan: false\n                    });\n                    this.updateLog(temp_order, \"tracking\");\n                  } else {\n                    localLogs.splice(0, 0, temp_order);\n                    this.updateLog(temp_order, \"recordTracking\");\n                    this.setState({\n                      postScan: false\n                    });\n                  }\n                } else {\n                  this.responseAction(\"scan_fail\");\n                  this.setState({\n                    postScanningMessageDetail: _message\n                  });\n                }\n              }\n\n              this.setState({\n                postScan: true,\n                postScanningMessageDetail: _message\n              });\n            }\n          }\n        }\n      }\n\n      this.setState({\n        trackingOrderInput: \"\"\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var Order = this.state.order;\n      searchOrderCheck = false;\n      ScanPackSettingsAccess = false;\n      GeneralSettingAccess = false;\n      orderSaveSuccess = false;\n      updateLogSuccess = true;\n      updateFromProductSuccess = false;\n\n      if (Order) {\n        this.leaveComponent(Order);\n        this.setState({\n          oldOne: null\n        });\n        this.props.SearchScanpackOrder(\"\", false);\n      }\n\n      window.removeEventListener('resize', this.updateDimensions);\n    }\n  }, {\n    key: \"enableToggle\",\n    value: function enableToggle(e) {\n      if (this.props.route && this.props.route.params) {\n        if (e === 1) {\n          this.props.route.params.item(true);\n        } else {\n          this.props.route.params.item(false);\n        }\n      }\n    }\n  }, {\n    key: \"serialLogUpdate\",\n    value: function serialLogUpdate(type, item, recordFrom, order_id, both) {\n      var temp = {};\n      var localLog = {};\n      var localLogs = this.state.localLogs;\n      temp[\"clicked\"] = type === \"clickscan\" ? true : false;\n      temp[\"barcode\"] = item.barcodes[0].barcode;\n      temp[\"order_id\"] = order_id;\n      temp[\"order_item_id\"] = item.order_item_id;\n      temp[\"product_lot_id\"] = null;\n      temp[\"ask\"] = recordFrom === \"recordOne\" ? true : false;\n      temp[\"ask_2\"] = recordFrom === \"recordTwo\" ? true : false;\n      temp[\"product_id\"] = item.product_id;\n\n      if (both === false) {\n        temp[\"is_scan\"] = true;\n        temp[\"second_serial\"] = false;\n      } else {\n        if (recordFrom === \"recordOne\") {\n          temp[\"is_scan\"] = false;\n          temp[\"second_serial\"] = false;\n        } else {\n          temp[\"is_scan\"] = true;\n          temp[\"second_serial\"] = true;\n        }\n      }\n\n      temp[\"box_id\"] = null;\n      temp[\"serial\"] = this.state.serialRecordInput;\n      temp[\"event\"] = \"serial_scan\";\n      updateSerialLog = temp;\n      localLog[\"order_item_id\"] = item && item.order_item_id;\n      localLog[\"time\"] = new Date();\n      localLog[\"event\"] = \"serial_scan\";\n      localLog[\"SKU\"] = item.sku ? item.sku : \"\";\n      localLog[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\";\n\n      if (both) {\n        if (recordFrom === \"recordTwo\") {\n          localLogs.splice(0, 0, localLog);\n        }\n      } else {\n        localLogs.splice(0, 0, localLog);\n      }\n\n      this.updateSerialLog(temp);\n    }\n  }, {\n    key: \"serialRecordFun\",\n    value: function serialRecordFun() {\n      var Order = this.state.order && this.state.order.order;\n      var scanPackSetting = this.state.scan_pack_settings;\n      var input = this.state.serialRecordInput;\n      var inputLength = input.length;\n      var match = false;\n\n      if (scanPackSetting.require_serial_lot) {\n        if (scanPackSetting.valid_prefixes) {\n          var prefix = scanPackSetting.valid_prefixes.split(',');\n          var prefixLength;\n          var userInput;\n          var access = false;\n          prefix && prefix.length > 0 && prefix.map(function (serial) {\n            prefixLength = serial.length;\n            userInput = input.slice(0, prefixLength);\n\n            if (userInput === serial) {\n              access = true;\n            }\n          });\n\n          if (access) {\n            match = true;\n            enableSerial = true;\n          } else {\n            this.responseAction(\"scan_fail\", \"serialRecord\");\n            this.alertBox(\"The Value Scanned does not appear to be a Valid serial or lot number. Please check the 'Require Serial/Lot Prefix' setting in your scan and pack options.\");\n            this.setState({\n              type: this.state.type,\n              serialRecordInput: \"\",\n              serialRecordOne: \"\",\n              serialRecordTwo: \"\"\n            });\n            match = false;\n            enableSerial = false;\n          }\n        }\n      } else {\n        match = true;\n        enableSerial = true;\n      }\n\n      var type = this.state.type;\n      var item = this.state.order && this.state.order.order && this.state.order.order.unscanned_items && this.state.order.order.unscanned_items[0];\n      var order_id = this.state.order && this.state.order.order && this.state.order.order.id;\n\n      if (match) {\n        if (item.child_items && item.child_items.length > 0 && item.child_items[0]) {\n          if (item.child_items[0].record_serial && item.child_items[0].second_record_serial) {\n            if (item.child_items[0].record_serial && this.state.serialRecordOne === \"\") {\n              this.setState({\n                serialRecordOne: this.state.serialRecordInput\n              });\n              this.setState({\n                serialRecordInput: \"\"\n              });\n              this.serialLogUpdate(type, item.child_items[0], \"recordOne\", order_id, true);\n            } else {\n              this.setState({\n                serialRecordTwo: this.state.serialRecordInput\n              });\n              enableSerial = true;\n              this.allTypeScan(type, item.child_items[0]);\n              this.setState({\n                serialRecordPopUpShow: false,\n                type: \"\",\n                serialRecordInput: \"\",\n                serialRecordOne: \"\",\n                serialRecordTwo: \"\"\n              });\n              this.serialLogUpdate(type, item.child_items[0], \"recordTwo\", order_id, true);\n            }\n          } else {\n            if (item.child_items[0].record_serial) {\n              this.setState({\n                serialRecordOne: this.state.serialRecordInput\n              });\n              this.serialLogUpdate(type, item.child_items[0], \"recordOne\", order_id, false);\n            } else {\n              this.setState({\n                serialRecordTwo: this.state.serialRecordInput\n              });\n              this.serialLogUpdate(type, item.child_items[0], \"recordTwo\", order_id, false);\n            }\n\n            this.allTypeScan(type, item.child_items[0]);\n            this.setState({\n              serialRecordPopUpShow: false,\n              type: \"\",\n              serialRecordInput: \"\"\n            });\n          }\n        } else {\n          if (item.record_serial && item.second_record_serial) {\n            if (this.state.serialRecordOne === \"\") {\n              this.setState({\n                serialRecordOne: this.state.serialRecordInput\n              });\n              this.setState({\n                serialRecordInput: \"\"\n              });\n              this.serialLogUpdate(type, item, \"recordOne\", order_id, true);\n            } else {\n              this.setState({\n                serialRecordTwo: this.state.serialRecordInput\n              });\n              enableSerial = true;\n              this.setState({\n                serialRecordPopUpShow: false,\n                type: \"\",\n                serialRecordInput: \"\",\n                serialRecordOne: \"\",\n                serialRecordTwo: \"\"\n              });\n              this.serialLogUpdate(type, item, \"recordTwo\", order_id, true);\n              this.allTypeScan(type, item);\n            }\n          } else {\n            if (item.record_serial) {\n              this.serialLogUpdate(type, item, \"recordOne\", order_id, false);\n            } else {\n              this.serialLogUpdate(type, item, \"recordTwo\", order_id, false);\n            }\n\n            this.allTypeScan(type, item);\n            this.setState({\n              serialRecordPopUpShow: false,\n              type: \"\",\n              serialRecordInput: \"\"\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"redirectToItemDetail\",\n    value: function redirectToItemDetail(product) {\n      if (product && product.product_id) {\n        this.props.navigation.navigate(\"ProductDetail\", {\n          productInfo: product.product_id,\n          orderID: this.state.order.order.id,\n          increment_id: this.state.order.order.increment_id\n        });\n      }\n    }\n  }, {\n    key: \"removeFocus\",\n    value: function removeFocus() {}\n  }, {\n    key: \"onKeyUp\",\n    value: function onKeyUp(keyName, e, handle) {\n      this.setState({\n        focusBarcode: true\n      });\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(keyName, e, handle) {\n      this.setState({\n        focusBarcode: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var config = {\n        velocityThreshold: 1,\n        directionalOffsetThreshold: 80\n      };\n      var props = this.props;\n      var Order = this.state.order && this.state.order.order;\n      var settings = this.state.scan_pack_settings;\n      Order && Order.status === \"scanned\" && this.props.navigation.navigate(\"ScanPack\", {\n        showScannedMessage: true\n      });\n      return React.createElement(View, {\n        key: \"main\",\n        style: {\n          height: \"100%\",\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3172,\n          columnNumber: 5\n        }\n      }, React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3174,\n          columnNumber: 9\n        }\n      }, this.state.loader && React.createElement(View, {\n        style: styles.activityContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3177,\n          columnNumber: 13\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: \"#000\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3178,\n          columnNumber: 15\n        }\n      }), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3179,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: \"center\",\n          color: \"#fff\",\n          fontSize: 16\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3180,\n          columnNumber: 17\n        }\n      }, \"Loading...\"))), Order && this.state.scan_pack_settings && React.createElement(View, {\n        style: [globalStyles.flex1, {\n          height: \"100%\",\n          position: \"relative\"\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3186,\n          columnNumber: 13\n        }\n      }, this.state.orderConfirmPopUp && React.createElement(OrderConfirmationPopUp, _extends({\n        OrderConfirmationCheckFun: function OrderConfirmationCheckFun() {\n          return _this3.OrderConfirmationCheckFun();\n        },\n        OrderConfirmationCheckInput: this.state.OrderConfirmationCheckInput,\n        errorMessageOrderConfirmationCheck: this.state.errorMessageOrderConfirmationCheck,\n        handleOrderConfirmationCheckInput: function handleOrderConfirmationCheckInput(e) {\n          return _this3.handleOrderConfirmationCheckInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        orderDetails: this.state.order && this.state.order.order\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3190,\n          columnNumber: 17\n        }\n      })), React.createElement(ProductAlias, {\n        alias: this.state.alias,\n        Product: this.state.Product,\n        updateProduct: this.state.updateProduct,\n        assignUniquebarcode: function assignUniquebarcode(from) {\n          return _this3.assignUniquebarcode(from);\n        },\n        shareBarcodeMethod: function shareBarcodeMethod() {\n          _this3.setState({\n            shareBarcodeShow: true,\n            alias: false\n          });\n        },\n        proceedAliasing: function proceedAliasing() {\n          return _this3.proceedAliasing();\n        },\n        shareBarcodeShow: this.state.shareBarcodeShow,\n        sameBarcode: function sameBarcode() {\n          return _this3.sameBarcode();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3199,\n          columnNumber: 15\n        }\n      }), this.state.responseShowAction && React.createElement(ResponseView, {\n        orderCompleteAction: this.state.orderCompleteAction,\n        scanSuccessAction: this.state.scanSuccessAction,\n        scanFailAction: this.state.scanFailAction,\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3210,\n          columnNumber: 17\n        }\n      }), this.state.typeScanAlert && React.createElement(TypeScanAlert, {\n        closeAlert: this.closeAlert.bind(this),\n        typeScanCount: this.state.typeScanCount,\n        typeScanCountUpdate: function typeScanCountUpdate(text) {\n          return _this3.setState({\n            typeScanCount: text\n          });\n        },\n        submitTypeScan: this.submitTypeScan.bind(this),\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3220,\n          columnNumber: 17\n        }\n      }), this.state.alert && React.createElement(Alert, {\n        closeAlert: this.closeAlert.bind(this),\n        submitAlert: this.submitAlert.bind(this),\n        notes_fromPacker: this.state.notes_fromPacker,\n        noteUpdate: function noteUpdate(text) {\n          return _this3.setState({\n            notes_fromPacker: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3231,\n          columnNumber: 17\n        }\n      }), this.state.popUpModelShow && React.createElement(PopUpModel, {\n        closeAlert: this.closeAlert.bind(this),\n        message: this.state.message,\n        messageTypeSuccess: this.state.messageTypeSuccess ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3242,\n          columnNumber: 17\n        }\n      }), this.state.serialRecordPopUpShow && React.createElement(SerialRecord, _extends({\n        serialRecordFun: function serialRecordFun() {\n          return _this3.serialRecordFun();\n        },\n        serialRecordInput: this.state.serialRecordInput,\n        handleSerialRecordInput: function handleSerialRecordInput(e) {\n          return _this3.handleSerialRecordInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        serialRecord: function serialRecord() {\n          return _this3.serialRecord;\n        }\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3249,\n          columnNumber: 17\n        }\n      })), this.state.clickScanConfirmation && React.createElement(ClickScanConfirmationPopUp, {\n        clickScanConfirmFun: function clickScanConfirmFun() {\n          return _this3.clickScanConfirmFun();\n        },\n        clickScanConfirmInput: this.state.clickScanConfirmInput,\n        errorMessageClickScanConfirmation: this.state.errorMessageClickScanConfirmation,\n        handleClickScanConfirmInput: function handleClickScanConfirmInput(e) {\n          return _this3.handleClickScanConfirmInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        serialFocus: myInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3259,\n          columnNumber: 17\n        }\n      }), this.state.addBarcodeWindow && React.createElement(AddBarcode, {\n        closeAlert: function closeAlert(e) {\n          return _this3.closeAlert(e);\n        },\n        addBarcodeSubmit: function addBarcodeSubmit(e) {\n          return _this3.addBarcodeSubmit(e);\n        },\n        addBarcodeText: this.state.addBarcodeText,\n        addBarcodeChange: function addBarcodeChange(text) {\n          return _this3.setState({\n            addBarcodeText: text\n          });\n        },\n        addBarcodeWindow: this.state.addBarcodeWindow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3270,\n          columnNumber: 17\n        }\n      }), this.state.popUpModelShow && React.createElement(PopUpModel, {\n        closeAlert: this.closeAlert.bind(this),\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3280,\n          columnNumber: 17\n        }\n      }), this.state.serialRecordPopUpShow && React.createElement(SerialRecord, _extends({\n        serialRecordFun: function serialRecordFun() {\n          return _this3.serialRecordFun();\n        },\n        serialRecordInput: this.state.serialRecordInput,\n        handleSerialRecordInput: function handleSerialRecordInput(e) {\n          return _this3.handleSerialRecordInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        serialRecord: function serialRecord() {\n          return _this3.serialRecord;\n        }\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3286,\n          columnNumber: 17\n        }\n      })), this.state.clickScanConfirmation && React.createElement(ClickScanConfirmationPopUp, {\n        clickScanConfirmFun: function clickScanConfirmFun() {\n          return _this3.clickScanConfirmFun();\n        },\n        clickScanConfirmInput: this.state.clickScanConfirmInput,\n        errorMessageClickScanConfirmation: this.state.errorMessageClickScanConfirmation,\n        handleClickScanConfirmInput: function handleClickScanConfirmInput(e) {\n          return _this3.handleClickScanConfirmInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        serialFocus: myInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3296,\n          columnNumber: 17\n        }\n      }), this.state.productConfirmationCheck && React.createElement(ProductConfirmationCheck, _extends({\n        ProductConfirmationCheckFun: function ProductConfirmationCheckFun() {\n          return _this3.ProductConfirmationCheckFun();\n        },\n        ProductConfirmationCheckInput: this.state.productConfirmationCheckInput,\n        errorMessageProductConfirmationCheck: this.state.errorMessageProductConfirmationCheck,\n        handleProductConfirmationCheckInput: function handleProductConfirmationCheckInput(e) {\n          return _this3.handleProductConfirmationCheckInput(e);\n        },\n        closeAlert: this.closeAlert.bind(this),\n        instruction: this.state.blockItemToScan\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3308,\n          columnNumber: 17\n        }\n      })), this.state.scan_pack_settings.post_scanning_option !== \"None\" && Order && Order.unscanned_items.length === 0 ? React.createElement(ConfirmTrackingNumber, {\n        postScanningFieldLabel: this.state.postScanningFieldLabel,\n        trackingOrderInput: this.state.trackingOrderInput,\n        onChangeText: function onChangeText(text) {\n          _this3.setState({\n            trackingOrderInput: text\n          });\n        },\n        onSubmitEditing: this.trackingSubmit.bind(this, this.state.trackingOrderInput),\n        postScanningMessageDetail: this.state.postScanningMessageDetail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3320,\n          columnNumber: 19\n        }\n      }) : React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3327,\n          columnNumber: 19\n        }\n      }, this.props.route && this.props.route.params && this.state.order && React.createElement(Hotkeys, {\n        keyName: \"enter\",\n        onKeyDown: this.onKeyDown.bind(this),\n        onKeyUp: this.onKeyUp.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3330,\n          columnNumber: 23\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3335,\n          columnNumber: 25\n        }\n      }, Platform.OS === \"web\" ? React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3339,\n          columnNumber: 31\n        }\n      }, this.state.windowWidth >= 900 ? React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: \"row\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3343,\n          columnNumber: 37\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3344,\n          columnNumber: 39\n        }\n      }, React.createElement(UnscannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        localLogs: this.state.localLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3345,\n          columnNumber: 41\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 4\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3362,\n          columnNumber: 39\n        }\n      }, this.state.loadOrderSpinner ? React.createElement(View, {\n        style: {\n          marginTop: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3366,\n          columnNumber: 45\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: \"#000\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3367,\n          columnNumber: 47\n        }\n      }), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3368,\n          columnNumber: 47\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3369,\n          columnNumber: 49\n        }\n      }, \"Fetch more item to scan...\"))) : React.createElement(NextItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        access_token: this.state.token,\n        barcodeState: this.state.bar_code,\n        removeFocus: function removeFocus() {\n          return _this3.removeFocus();\n        },\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        activities: props && props.Order && props.Order.activities,\n        localLogs: this.state.localLogs,\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        loadOrderSpinner: this.state.loadOrderSpinner,\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        addBarcode: function addBarcode(e) {\n          return _this3.addBarcode(e);\n        },\n        notesToPackerFlag: this.state.notes_toPackerFlag,\n        closeNotes: function closeNotes() {\n          return _this3.closeNotes();\n        },\n        settings: settings,\n        customerCommentsFlag: this.state.customer_commentsFlag,\n        internalNotesFlag: this.state.notes_internalFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3373,\n          columnNumber: 45\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 2,\n          zIndex: -1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3415,\n          columnNumber: 39\n        }\n      }, React.createElement(ScannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3416,\n          columnNumber: 41\n        }\n      })))) : React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: \"#292929\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3425,\n          columnNumber: 37\n        }\n      }, this.state.unscannedItemShow === true && this.state.nextItemShow === false && React.createElement(UnscannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        access_token: this.state.token,\n        barcodeState: this.state.bar_code,\n        removeFocus: function removeFocus(e) {\n          return _this3.removeFocus(e);\n        },\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        activities: props && props.Order && props.Order.activities,\n        localLogs: this.state.localLogs,\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        navButton: function navButton() {\n          return _this3.navButton();\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        localLogs: this.state.localLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3428,\n          columnNumber: 41\n        }\n      })), this.state.loadOrderSpinner ? React.createElement(View, {\n        style: {\n          marginTop: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3467,\n          columnNumber: 43\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: \"#000\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3468,\n          columnNumber: 45\n        }\n      }), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3469,\n          columnNumber: 45\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3470,\n          columnNumber: 47\n        }\n      }, \"Fetch more item to scan...\"))) : React.createElement(React.Fragment, null, this.state.unscannedItemShow === false && this.state.nextItemShow === true && this.state.scannedItemShow === false && React.createElement(NextItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        access_token: this.state.token,\n        barcodeState: this.state.bar_code,\n        removeFocus: function removeFocus(e) {\n          return _this3.removeFocus(e);\n        },\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        activities: props && props.Order && props.Order.activities,\n        localLogs: this.state.localLogs,\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        navButtonLeft: function navButtonLeft() {\n          return _this3.navButtonLeft();\n        },\n        navButtonRight: function navButtonRight() {\n          _this3.setState({\n            unscannedItemShow: false,\n            nextItemShow: false,\n            scannedItemShow: true\n          });\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        loadOrderSpinner: this.state.loadOrderSpinner,\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        addBarcode: function addBarcode(e) {\n          return _this3.addBarcode(e);\n        },\n        notesToPackerFlag: this.state.notes_toPackerFlag,\n        closeNotes: function closeNotes() {\n          return _this3.closeNotes();\n        },\n        settings: settings,\n        customerCommentsFlag: this.state.customer_commentsFlag,\n        internalNotesFlag: this.state.notes_internalFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3477,\n          columnNumber: 47\n        }\n      }))), this.state.nextItemShow === false && this.state.scannedItemShow === true && React.createElement(ScannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        navButton: function navButton() {\n          _this3.setState({\n            unscannedItemShow: false,\n            nextItemShow: true,\n            scannedItemShow: false\n          });\n        },\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3524,\n          columnNumber: 41\n        }\n      })))) : React.createElement(Swiper, {\n        index: 1,\n        onIndexChanged: function onIndexChanged(e) {\n          return _this3.enableToggle(e);\n        },\n        keyboardShouldPersistTaps: 'handled',\n        loop: false,\n        horizontal: true,\n        dotStyle: {\n          display: \"none\"\n        },\n        activeDotStyle: {\n          display: \"none\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3536,\n          columnNumber: 31\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3543,\n          columnNumber: 33\n        }\n      }, React.createElement(UnscannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        barcodeState: this.state.bar_code,\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        localLogs: this.state.localLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3544,\n          columnNumber: 35\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3574,\n          columnNumber: 33\n        }\n      }, React.createElement(NextItems, _extends({}, this.props, {\n        order: this.state.order,\n        currentFocus: function currentFocus() {\n          return _this3.currentFocus();\n        },\n        barcodeRef: this.barcode,\n        access_token: this.state.token,\n        barcodeState: this.state.bar_code,\n        clickScan: function clickScan(e) {\n          return _this3.clickScan(e);\n        },\n        removeFocus: function removeFocus(e) {\n          return _this3.removeFocus(e);\n        },\n        scanAllItem: function scanAllItem(e) {\n          return _this3.scanAllItem(e);\n        },\n        scanBarcode: function scanBarcode(e) {\n          return _this3.scanBarcode(e);\n        },\n        stateUpdate: function stateUpdate(text) {\n          return _this3.setState({\n            bar_code: text\n          });\n        },\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        activities: props && props.Order && props.Order.activities,\n        localLogs: this.state.localLogs,\n        restartButton: function restartButton() {\n          return _this3.restartButton();\n        },\n        addNote: function addNote() {\n          return _this3.addNote();\n        },\n        saveChanges: function saveChanges() {\n          return _this3.saveChanges();\n        },\n        leaveComponent: function leaveComponent(order, type) {\n          return _this3.leaveComponent(order, type);\n        },\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        loadOrderSpinner: this.state.loadOrderSpinner,\n        unscannedItemPerPage: this.state.unscannedItemPerPage,\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        InputField: this.InputField,\n        scannedList: this.state.scannedList,\n        unscannedList: this.state.unscannedList,\n        logList: this.state.logList,\n        showScannedList: function showScannedList() {\n          return _this3.showScannedList();\n        },\n        showUnscannedList: function showUnscannedList() {\n          return _this3.showUnscannedList();\n        },\n        showLogList: function showLogList() {\n          return _this3.showLogList();\n        },\n        addBarcode: function addBarcode(e) {\n          return _this3.addBarcode(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3575,\n          columnNumber: 35\n        }\n      }))), React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3611,\n          columnNumber: 33\n        }\n      }, React.createElement(ScannedItems, _extends({}, this.props, {\n        order: this.state.order,\n        scanPackSetting: this.state.scan_pack_settings,\n        generalSetting: this.state.general_settings,\n        redirectToItemDetail: function redirectToItemDetail(e) {\n          return _this3.redirectToItemDetail(e);\n        },\n        scannedItemPerPage: this.state.scannedItemPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3612,\n          columnNumber: 35\n        }\n      }))))))))));\n    }\n  }]);\n\n  return ScanPackItem;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    Order: state.order.order,\n    ordersList: state.order.list,\n    bothSettings: state.user.bothSettings,\n    searchOrder: state.scanpack,\n    saveData: state.updateAsync.retriveData,\n    updateLog: state.saveLog,\n    callOrder: state.scanpack.searchOrder,\n    updateProduct: state.product.updateProductList,\n    updateAlias: state.product.updateProductAlias\n  };\n};\n\nvar mapDispatchToProps = {\n  GetOrderDetail: GetOrderDetail,\n  GetOrderList: GetOrderList,\n  GetBothSettings: GetBothSettings,\n  SearchScanpackOrder: SearchScanpackOrder,\n  GetItem: GetItem,\n  SetItem: SetItem,\n  SubmitLog: SubmitLog,\n  SearchOrder: SearchOrder,\n  updateProductList: updateProductList,\n  updateProductAlias: updateProductAlias\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanPackItem);","map":{"version":3,"sources":["C:/Users/DELL PC/Downloads/GroovePacker/src/components/scanpack/scanpack_item.js"],"names":["React","Component","Audio","connect","Swiper","NetInfo","completeSound","scanSuccessSound","scanFailSound","notReady","closeButton","SearchScanpackOrder","GetOrderList","SearchOrder","updateProductList","updateProductAlias","GetBothSettings","GetOrderDetail","SetItem","GetItem","SubmitLog","styles","UnscannedItems","ScannedItems","NextItems","Notes","Alert","AddBarcode","PopUpModel","ShipmentRecord","TypeScanAlert","ResponseView","LogView","SerialRecord","ClickScanConfirmationPopUp","ProductConfirmationCheck","ConfirmTrackingNumber","OrderConfirmationPopUp","globalStyles","SwipeGesture","Hotkeys","ProductAlias","LinearGradient","fontFamily","searchOrderCheck","updateProductInfoSuccess","ScanPackSettingsAccess","GeneralSettingAccess","orderSaveSuccess","updateLogSuccess","callOrderSuccess","formOrderDetailPage","updateSerialLog","enableSerial","myInput","ordersListSuccess","blockScan","confirmProductConfirmation","updateFromOrderDetailPage","searchOrderSuccess","updateFromProductSuccess","updateProductApi","updateAliasSuccess","ScanPackItem","props","getUserInfo","AsyncStorage","getItem","info","userInfo","JSON","parse","setState","apiCall","fetchListData","state","shipmentOrder","input","route","params","incrementID","data","order","addBarcode","item","barcodes","length","addBarcodeWindow","addBarcodeItem","addBarcodeSubmit","newHash","value","addBarcodeText","var","id","product_id","updateProductApiCall","Date","nav","completeOrder","multipleTime","statusFunction","message","rfoTitle","responseAction","response","from","scan_pack_settings","play_success_sound","show_success_image","success_image_time","play_fail_sound","show_fail_image","fail_image_time","play_order_complete_sound","show_order_complete_image","order_complete_image_time","popup_show_time","scanFailAction","responseShowAction","playSound","bar_code","scanSuccessAction","forSerialRecord","post_scanning_option","scanType","postScanFunction","orderCompleteAction","showTime","setTimeout","updateAction","bind","serialRecord","current","focus","error","sound","Sound","unloadAsync","loadAsync","playAsync","currentFocus","sleep","ms","Promise","resolve","type","timeSecond","scanPack","Order","trackingNumberView","postScanningFieldLabel","increment_id","postScanningMessageDetail","tracking_num","postScanSecond","postScan","time","soundObject","convert","redirectFun","submitAlert","order_num","notes_fromPacker","localLogs","temp_order","event","name","updated_at","issueFlag","updateLog","noteFlag","alert","scanAllItem","count","parseInt","typeScanCount","type_scan_code","unscanned_items","items","scanned_items","log","next_state","general_settings","itemFound","SKU","orderComplete","conf_code_product_instruction","productConfirmationCheck","blockItemType","child_items","confirmation","blockItemToScan","product_type","serialScanAccess","record_serial","second_record_serial","eventType","serialRecordPopUpShow","map","childItem","index","scan","scanned_qty","qty_remaining","splice","sku","unscan","order_item_id","typeScanAlert","submitTypeScan","remain_qty","scanAccess","scanpush","match","skip","orderInputType","barcode","typeScanState","typeScanDeductCountState","child","count_item","alertBox","messageTypeSuccess","popUpModelShow","closeAlert","serialRecordInput","serialRecordTwo","serialRecordOne","clickScanConfirmation","confirmationCheckItem","clickScanConfirmInput","errorMessageProductConfirmationCheck","errorMessageClickScanConfirmation","orderConfirmPopUp","noBarcodeScan","ProductConfirmationCheckFun","userCode","confirmation_code","userInput","productConfirmationCheckInput","clickScan","scanBarcode","generalSettings","strict_cc","handleProductConfirmationCheckInput","e","OrderConfirmationCheckFun","OrderConfirmationCheckInput","handleOrderConfirmationCheckInput","errorMessageOrderConfirmationCheck","restartButton","Log_count","product_name","ActionBarcode","restart_code","navigation","navigate","addNote","saveChanges","clickBarcode","localScannedItems","event_code","tempArr","is_multipack_barcode","packing_count","noCode","findKit3","master_switch","stop_add_log","lowercase","skipError","event_scanned","rejectLocalLog","Action_Type","order_complete_flag","qty_remain","scanning_sequence","escape_string_enabled","removeSpaceBarCode","first_escape_string_enabled","check","escape_string","includes","tempIndex","indexOf","slice","second_escape_string_enabled","second_escape_string","note_from_packer_code_enabled","note_from_packer_code","restart_code_enabled","type_scan_code_enabled","scanned","scanned_barcode","service_issue_code_enabled","service_issue_code","click_scan","click_scan_barcode","remove_barcode","shift","toLowerCase","skippable","skip_code","skip_code_enabled","childIndex","Barcode","scanItemIndex","scancode","Scancode","barcodeIndex","mainItem","un","bar","scanIndex","scancodeIndex","childItemIndex","childItemBarcode","childItemBarcodeIndex","tempItem","tempItem1","tempItemChildArr","tempItem1ChildArr","arr","kitDivide","newCopy","push","childTemp","sub","final","updateProduct","updateProductIndex","updateChildItem","updatedChildItemIndex","undefined","keyCode","fromActionBarcode","access","enable_click_sku","click_scan_enabled","clickScanConfirmFun","handleClickScanConfirmInput","logData","temp","logging","LoggingArray","indexToRemove","numberToRemove","getTemp","concat","setItem","stringify","trackingOrderInput","close","notes_toPacker_enable","leaveComponent","updateDimensions","windowWidth","window","innerWidth","hideShipment","showshipments","callShipmentOrder","hitApi","Platform","OS","InternetCheck","fetch","connectionInfo","isConnected","errorMessageShow","allTypeScan","recordSerial","handleSerialRecordInput","navButton","reRenderFocus","unscannedItemShow","nextItemShow","scannedItemShow","console","navButtonLeft","showScannedList","unscannedList","scannedList","logList","showUnscannedList","showLogList","closeNotes","notes_toPackerFlag","notes_internalFlag","customer_commentsFlag","assignUniquebarcode","shareBarcodeShow","alias","proceedAliasing","alias_product_data_id","alias_product_data","current_product_data_id","current_product_data","details","product_alias_ids","sameBarcode","permit_same_barcode","orderList","orderDetail","firstScreen","secondScreen","thirdScreen","logScreen","errorMessage","matchOrderShow","loadOrderSpinner","loader","unscannedItemPerPage","scannedItemPerPage","focusBarcode","Product","Dimensions","get","width","createRef","InputField","addEventListener","searchOrder","searchData","asyncData","bothSettings","setFocus","productDetail","apiCallTime","searchResult","matched","status","oldOne","scan_hash","detailData","scanpackSettings","scanpack_setting","general_setting","conf_req_on_notes_to_packer","note_confirmation","scData","gsData","postScanMessage","logTime","logs","restart","productID","show_alias_popup","created_at","unItem","updateAlias","update","trackingNumber","setting","trackingLength","num","post_scanning_option_second","tracking_number_validation_enabled","prefix","tracking_number_validation_prefixes","split","validate","prefixLength","trackNumber","scanSecondTime","trackingStateSecond","tempNum","trackingState","removeEventListener","recordFrom","order_id","both","localLog","scanPackSetting","inputLength","require_serial_lot","valid_prefixes","serial","serialLogUpdate","product","productInfo","orderID","keyName","handle","config","velocityThreshold","directionalOffsetThreshold","settings","showScannedMessage","height","flex","activityContainer","textAlign","color","fontSize","flex1","position","text","serialRecordFun","trackingSubmit","onKeyDown","onKeyUp","flexDirection","redirectToItemDetail","marginTop","token","removeFocus","activities","zIndex","backgroundColor","enableToggle","display","justifyContent","alignItems","mapStateToProps","ordersList","list","user","scanpack","saveData","updateAsync","retriveData","saveLog","callOrder","mapDispatchToProps"],"mappings":"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","sourcesContent":["//import library\r\nimport React, { Component } from 'react';\r\nimport { View, Text, Image, Dimensions, ActivityIndicator, TouchableOpacity, Platform, AsyncStorage } from 'react-native';\r\nimport { Audio } from 'expo-av';\r\nimport { connect } from 'react-redux';\r\nimport Swiper from 'react-native-swiper/src';\r\nimport NetInfo from \"@react-native-community/netinfo\";\r\n\r\n//import sound from component\r\nimport completeSound from \"../../../assets/sounds/_order_complete.mp3\";\r\nimport scanSuccessSound from \"../../../assets/sounds/scan_success_pop.mp3\";\r\nimport scanFailSound from \"../../../assets/sounds/scan_fail_shorter.mp3\";\r\nimport notReady from \"../../../assets/sounds/not_ready.mp3\";\r\n\r\n//import image from assets\r\nimport closeButton from \"../../../assets/closeicon.png\";\r\n\r\n//import apis \r\nimport { SearchScanpackOrder } from \"../../actions/scanpackAction\";\r\nimport { GetOrderList, SearchOrder } from \"../../actions/orderActions\";\r\nimport { updateProductList, updateProductAlias } from \"../../actions/productAction\";\r\nimport { GetBothSettings } from \"../../actions/userAction\";\r\nimport { GetOrderDetail } from '../../actions/orderActions';\r\nimport { SetItem, GetItem } from \"../../actions/updateAsyncAction\";\r\nimport { SubmitLog } from \"../../actions/saveLogAction\";\r\n\r\n//import components to view\r\nimport styles from '../../style/scanpack';\r\nimport UnscannedItems from \"./unscanned_items\";\r\nimport ScannedItems from \"./scanned_items\";\r\nimport NextItems from \"./next_items\";\r\nimport Notes from \"./internal_notes\";\r\nimport Alert from \"./alert\";\r\nimport AddBarcode from \"./addBarcode\";\r\nimport PopUpModel from \"./pop_up_model\";\r\nimport ShipmentRecord from \"./shipmentsRecord\";\r\nimport TypeScanAlert from \"./type_scan_alert\";\r\nimport ResponseView from \"./response_view\";\r\nimport LogView from \"./log\";\r\nimport SerialRecord from \"./serial_record\";\r\nimport ClickScanConfirmationPopUp from \"./click_scan_confirmation_pop_up\";\r\nimport ProductConfirmationCheck from \"./productConfirmationCheck\";\r\nimport ConfirmTrackingNumber from \"./confirmTrackingNumber\";\r\nimport OrderConfirmationPopUp from \"./orderConfirmationPopUp\";\r\nimport globalStyles from '../../style/global';\r\nimport SwipeGesture from '../../helpers/swipe-gesture'\r\nimport Hotkeys from 'react-hot-keys';\r\nimport ProductAlias from \"../Alias/productAlias\";\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { fontFamily } from '../../helpers/fontFamily';\r\n\r\nlet searchOrderCheck = false;\r\nlet updateProductInfoSuccess = false;\r\nlet ScanPackSettingsAccess = false;\r\nlet GeneralSettingAccess = false;\r\nlet orderSaveSuccess = false;\r\nlet updateLogSuccess = true;\r\nlet callOrderSuccess = true;\r\nlet formOrderDetailPage = true;\r\nlet updateSerialLog = {};\r\nlet enableSerial = false;\r\nlet myInput = \"\";\r\nlet ordersListSuccess = true;\r\nlet blockScan = false;\r\nlet confirmProductConfirmation = false;\r\nlet updateFromOrderDetailPage = true;\r\nlet searchOrderSuccess = false\r\nlet updateFromProductSuccess = false\r\nlet updateProductApi = false\r\nlet updateAliasSuccess = false\r\n// let scanSuccessAction = false\r\n// let scanFailAction = false\r\n// let orderCompleteAction = false\r\n// let responseShowAction = false\r\n\r\nclass ScanPackItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shipmentOrder: {\r\n        \"input\": \"\",\r\n        \"state\": \"scanpack.rfo\",\r\n        \"id\": null,\r\n        \"box_id\": null,\r\n        \"store_order_id\": null,\r\n        \"app\": \"app\"\r\n      },\r\n      data: {\r\n        \"input\": \"\",\r\n        \"state\": \"scanpack.rfo\",\r\n        \"id\": null,\r\n        \"box_id\": null,\r\n        \"store_order_id\": null\r\n      },\r\n      orderList: {\r\n        \"filter\": \"awaiting\",\r\n        \"order\": \"DESC\",\r\n        \"limit\": \"1\",\r\n        \"offset\": \"0\",\r\n        \"app\": \"app\",\r\n        \"count\": 0\r\n      },\r\n      orderDetail: {\r\n        \"filter\": \"awaiting\",\r\n        \"order\": \"DESC\",\r\n        \"limit\": \"1\",\r\n        \"offset\": \"0\",\r\n        \"type\": \"app\"\r\n      },\r\n      type: \"\",\r\n      log: [],\r\n      localLogs: [],\r\n      firstScreen: true,\r\n      secondScreen: false,\r\n      thirdScreen: false,\r\n      logScreen: false,\r\n      bar_code: \"\",\r\n      alert: false,\r\n      notes_fromPacker: \"\",\r\n      typeScanAlert: false,\r\n      typeScanCount: \"\",\r\n      notes_toPacker_enable: true,\r\n      showshipments: true,\r\n      errorMessage: \"Please check the internet connection\",\r\n      errorMessageShow: false,\r\n      matchOrderShow: true,\r\n      typeScanState: \"\",\r\n      message: \"\",\r\n      unscannedItemShow: false,\r\n      nextItemShow: true,\r\n      scannedItemShow: false,\r\n      typeScanDeductCountState: \"\",\r\n      issueFlag: false,\r\n      noteFlag: false,\r\n      trackingOrderInput: \"\",\r\n      trackingNumberView: false,\r\n      postScanningFieldLabel: \"\",\r\n      postScanningMessageDetail: \"\",\r\n      timeSecond: false,\r\n      postScan: false,\r\n      serialRecordPopUpShow: false,\r\n      serialRecordInput: \"\",\r\n      serialRecordTwo: \"\",\r\n      clickScanConfirmInput: \"\",\r\n      serialRecordOne: \"\",\r\n      notes_toPackerFlag: true,\r\n      notes_internalFlag: true,\r\n      customer_commentsFlag: true,\r\n      scanSuccessAction: false,\r\n      scanFailAction: false,\r\n      orderCompleteAction: false,\r\n      responseShowAction: false,\r\n      errorMessageClickScanConfirmation: false,\r\n      loadOrderSpinner: false,\r\n      loader: false,\r\n      unscannedItemPerPage: 1,\r\n      scannedItemPerPage: 1,\r\n      productConfirmationCheck: false,\r\n      productConfirmationCheckInput: \"\",\r\n      errorMessageProductConfirmationCheck: false,\r\n      blockScan: false,\r\n      orderConfirmPopUp: false,\r\n      OrderConfirmationCheckInput: \"\",\r\n      errorMessageOrderConfirmationCheck: false,\r\n      popUpModelShow: false,\r\n      messageTypeSuccess: false,\r\n      reRenderFocus: false,\r\n      clickScanConfirmation: false,\r\n      focusBarcode: false,\r\n      scannedList: true,\r\n      unscannedList: false,\r\n      logList: false,\r\n      addBarcodeWindow: false,\r\n      alias: false,\r\n      Product: [],\r\n      windowWidth: Dimensions.get('window').width\r\n    };\r\n    this.barcode = React.createRef();\r\n    this.serialRecord = React.createRef();\r\n    this.multipleTime = this.multipleTime.bind(this);\r\n    this.responseAction = this.responseAction.bind(this);\r\n    this.redirectFun = this.redirectFun.bind(this);\r\n    this.InputField = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateDimensions)\r\n    this.setState({ loader: true })\r\n    this.getUserInfo();\r\n    this.apiCall()\r\n  }\r\n\r\n  /*RETRIVE THE USER INFO FROM LOCAL*/\r\n  getUserInfo = async () => {\r\n    let info = await AsyncStorage.getItem(\"userInfo\")\r\n    let userInfo = info && JSON.parse(info)\r\n    this.setState({ userInfo })\r\n  }\r\n  /*RETRIVE THE USER INFO FROM LOCAL*/\r\n\r\n  apiCall = () => {\r\n    let fetchListData = this.state.shipmentOrder\r\n    fetchListData.input = this.props.route.params.incrementID\r\n    let data = this.props.route.params.data\r\n    this.setState({ order: data })\r\n    // this.props.SearchScanpackOrder(fetchListData);\r\n    this.props.GetBothSettings();\r\n    ordersListSuccess = false\r\n  }\r\n\r\n  addBarcode = (item) => {\r\n    if (item.barcodes && item.barcodes.length === 0) {\r\n      this.setState({ addBarcodeWindow: true, addBarcodeItem: item })\r\n    }\r\n  }\r\n\r\n  addBarcodeSubmit = () => {\r\n    let newHash = {\r\n      value: this.state.addBarcodeText,\r\n      var: \"barcode\",\r\n      id: this.state.addBarcodeItem.product_id,\r\n    }\r\n    this.props.updateProductList(newHash)\r\n    this.setState({ updateProductApiCall: new Date() })\r\n    updateProductApi = true\r\n  }\r\n\r\n\r\n  componentDidUpdate() {\r\n    let searchOrder = this.props.searchOrder;\r\n    let searchData = searchOrder && searchOrder.data\r\n    let asyncData = this.props && this.props.bothSettings\r\n    let updateLog = this.props && this.props.updateLog\r\n    let order = { \"order\": this.props && this.props.route.params && this.props.route.params.data }\r\n    let setFocus = this.state.orderConfirmPopUp === false && this.state.addBarcodeWindow === false && this.state.responseShowAction === false && this.state.typeScanAlert === false && this.state.popUpModelShow === false && this.state.reRenderFocus === false && this.state.serialRecordPopUpShow === false && this.state.clickScanConfirmation === false && this.state.productConfirmationCheck === false\r\n\r\n    if ((setFocus === true) || (setFocus === true && this.state.focusBarcode)) {\r\n      try {\r\n        this.InputField.current.focus()\r\n      } catch (error) {\r\n      }\r\n    }\r\n\r\n    if (this.props &&\r\n      this.props.route &&\r\n      this.props.route.params &&\r\n      this.props.route.params.data &&\r\n      this.props.route.params.data.from === \"productDetailPage\" &&\r\n      this.props.route.params.data !== this.state.productDetail\r\n    ) {\r\n      let data = {\r\n        \"input\": this.props.route.params.data.increment_id,\r\n        \"state\": \"scanpack.rfo\",\r\n        \"id\": null,\r\n        \"box_id\": null,\r\n        \"store_order_id\": null,\r\n        \"app\": \"app\"\r\n      }\r\n      updateFromProductSuccess = true\r\n      this.props.SearchScanpackOrder(data)\r\n      this.setState({ productDetail: this.props.route.params.data, loader: true, apiCallTime: new Date() })\r\n    }\r\n\r\n    //Search Order Data\r\n    if (updateFromProductSuccess && this.props &&\r\n      this.props.searchOrder &&\r\n      this.props.searchOrder) {\r\n      let searchResult = this.props.searchOrder && this.props.searchOrder.searchOrder\r\n      let order = searchResult && searchResult.data.order && searchResult.data.order[0]\r\n      if (searchResult) {\r\n        if (searchResult.matched) {\r\n          if (searchResult.data.status === \"awaiting\" && this.props.route.params.data.increment_id === this.props.searchOrder.searchOrder.data.order_num) {\r\n            // this.orderDetails(order)\r\n            this.setState({ oldOne: this.props.searchOrder, loader: false, order: this.props.searchOrder.searchOrder.data.order[0].scan_hash.data })\r\n            updateFromProductSuccess = false\r\n          }\r\n          if (searchResult.data.status === \"onhold\" && this.props.route.params.data.increment_id === this.props.searchOrder.searchOrder.data.order_num) {\r\n            // this.orderDetails(order)\r\n            this.setState({ oldOne: this.props.searchOrder, loader: false, order: this.props.searchOrder.searchOrder.data.order[0].scan_hash.data })\r\n            updateFromProductSuccess = false\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /*update order when user click save&close on order detail page start*/\r\n    if (this.props &&\r\n      this.props.route &&\r\n      this.props.route.params &&\r\n      this.props.route.params.data &&\r\n      this.props.route.params.data.from === \"orderDetailPage\" &&\r\n      this.props.route.params.data !== this.state.detailData\r\n    ) {\r\n      this.setState({\r\n        order: this.props.route.params.data,\r\n        detailData: this.props.route.params.data,\r\n        notes_toPackerFlag: true,\r\n        notes_internalFlag: true,\r\n        customer_commentsFlag: true\r\n      })\r\n      updateFromOrderDetailPage = false\r\n    }\r\n    /*update order when user click save&close on order detail page end*/\r\n\r\n    /*Update the general settings & scanpack settings start*/\r\n    if (this.props && this.props.bothSettings && this.props.bothSettings !== this.state.bothSettings) {\r\n      this.setState({\r\n        scanpackSettings: this.props.bothSettings.data.data.scanpack_setting,\r\n        generalSettings: this.props.bothSettings.data.data.general_setting,\r\n        scan_pack_settings: this.props.bothSettings.data.data.scanpack_setting,\r\n        general_settings: this.props.bothSettings.data.data.general_setting,\r\n        bothSettings: this.props.bothSettings,\r\n        loader: false\r\n      })\r\n      if (this.props.bothSettings.data.data.general_setting.conf_req_on_notes_to_packer === \"always\") {\r\n        this.setState({ orderConfirmPopUp: true })\r\n      }\r\n      if (this.props.bothSettings.data.data.general_setting.conf_req_on_notes_to_packer === \"optional\") {\r\n        if (order.order.order.note_confirmation) {\r\n          this.setState({ orderConfirmPopUp: true })\r\n        }\r\n      }\r\n    }\r\n    /*Update the general settings & scanpack settings end*/\r\n\r\n    if (updateProductInfoSuccess === true && this.props && this.props.updateProduct && this.props.updateProduct.data) {\r\n      updateProductInfoSuccess = false\r\n      this.setState({ alias: false })\r\n      if (this.props.route.params.data.order) {\r\n        let data = {\r\n          \"input\": this.props.route.params.data.order.increment_id,\r\n          \"state\": \"scanpack.rfo\",\r\n          \"id\": null,\r\n          \"box_id\": null,\r\n          \"store_order_id\": null,\r\n          \"app\": \"app\"\r\n        }\r\n        this.props.SearchScanpackOrder(data)\r\n        updateFromProductSuccess = true\r\n      }\r\n    }\r\n\r\n    if (asyncData !== \"\") {\r\n      let convert = asyncData\r\n      let scData = convert && convert.data && convert.data.data && convert.data.data.scanpack_setting\r\n      let gsData = convert && convert.data && convert.data.data && convert.data.data.general_setting\r\n      if (ScanPackSettingsAccess === false && scData) {\r\n        ScanPackSettingsAccess = true\r\n        if (scData && scData.post_scanning_option !== \"None\") {\r\n          let type = scData.post_scanning_option\r\n          if (type === \"Record\") {\r\n            this.setState({ notes_toPackerFlag: false, notes_internalFlag: false, customer_commentsFlag: false, postScanningFieldLabel: `Scan Tracking Number for Order ${order.order.order.increment_id}`, postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\" })\r\n          }\r\n          if (type === \"Verify\") {\r\n            let postScanMessage = \"\"\r\n            if (order.order.order.tracking_num !== null && order.order.order.tracking_num !== \"\") {\r\n              postScanMessage = \"Please scan the shipping label.\"\r\n            } else {\r\n              postScanMessage = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\r\n            }\r\n            this.setState({ notes_toPackerFlag: false, notes_internalFlag: false, customer_commentsFlag: false, postScanningFieldLabel: `Scan Shipping Label for Order ${order.order.order.increment_id}`, postScanningMessageDetail: postScanMessage })\r\n          }\r\n        }\r\n        this.setState({ scan_pack_settings: scData })\r\n        this.props.GetItem(\"GeneralSetting\");\r\n      }\r\n      if (GeneralSettingAccess === false && gsData !== undefined) {\r\n        GeneralSettingAccess = true\r\n        this.setState({ general_settings: gsData })\r\n      }\r\n    }\r\n\r\n    if (this.props.updateLog.time !== this.state.logTime) {\r\n      if (this.props.updateLog && this.props.updateLog.logs && this.props.updateLog.logs.status === \"OK\" && this.props.updateLog.updateLog && this.props.updateLog.time) {\r\n        this.setState({ logTime: this.props.updateLog.time })\r\n      }\r\n    }\r\n\r\n    if (this.props.route.params.restart === true) {\r\n      this.props.route.params.restartButton\r\n    }\r\n\r\n    if (updateProductApi === true && this.props && this.props.updateProduct && this.props.updateProduct.data !== \"\" && this.props.updateProduct.time >= this.state.updateProductApiCall) {\r\n      updateProductApi = false\r\n      let productID = this.state.addBarcodeItem && this.state.addBarcodeItem.product_id\r\n      let order = this.state.order\r\n      if (this.props.updateProduct.data.show_alias_popup) {\r\n        this.setState({ alias: true, addBarcodeWindow: false, Product: this.props.updateProduct.data, updateProduct: this.props.updateProduct.data })\r\n      } else {\r\n        order.order.unscanned_items &&\r\n          order.order.unscanned_items.length > 0 &&\r\n          order.order.unscanned_items.map((item, index) => {\r\n            if (item.child_items.length > 0) {\r\n              item.child_items.map((child, index) => {\r\n                if (child.product_id === productID) {\r\n                  child.barcodes = [{\r\n                    barcode: this.state.addBarcodeText,\r\n                    created_at: \"\",\r\n                    id: 0,\r\n                    packing_count: \"1\",\r\n                    product_id: productID,\r\n                    updated_at: new Date()\r\n                  }]\r\n                }\r\n              })\r\n            } else {\r\n              if (item.product_id === productID) {\r\n                item.barcodes = [{\r\n                  barcode: this.state.addBarcodeText,\r\n                  created_at: \"\",\r\n                  id: 0,\r\n                  packing_count: \"1\",\r\n                  product_id: productID,\r\n                  updated_at: new Date()\r\n                }]\r\n              }\r\n            }\r\n          })\r\n        let unItem = order.order.unscanned_items.length > 0 && order.order.unscanned_items[0]\r\n        let item = unItem.child_items.length > 0 ? unItem.child_items[0] : unItem\r\n        this.clickScan(item)\r\n        this.setState({ addBarcodeWindow: false, addBarcodeText: \"\", addBarcodeItem: \"\", order, updateProductApiCall: \"\" })\r\n      }\r\n    }\r\n\r\n    if (updateAliasSuccess && this.props && this.props.updateAlias) {\r\n      if (this.props.updateAlias.status) {\r\n        let fetchListData = this.state.shipmentOrder\r\n        fetchListData.input = this.state.order.order.increment_id\r\n        this.props.SearchScanpackOrder(fetchListData);\r\n        this.setState({ updateProductApiCall: new Date() })\r\n        updateAliasSuccess = false\r\n        updateProductInfoSuccess = true\r\n        updateFromProductSuccess = true\r\n      } else {\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  nav = async (order, completeOrder) => {\r\n    completeOrder && this.multipleTime()\r\n  }\r\n\r\n  //After the apis call update the status (scanned , order  not present)\r\n  statusFunction = (message) => {\r\n    let data = this.state.data\r\n    data[\"input\"] = \"\"\r\n    this.setState({ rfoTitle: message, data })\r\n  }\r\n\r\n  redirectFun() {\r\n    if (this.state.order && this.state.order.order && this.state.order.order.unscanned_items && this.state.order.order.unscanned_items.length === 0) {\r\n      this.props.SearchScanpackOrder(\"\", false)\r\n      this.props.navigation.navigate(\"ScanPack\", { update: true, time: new Date() })\r\n    }\r\n  }\r\n\r\n  /*RESPONSE SOUND AND IMAGE START*/\r\n  responseAction = (response, from) => {\r\n    let { play_success_sound, show_success_image, success_image_time, play_fail_sound, show_fail_image, fail_image_time, play_order_complete_sound, show_order_complete_image, order_complete_image_time } = this.state.scan_pack_settings;\r\n    let popup_show_time = 0.3; // default time\r\n    if (response === \"not_ready\") {\r\n      popup_show_time = fail_image_time;\r\n      show_fail_image ? this.setState({ scanFailAction: true, responseShowAction: true }) : null\r\n      play_fail_sound ? this.playSound(notReady) : null\r\n      this.setState({ bar_code: \"\" })\r\n    }\r\n    if (response === \"scan_fail\") {\r\n      popup_show_time = fail_image_time;\r\n      show_fail_image ? this.setState({ scanFailAction: true, responseShowAction: true }) : null\r\n      play_fail_sound ? this.playSound(scanFailSound) : null\r\n      this.setState({ bar_code: \"\" })\r\n    }\r\n    if (response === \"scan_success\") {\r\n      popup_show_time = success_image_time;\r\n      show_success_image ? this.setState({ scanSuccessAction: true, responseShowAction: true }) : null\r\n      play_success_sound ? this.playSound(scanSuccessSound) : null\r\n      this.setState({ bar_code: \"\", forSerialRecord: \"\" })\r\n    }\r\n    if (response === \"order_complete\") {\r\n      if (this.state.scan_pack_settings.post_scanning_option === \"None\") {\r\n        response = \"complete_order\"\r\n      } else {\r\n        let scanType = this.state.scan_pack_settings.post_scanning_option\r\n        this.postScanFunction(scanType)\r\n      }\r\n    }\r\n    if (response === \"complete_order\") {\r\n      popup_show_time = order_complete_image_time;\r\n      show_order_complete_image ? this.setState({ orderCompleteAction: true, responseShowAction: true }) : null\r\n      play_order_complete_sound ? this.playSound(completeSound) : null\r\n      this.nav(this.state.order, true)\r\n      this.setState({ bar_code: \"\" })\r\n    }\r\n    if (response === \"restart_action_complete\") {\r\n      this.nav(this.state.order)\r\n      this.setState({ bar_code: \"\" })\r\n    }\r\n    let showTime = popup_show_time * 300\r\n    setTimeout(() => { this.setState({ scanFailAction: false, scanSuccessAction: false, orderCompleteAction: false, responseShowAction: false }) }, showTime);\r\n    this.updateAction.bind(this);\r\n    try {\r\n      if (from === \"serialRecord\") {\r\n        this.serialRecord.current.focus()\r\n      } else {\r\n        // this.barcode.current.focus()\r\n      }\r\n    } catch (error) {\r\n    }\r\n  }\r\n  /*RESPONSE SOUND AND IMAGE END*/\r\n\r\n  playSound = async (response) => {\r\n    const sound = new Audio.Sound();\r\n    await sound.unloadAsync();\r\n\r\n    await sound.loadAsync(response);\r\n    await sound.playAsync();\r\n    this.currentFocus();\r\n    // this.sleep(300);\r\n  }\r\n\r\n  currentFocus = () => {\r\n    // try {\r\n    //   this.barcode.current.focus()\r\n    // } catch (error) {\r\n    // }  \r\n  }\r\n\r\n  sleep = async (ms) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, ms);\r\n    });\r\n  }\r\n\r\n  /* SUBMIT TRACKING START */\r\n  trackingSubmit(trackingNumber) {\r\n    let setting = this.state.scan_pack_settings\r\n    let trackingLength = trackingNumber.length\r\n    let temp_order = {}\r\n    let num = \"\"\r\n    let order = this.state.order\r\n    let order_num = order.order.id\r\n    let localLogs = this.state.localLogs\r\n    let strict_cc = this.state.general_settings.strict_cc\r\n    if (setting.post_scanning_option !== \"None\") {\r\n      if (this.state.timeSecond === true) {\r\n        let type = setting.post_scanning_option_second\r\n        if (type === \"Record\") {\r\n          if (setting.tracking_number_validation_enabled) {\r\n            let prefix = setting.tracking_number_validation_prefixes.split(\",\")\r\n            let validate = \"\"\r\n            let scan = false\r\n            let scanAccess = false\r\n            prefix.map((prefix, index) => {\r\n              let prefixLength = prefix.length\r\n              validate = trackingNumber.slice(0, prefixLength)\r\n              if (scanAccess === false) {\r\n                if (validate === prefix) {\r\n                  temp_order[\"id\"] = order_num\r\n                  temp_order[\"input\"] = trackingNumber\r\n                  temp_order[\"state\"] = 'scanpack.rfp.default'\r\n                  temp_order[\"event\"] = \"record\"\r\n                  temp_order[\"updated_at\"] = order.order.updated_at\r\n                  temp_order[\"increment_id\"] = order.order.increment_id\r\n                  // localLogs.push(temp_order)\r\n                  localLogs.splice(0, 0, temp_order)\r\n                  scan = true\r\n                  scanAccess = true\r\n                } else {\r\n                  scan = false\r\n                }\r\n              }\r\n            })\r\n            if (scan === true) {\r\n              // localLogs.push(temp_order)\r\n              localLogs.splice(0, 0, temp_order)\r\n              this.updateLog(temp_order, \"recordTracking\")\r\n              // this.updateLog(temp_order , \"tracking\")\r\n              // this.responseAction(\"complete_order\")\r\n            } else {\r\n              this.responseAction(\"scan_fail\")\r\n              this.alertBox(`The tracking number barcode you scanned does not match any of the saved prefixes. Please check your tracking validation settings or contact an admin.`, true)\r\n            }\r\n          } else {\r\n            temp_order[\"id\"] = order_num\r\n            temp_order[\"input\"] = trackingNumber\r\n            temp_order[\"state\"] = 'scanpack.rfp.default'\r\n            temp_order[\"event\"] = \"record\"\r\n            temp_order[\"updated_at\"] = order.order.updated_at\r\n            temp_order[\"increment_id\"] = order.order.increment_id\r\n            // localLogs.push(temp_order)\r\n            localLogs.splice(0, 0, temp_order)\r\n            // this.updateLog(temp_order , \"tracking\")\r\n            this.updateLog(temp_order, \"recordTracking\")\r\n            // this.responseAction(\"complete_order\")\r\n          }\r\n        }\r\n        if (type === \"Verify\") {\r\n          let trackNumber = order.order.tracking_num\r\n          if (setting.post_scanning_option === \"Record\" && setting.post_scanning_option_second === \"Verify\") {\r\n            trackNumber = 123\r\n          }\r\n          if (trackNumber !== null) {\r\n            let scan = false\r\n            if (this.state.scanSecondTime === true) {\r\n              if (trackingNumber === this.state.userInfo.confirmation_code || (strict_cc === false && trackingNumber === \"\")) {\r\n                scan = true\r\n              }\r\n            }\r\n            if (trackingNumber === trackNumber || scan === true) {\r\n              temp_order[\"id\"] = order_num\r\n              temp_order[\"input\"] = trackingNumber\r\n              temp_order[\"state\"] = this.state.trackingStateSecond === \"scanpack.rfp.no_match\" ? \"scanpack.rfp.no_match\" : \"scanpack.rfp.verifying\"\r\n              temp_order[\"state\"] =\r\n                temp_order[\"event\"] = \"verify\"\r\n              temp_order[\"updated_at\"] = order.order.updated_at\r\n              temp_order[\"increment_id\"] = order.order.increment_id\r\n              // localLogs.push(temp_order)\r\n              localLogs.splice(0, 0, temp_order)\r\n              // this.updateLog(temp_order , \"tracking\")\r\n              this.updateLog(temp_order, \"recordTracking\")\r\n              // this.responseAction(\"complete_order\")\r\n              this.setState({ trackingStateSecond: \"\" })\r\n            } else {\r\n              this.responseAction(\"scan_fail\")\r\n              this.setState(\r\n                {\r\n                  trackingStateSecond: \"scanpack.rfp.no_match\",\r\n                  scanSecondTime: true,\r\n                  postScanningMessageDetail: \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\r\n                }\r\n              )\r\n            }\r\n          } else {\r\n            let message = \"\"\r\n            if (order.order.tracking_num !== null && order.order.tracking_num !== \"\") {\r\n              message = \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\r\n            } else {\r\n              message = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\r\n            }\r\n            if (this.state.postScanSecond) {\r\n              if (trackingNumber === this.state.userInfo.confirmation_code || (strict_cc === false && trackingNumber === \"\")) {\r\n                temp_order[\"id\"] = order_num\r\n                temp_order[\"input\"] = trackingNumber\r\n                temp_order[\"state\"] = 'scanpack.rfp.no_tracking_info'\r\n                temp_order[\"event\"] = \"verify\"\r\n                temp_order[\"updated_at\"] = order.order.updated_at\r\n                temp_order[\"increment_id\"] = order.order.increment_id\r\n                // localLogs.push(temp_order)\r\n                localLogs.splice(0, 0, temp_order)\r\n                // this.updateLog(temp_order , \"tracking\")\r\n                this.updateLog(temp_order, \"recordTracking\")\r\n                // this.responseAction(\"complete_order\")\r\n                this.setState({ postScanSecond: false })\r\n              } else {\r\n                this.responseAction(\"scan_fail\")\r\n              }\r\n            }\r\n            this.setState({ postScanSecond: true, postScanningMessageDetail: message })\r\n          }\r\n        }\r\n      } else {\r\n        let type = setting.post_scanning_option\r\n        if (type === \"Record\") {\r\n          if (setting.tracking_number_validation_enabled) {\r\n            let prefix = setting.tracking_number_validation_prefixes.split(\",\")\r\n            let validate = \"\"\r\n            let scan = false\r\n            let scanAccess = false\r\n            prefix.map((prefix, index) => {\r\n              let prefixLength = prefix.length\r\n              validate = trackingNumber.slice(0, prefixLength)\r\n              if (scanAccess === false) {\r\n                if (validate === prefix) {\r\n                  temp_order[\"id\"] = order_num\r\n                  temp_order[\"input\"] = trackingNumber\r\n                  temp_order[\"state\"] = 'scanpack.rfp.default'\r\n                  temp_order[\"event\"] = \"record\"\r\n                  temp_order[\"updated_at\"] = order.order.updated_at\r\n                  temp_order[\"increment_id\"] = order.order.increment_id\r\n                  scan = true\r\n                  scanAccess = true\r\n                } else {\r\n                  scan = false\r\n                }\r\n              }\r\n            })\r\n            if (scan === true) {\r\n              localLogs.splice(0, 0, temp_order)\r\n              // localLogs.push(temp_order)\r\n              // this.updateLog(temp_order , \"tracking\")\r\n              this.updateLog(temp_order, \"recordTracking\")\r\n              if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\r\n                this.postScanFunction(setting.post_scanning_option_second, true)\r\n                this.setState({ trackingOrderInput: \"\" })\r\n                this.updateLog(temp_order, \"tracking\")\r\n              } else {\r\n                // this.responseAction(\"complete_order\")\r\n                this.updateLog(temp_order, \"recordTracking\")\r\n              }\r\n            } else {\r\n              this.responseAction(\"scan_fail\")\r\n              this.alertBox(`The tracking number barcode you scanned does not match any of the saved prefixes. Please check your tracking validation settings or contact an admin.`, true)\r\n            }\r\n          } else {\r\n            temp_order[\"id\"] = order_num\r\n            temp_order[\"input\"] = trackingNumber\r\n            temp_order[\"state\"] = 'scanpack.rfp.default'\r\n            temp_order[\"event\"] = \"record\"\r\n            temp_order[\"updated_at\"] = order.order.updated_at\r\n            temp_order[\"increment_id\"] = order.order.increment_id\r\n            if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\r\n              this.postScanFunction(setting.post_scanning_option_second, true)\r\n              this.setState({ trackingOrderInput: \"\" })\r\n              this.updateLog(temp_order, \"tracking\")\r\n            } else {\r\n              // localLogs.push(temp_order)\r\n              localLogs.splice(0, 0, temp_order)\r\n              this.updateLog(temp_order, \"recordTracking\")\r\n              // this.responseAction(\"complete_order\")\r\n            }\r\n          }\r\n        }\r\n        if (type === \"Verify\") {\r\n          let trackNumber = order.order.tracking_num\r\n          if (order.order.tracking_num !== null) {\r\n            let scan = false\r\n            if (this.state.scanSecondTime === true) {\r\n              if (trackingNumber === this.state.userInfo.confirmation_code || (strict_cc === false && trackingNumber === \"\")) {\r\n                scan = true\r\n              }\r\n            }\r\n            if ((trackingNumber.length > order.order.tracking_num.length) || (trackingNumber.length === order.order.tracking_num.length)) {\r\n              let tempNum = trackingLength - order.order.tracking_num.length\r\n              num = trackingNumber.slice(tempNum)\r\n            }\r\n            if (num === order.order.tracking_num || scan === true) {\r\n              temp_order[\"id\"] = order_num\r\n              temp_order[\"input\"] = trackingNumber\r\n              temp_order[\"state\"] = this.state.trackingState === \"scanpack.rfp.no_match\" ? \"scanpack.rfp.no_match\" : \"scanpack.rfp.verifying\"\r\n              temp_order[\"event\"] = \"verify\"\r\n              temp_order[\"updated_at\"] = order.order.updated_at\r\n              temp_order[\"increment_id\"] = order.order.increment_id\r\n              if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\r\n                this.postScanFunction(setting.post_scanning_option_second, true)\r\n                this.updateLog(temp_order, \"tracking\")\r\n              } else {\r\n                // localLogs.push(temp_order)\r\n                localLogs.splice(0, 0, temp_order)\r\n                this.updateLog(temp_order, \"recordTracking\")\r\n                // this.responseAction(\"complete_order\")\r\n              }\r\n            } else {\r\n              this.responseAction(\"scan_fail\")\r\n              this.setState({ trackingState: \"scanpack.rfp.no_match\", scanSecondTime: true, postScanningMessageDetail: \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\" })\r\n            }\r\n          } else {\r\n            let message = \"\"\r\n            if (order.order.tracking_num !== null && order.order.tracking_num !== \"\") {\r\n              message = \"The tracking number on the shipping label you just scanned does not match the tracking number imported with that order. Please verify that you have the correct shipping label and try your scan again. If you are aware of the issue and would like to proceed with the next order please scan your confirmation code to continue.\"\r\n            } else {\r\n              message = \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\r\n            }\r\n            if (this.state.postScan) {\r\n              if (trackingNumber === this.state.userInfo.confirmation_code || (strict_cc === false && trackingNumber === \"\")) {\r\n                temp_order[\"id\"] = order_num\r\n                temp_order[\"input\"] = trackingNumber\r\n                temp_order[\"state\"] = 'scanpack.rfp.no_tracking_info'\r\n                temp_order[\"event\"] = \"verify\"\r\n                temp_order[\"updated_at\"] = order.order.updated_at\r\n                temp_order[\"increment_id\"] = order.order.increment_id\r\n                if (setting.post_scanning_option_second !== \"None\" && setting.post_scanning_option_second !== setting.post_scanning_option) {\r\n                  this.postScanFunction(setting.post_scanning_option_second, true)\r\n                  this.setState({ postScan: false })\r\n                  this.updateLog(temp_order, \"tracking\")\r\n                } else {\r\n                  // localLogs.push(temp_order)\r\n                  localLogs.splice(0, 0, temp_order)\r\n                  this.updateLog(temp_order, \"recordTracking\")\r\n                  // this.responseAction(\"complete_order\")\r\n                  this.setState({ postScan: false })\r\n                }\r\n              } else {\r\n                this.responseAction(\"scan_fail\")\r\n                this.setState({ postScanningMessageDetail: message })\r\n              }\r\n            }\r\n            this.setState({ postScan: true, postScanningMessageDetail: message })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({ trackingOrderInput: \"\" })\r\n    // try {\r\n    //   this.barcode.current.focus()\r\n    // } catch (error) {\r\n    // }\r\n  }\r\n  /* SUBMIT TRACKING END */\r\n\r\n  postScanFunction = (type, timeSecond) => {\r\n    let scanPack = this.state.scan_pack_settings\r\n    let Order = this.state.order && this.state.order.order\r\n    if (timeSecond) {\r\n      if (type === \"Record\") {\r\n        this.setState(\r\n          {\r\n            trackingNumberView: true,\r\n            timeSecond: true,\r\n            postScanningFieldLabel: `Scan Tracking Number for Order ${Order.increment_id}`,\r\n            postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\r\n          }\r\n        )\r\n      }\r\n      if (type === \"Verify\") {\r\n        Order.tracking_num !== null\r\n          ?\r\n          this.setState(\r\n            {\r\n              trackingNumberView: true,\r\n              timeSecond: true,\r\n              postScanningFieldLabel: `Scan Shipping Label for Order ${Order.increment_id}`,\r\n              postScanningMessageDetail: \"Please scan the shipping label.\"\r\n            }\r\n          )\r\n          :\r\n          this.setState(\r\n            {\r\n              trackingNumberView: true,\r\n              timeSecond: true,\r\n              postScanningFieldLabel: `Scan Shipping Label for Order ${Order.increment_id}`,\r\n              postScanSecond: true,\r\n              postScanningMessageDetail: \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\r\n            }\r\n          )\r\n      }\r\n    } else {\r\n      if (type === \"Record\") {\r\n        this.setState(\r\n          {\r\n            trackingNumberView: true,\r\n            postScanningFieldLabel: `Scan Tracking Number for Order ${Order.increment_id}`,\r\n            postScanningMessageDetail: \"Please create the shipping label, adhere it to the package, and scan the tracking number to continue.\"\r\n          }\r\n        )\r\n      }\r\n      if (type === \"Verify\") {\r\n        Order.tracking_num !== null\r\n          ?\r\n          this.setState(\r\n            {\r\n              trackingNumberView: true,\r\n              postScanningFieldLabel: `Scan Shipping Label for Order ${Order.increment_id}`,\r\n              postScanningMessageDetail: \"Please scan the shipping label.\"\r\n            }\r\n          )\r\n          :\r\n          this.setState(\r\n            {\r\n              trackingNumberView: true,\r\n              postScanningFieldLabel: `Scan Shipping Label for Order ${Order.increment_id}`,\r\n              postScan: true,\r\n              postScanningMessageDetail: \"Your Scan & Pack settings call for shipping label verification but no tracking information was imported with this order. Please scan your confirmation code or press enter to continue.\"\r\n            }\r\n          )\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  updateAction = async (time) => {\r\n    const soundObject = new Audio.Sound();\r\n    await soundObject.unloadAsync();\r\n    this.setState({ bar_code: \"\" })\r\n  }\r\n\r\n  /*Send log at the back end method start*/\r\n  multipleTime = async () => {\r\n    let getItem = await AsyncStorage.getItem(\"logsArray\")\r\n    let convert = getItem && JSON.parse(getItem)\r\n    this.props.SubmitLog(convert)\r\n    setTimeout(() => this.redirectFun(), 1000);\r\n  }\r\n  /*Send log at the back end method end*/\r\n\r\n  /* FOR SUBMIT THE NOTE AND ISSUE ACTION BARCODE START */\r\n  submitAlert = () => {\r\n    let order_num = this.state.order.order.id\r\n    let order = this.state.order\r\n    let notes_fromPacker = this.state.notes_fromPacker\r\n    order.order.notes_fromPacker = notes_fromPacker\r\n    let localLogs = this.state.localLogs\r\n    let temp_order = {}\r\n    let event = \"\"\r\n    temp_order[\"message\"] = notes_fromPacker;\r\n    temp_order[\"input\"] = \"\";\r\n    temp_order[\"id\"] = order_num;\r\n    temp_order[\"order_item_id\"] = \"\";\r\n    temp_order[\"time\"] = new Date();\r\n    temp_order[\"state\"] = \"\";\r\n    temp_order[\"event\"] = \"note\"\r\n    temp_order[\"SKU\"] = \"\"\r\n    temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\r\n    temp_order[\"updated_at\"] = order.order.updated_at\r\n    temp_order[\"increment_id\"] = order.order.increment_id\r\n    if (this.state.issueFlag) {\r\n      this.updateLog(temp_order, \"issue\")\r\n    }\r\n    if (this.state.noteFlag) {\r\n      this.updateLog(temp_order, \"note\")\r\n    }\r\n    // localLogs.push(temp_order)\r\n    this.setState({ issueFlag: false, noteFlag: false, alert: false, notes_fromPacker: \"\", order })\r\n    // try {\r\n    //   this.barcode.current.focus()\r\n    // } catch (error) {\r\n    // }\r\n  }\r\n  /* FOR SUBMIT THE NOTE AND ISSUE ACTION BARCODE END*/\r\n\r\n  /* BULK SCAN START */\r\n  scanAllItem = () => {\r\n    let order = this.state.order\r\n    let count = parseInt(this.state.typeScanCount)\r\n    let bar_code = this.state.scan_pack_settings.type_scan_code\r\n    let unscanned_items = order.order.unscanned_items\r\n    let items = unscanned_items && unscanned_items[0]\r\n    let scanned_items = order.order.scanned_items\r\n    let log = this.state.log\r\n    let order_num = order.order.id\r\n    let next_state = order.next_state\r\n    let general_settings = this.state.general_settings\r\n    let temp_order = {}\r\n    let itemFound = false\r\n    let localLogs = this.state.localLogs\r\n    let SKU = \"\"\r\n    let orderComplete = false\r\n    if (general_settings.conf_code_product_instruction === \"always\") {\r\n      this.setState({ productConfirmationCheck: true, blockItemType: \"bulk_scan\" })\r\n      blockScan = true\r\n    } else if (general_settings.conf_code_product_instruction === \"optional\") {\r\n      if (items.child_items && items.child_items.length >= 1) {\r\n        if (items.child_items[0].confirmation === true) {\r\n          this.setState({ productConfirmationCheck: true, blockItemToScan: items.child_items[0], blockItemType: \"bulk_scan\" })\r\n          blockScan = true\r\n        } else if (items.confirmation === true) {\r\n          this.setState({ productConfirmationCheck: true, blockItemToScan: items, blockItemType: \"bulk_scan\" })\r\n          blockScan = true\r\n        }\r\n      }\r\n    }\r\n    if (blockScan === false || confirmProductConfirmation === true) {\r\n      if (items.product_type === \"individual\" && items.child_items && items.child_items.length > 0) {\r\n        let serialScanAccess = false\r\n        if (enableSerial || items.child_items[0].record_serial === false && items.child_items[0].second_record_serial === false) {\r\n          serialScanAccess = true\r\n        } else {\r\n          if ((items.child_items[0].record_serial) || (items.child_items[0].second_record_serial)) {\r\n            let eventType = \"scan_all_item\"\r\n            this.setState({ serialRecordPopUpShow: true, type: eventType })\r\n          }\r\n        }\r\n        if (serialScanAccess) {\r\n          items.child_items && items.child_items.length > 0 && items.child_items.map((childItem, index) => {\r\n            if (index === 0) {\r\n              if (scanned_items.length > 0) {\r\n                scanned_items.map((scan) => {\r\n                  if (childItem.product_id === scan.product_id && itemFound === false) {\r\n                    scan.scanned_qty = childItem.scanned_qty + childItem.qty_remaining\r\n                    childItem.qty_remaining = 0\r\n                    items.child_items.splice(index, 1)\r\n                    itemFound = true\r\n                    SKU = childItem.sku\r\n                    items.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                  } else {\r\n                    if (childItem.scanned_qty === 0 && itemFound === false) {\r\n                      childItem.scanned_qty = childItem.scanned_qty + childItem.qty_remaining\r\n                      childItem.qty_remaining = 0\r\n                      // scanned_items.push(childItem)\r\n                      scanned_items.splice(0, 0, childItem)\r\n                      items.child_items.splice(index, 1)\r\n                      itemFound = true\r\n                      SKU = childItem.sku\r\n                      items.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                    }\r\n                  }\r\n                })\r\n              } else {\r\n                if (itemFound === false) {\r\n                  childItem.scanned_qty = childItem.scanned_qty + childItem.qty_remaining\r\n                  childItem.qty_remaining = 0\r\n                  // scanned_items.push(childItem)\r\n                  scanned_items.splice(0, 0, childItem)\r\n                  items.child_items.splice(index, 1)\r\n                  itemFound = true\r\n                  SKU = childItem.sku\r\n                  items.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                }\r\n              }\r\n              if (unscanned_items.length === 0) {\r\n                orderComplete = true\r\n              }\r\n            }\r\n            return childItem\r\n          })\r\n        }\r\n      } else {\r\n        if (items && items.qty_remaining > 0) {\r\n          let serialScanAccess = false\r\n          if (enableSerial || items.record_serial === false && items.second_record_serial === false) {\r\n            serialScanAccess = true\r\n          } else {\r\n            if ((items.record_serial) || (items.second_record_serial)) {\r\n              let eventType = \"submit_type_scan\"\r\n              this.setState({ serialRecordPopUpShow: true, type: eventType })\r\n            }\r\n          }\r\n          if (serialScanAccess) {\r\n            unscanned_items.map((unscan, index) => {\r\n              if (index === 0) {\r\n                if (scanned_items.length > 0) {\r\n                  scanned_items.map((scan) => {\r\n                    if (unscan.order_item_id === scan.order_item_id && itemFound === false) {\r\n                      scan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining\r\n                      scan.qty_remaining = 0\r\n                      unscanned_items.splice(index, 1)\r\n                      itemFound = true\r\n                      SKU = unscan.sku\r\n                    } else {\r\n                      if (unscan.scanned_qty === 0 && itemFound === false) {\r\n                        unscan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining\r\n                        unscan.qty_remaining = 0\r\n                        // scanned_items.push(unscan)\r\n                        scanned_items.splice(0, 0, unscan)\r\n                        unscanned_items.splice(index, 1)\r\n                        itemFound = true\r\n                        SKU = unscan.sku\r\n                      }\r\n                    }\r\n                  })\r\n                } else {\r\n                  unscan.scanned_qty = unscan.scanned_qty + unscan.qty_remaining\r\n                  unscan.qty_remaining = 0\r\n                  // scanned_items.push(unscan)\r\n                  scanned_items.splice(0, 0, unscan)\r\n                  unscanned_items.splice(index, 1)\r\n                  SKU = unscan.sku\r\n                }\r\n                if (unscanned_items.length === 0) {\r\n                  orderComplete = true\r\n                }\r\n              }\r\n              return unscan\r\n            })\r\n          }\r\n        }\r\n      }\r\n      if (this.state.type == \"scan_all_item\") {\r\n      } else {\r\n        temp_order[\"input\"] = bar_code;\r\n        temp_order[\"id\"] = order_num;\r\n        temp_order[\"order_item_id\"] = items && items.order_item_id;\r\n        temp_order[\"time\"] = new Date();\r\n        temp_order[\"state\"] = next_state;\r\n        temp_order[\"event\"] = \"bulk_scan\"\r\n        temp_order[\"SKU\"] = SKU ? SKU : \"\"\r\n        temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\r\n        temp_order[\"updated_at\"] = order.order.updated_at\r\n        temp_order[\"increment_id\"] = order.order.increment_id\r\n        this.updateLog(temp_order, \"skip_curser\")\r\n        // localLogs.push(temp_order)\r\n        localLogs.splice(0, 0, temp_order)\r\n      }\r\n      this.setState({ typeScanAlert: false, typeScanCount: \"\" })\r\n      enableSerial = false\r\n      if (orderComplete === true) {\r\n        this.updateLog(temp_order, \"order_complete\")\r\n      } else {\r\n        this.responseAction(\"scan_success\")\r\n      }\r\n      confirmProductConfirmation = false\r\n    }\r\n    // try {\r\n    //   this.barcode.current.focus()\r\n    // } catch (error) {\r\n    // }\r\n  }\r\n  /* BULK SCAN END */\r\n\r\n  /* TYPE SCAN START*/\r\n  submitTypeScan = () => {\r\n    let order = this.state.order\r\n    let count = parseInt(this.state.typeScanCount)\r\n    let bar_code = this.state.scan_pack_settings.type_scan_code\r\n    let unscanned_items = order.order.unscanned_items\r\n    let items = unscanned_items && unscanned_items[0]\r\n    let scanned_items = order.order.scanned_items\r\n    // let log =  this.state.log\r\n    let order_num = order.order.id\r\n    let next_state = order.next_state\r\n    let temp_order = {}\r\n    let remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null\r\n    let scanAccess = false\r\n    let scanpush = false\r\n    let match = false\r\n    let skip = false\r\n    let localLogs = this.state.localLogs\r\n    let orderInputType = items.product_type === \"individual\" && items.child_items.length > 0 ? items.child_items[0].barcodes[0].barcode : items.barcodes[0].barcode\r\n    let SKU = \"\"\r\n    if (this.state.type === \"submit_type_scan\") {\r\n      count = 1\r\n    } else {\r\n      count = this.state.typeScanState !== this.state.typeScanDeductCountState ? count - 1 : count\r\n    }\r\n    if (items.product_type === \"individual\" && items.child_items.length > 0) {\r\n      if (items.child_items[0].qty_remaining >= count) {\r\n        let serialScanAccess = false\r\n        if (enableSerial || items.child_items[0].record_serial === false && items.child_items[0].second_record_serial === false) {\r\n          serialScanAccess = true\r\n        } else {\r\n          if ((items.child_items[0].record_serial) || (items.child_items[0].second_record_serial)) {\r\n            let eventType = \"submit_type_scan\"\r\n            this.setState({ serialRecordPopUpShow: true, type: eventType })\r\n          }\r\n        }\r\n        if (serialScanAccess) {\r\n          items.child_items && items.child_items.map((child, index) => {\r\n            if (index === 0) {\r\n              if (scanned_items.length > 0) {\r\n                scanned_items.map((scan) => {\r\n                  let count_item = count\r\n                  if (child.product_id === scan.product_id) {\r\n                    child.qty_remaining = child.qty_remaining - count_item\r\n                    child.scanned_qty = child.scanned_qty + count_item\r\n                    scan.qty_remaining = child.qty_remaining\r\n                    scan.scanned_qty = child.scanned_qty\r\n                    child.qty_remaining === 0 && items.child_items.splice(index, 1)\r\n                    SKU = child.sku\r\n                  } else {\r\n                    if (child.qty_remaining === count && child.scanned_qty === 0) {\r\n                      child.qty_remaining = child.qty_remaining - count_item\r\n                      child.scanned_qty = child.scanned_qty + count_item\r\n                      scan.qty_remaining = child.qty_remaining\r\n                      scan.scanned_qty = child.scanned_qty\r\n                      // scanned_items.push(child)\r\n                      scanned_items.splice(0, 0, child)\r\n                      child.qty_remaining === 0 && items.child_items.splice(index, 1)\r\n                      items.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                      SKU = child.sku\r\n                    } else {\r\n                      if (child.qty_remaining >= count && child.scanned_qty === 0) {\r\n                        child.qty_remaining = child.qty_remaining - count_item\r\n                        child.scanned_qty = child.scanned_qty + count_item\r\n                        scan.qty_remaining = child.qty_remaining\r\n                        scan.scanned_qty = child.scanned_qty\r\n                        // scanned_items.push(child)\r\n                        scanned_items.splice(0, 0, child)\r\n                        child.qty_remaining === 0 && items.child_items.splice(index, 1)\r\n                        SKU = child.sku\r\n                      }\r\n                    }\r\n                  }\r\n                })\r\n                if (child.qty_remaining === 0) {\r\n                  items.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                }\r\n              } else {\r\n                if (child.qty_remaining === count) {\r\n                  let count_item = count\r\n                  child.qty_remaining = child.qty_remaining - count_item\r\n                  child.scanned_qty = child.scanned_qty + count_item\r\n                  // scanned_items.push(child)\r\n                  scanned_items.splice(0, 0, child)\r\n                  child.qty_remaining === 0 && items.child_items.splice(index, 1)\r\n                  items.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                  SKU = child.sku\r\n                } else {\r\n                  if (child.qty_remaining >= count && child.scanned_qty === 0) {\r\n                    let count_item = count\r\n                    child.qty_remaining = child.qty_remaining - count_item\r\n                    child.scanned_qty = child.scanned_qty + count_item\r\n                    child.qty_remaining === 0 && items.child_items.splice(index, 1)\r\n                    // scanned_items.push(child)\r\n                    scanned_items.splice(0, 0, child)\r\n                    SKU = child.sku\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          })\r\n          if (unscanned_items.length > 0) {\r\n            this.responseAction(\"scan_success\")\r\n          } else {\r\n            this.responseAction(\"order_complete\")\r\n          }\r\n        }\r\n      } else {\r\n        this.alertBox(`The quantity entered exceeds the remaining ${items.child_items[0].qty_remaining} pieces in the order. Please try again`, true)\r\n        skip = true\r\n      }\r\n    } else {\r\n      if (items.qty_remaining >= count) {\r\n        let serialScanAccess = false\r\n        if (enableSerial || items.record_serial === false && items.second_record_serial === false) {\r\n          serialScanAccess = true\r\n        } else {\r\n          if ((items.record_serial) || (items.second_record_serial)) {\r\n            let eventType = \"submit_type_scan\"\r\n            this.setState({ serialRecordPopUpShow: true, type: eventType })\r\n          }\r\n        }\r\n        if (serialScanAccess) {\r\n          unscanned_items.map((unscan, index) => {\r\n            if (index === 0) {\r\n              if (scanned_items.length > 0) {\r\n                scanned_items.map((scan) => {\r\n                  let count_item = count\r\n                  if (unscan.order_item_id === scan.order_item_id) {\r\n                    unscan.qty_remaining = unscan.qty_remaining - count_item\r\n                    unscan.scanned_qty = unscan.scanned_qty + count_item\r\n                    scan.qty_remaining = unscan.qty_remaining\r\n                    scan.scanned_qty = unscan.scanned_qty\r\n                    SKU = unscan.sku\r\n                  } else {\r\n                    if (unscan.qty_remaining === count && unscan.scanned_qty === 0) {\r\n                      unscan.qty_remaining = unscan.qty_remaining - count_item\r\n                      unscan.scanned_qty = unscan.scanned_qty + count_item\r\n                      scan.qty_remaining = unscan.qty_remaining\r\n                      scan.scanned_qty = unscan.scanned_qty\r\n                      // scanned_items.push(unscan)\r\n                      scanned_items.splice(0, 0, unscan)\r\n                      unscanned_items.splice(index, 1)\r\n                      SKU = unscan.sku\r\n                    } else {\r\n                      if (unscan.qty_remaining >= count && unscan.scanned_qty === 0) {\r\n                        unscan.qty_remaining = unscan.qty_remaining - count_item\r\n                        unscan.scanned_qty = unscan.scanned_qty + count_item\r\n                        scan.qty_remaining = unscan.qty_remaining\r\n                        scan.scanned_qty = unscan.scanned_qty\r\n                        // scanned_items.push(unscan)\r\n                        scanned_items.splice(0, 0, unscan)\r\n                        SKU = unscan.sku\r\n                      }\r\n                    }\r\n                  }\r\n                })\r\n                if (unscan.qty_remaining === 0) {\r\n                  unscanned_items.splice(index, 1)\r\n                }\r\n              } else {\r\n                if (unscan.qty_remaining === count) {\r\n                  let count_item = count\r\n                  unscan.qty_remaining = unscan.qty_remaining - count_item\r\n                  unscan.scanned_qty = unscan.scanned_qty + count_item\r\n                  // scanned_items.push(unscan)\r\n                  scanned_items.splice(0, 0, unscan)\r\n                  unscanned_items.splice(index, 1)\r\n                  SKU = unscan.sku\r\n                } else {\r\n                  if (unscan.qty_remaining >= count && unscan.scanned_qty === 0) {\r\n                    let count_item = count\r\n                    unscan.qty_remaining = unscan.qty_remaining - count_item\r\n                    unscan.scanned_qty = unscan.scanned_qty + count_item\r\n                    // scanned_items.push(unscan)\r\n                    scanned_items.splice(0, 0, unscan)\r\n                    SKU = unscan.sku\r\n                  }\r\n                }\r\n              }\r\n              if (unscanned_items.length > 0) {\r\n                this.responseAction(\"scan_success\")\r\n              } else {\r\n                this.responseAction(\"order_complete\")\r\n              }\r\n            }\r\n          })\r\n        }\r\n      } else {\r\n        this.alertBox(`The quantity entered exceeds the remaining ${items.qty_remaining} pieces in the order. Please try again`, true)\r\n        skip = true\r\n      }\r\n    }\r\n    if (this.state.type === \"submit_type_scan\") {\r\n\r\n    } else {\r\n      temp_order[\"input\"] = orderInputType\r\n      temp_order[\"id\"] = order_num\r\n      temp_order[\"order_item_id\"] = items && items.order_item_id\r\n      temp_order[\"time\"] = new Date()\r\n      temp_order[\"box_id\"] = null\r\n      temp_order[\"state\"] = 'scanpack.rfp.default'\r\n      temp_order[\"count\"] = count;\r\n      temp_order[\"event\"] = \"type_scan\"\r\n      temp_order[\"SKU\"] = SKU ? SKU : \"\"\r\n      temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\r\n      temp_order[\"updated_at\"] = order.order.updated_at\r\n      temp_order[\"increment_id\"] = order.order.increment_id\r\n      // if(this.state.typeScanState !== unscanned_items[0] && unscanned_items[0].sku){\r\n      //   this.setState({typeScanState: \"\"})\r\n      // }\r\n      if (skip === false) {\r\n        this.updateLog(temp_order)\r\n        // localLogs.push(temp_order)\r\n        localLogs.splice(0, 0, temp_order)\r\n      }\r\n    }\r\n    if (count <= remain_qty) {\r\n      this.setState({ typeScanAlert: false, typeScanCount: \"\" })\r\n    }\r\n    enableSerial = false\r\n    this.setState({ typeScanCount: \"\", typeScanDeductCountState: this.state.typeScanState, typeScanAlert: false })\r\n    // try {\r\n    //   this.barcode.current.focus()\r\n    // } catch (error) {\r\n    // }\r\n  }\r\n  /* TYPE SCAN END */\r\n\r\n  alertBox = (message, skip, messageTypeSuccess) => {\r\n    if (messageTypeSuccess === true) {\r\n      this.setState({ popUpModelShow: true, message: message, messageTypeSuccess: true })\r\n    } else {\r\n      this.setState({ popUpModelShow: true, message: message })\r\n    }\r\n    setTimeout(function () {\r\n      this.setState({ popUpModelShow: false, message: \"\", messageTypeSuccess: false });\r\n    }.bind(this), 4000);\r\n    // try {\r\n    //   this.barcode.current.focus()\r\n    // } catch (error) {\r\n    // }\r\n  }\r\n\r\n  closeAlert = () => {\r\n    this.setState({\r\n      alert: false,\r\n      notes_fromPacker: \"\",\r\n      typeScanAlert: false,\r\n      typeScanCount: 0,\r\n      popUpModelShow: false,\r\n      addBarcodeWindow: false,\r\n      message: \"\",\r\n      serialRecordPopUpShow: false,\r\n      serialRecordInput: \"\",\r\n      serialRecordTwo: \"\",\r\n      serialRecordOne: \"\",\r\n      clickScanConfirmation: false,\r\n      confirmationCheckItem: null,\r\n      clickScanConfirmInput: \"\",\r\n      productConfirmationCheck: false,\r\n      errorMessageProductConfirmationCheck: false,\r\n      errorMessageClickScanConfirmation: false,\r\n      orderConfirmPopUp: false\r\n    })\r\n    this.currentFocus()\r\n    enableSerial = false\r\n  }\r\n\r\n  noBarcodeScan = (item) => {\r\n  }\r\n\r\n  /*Product Confirmation Submit Start*/\r\n  ProductConfirmationCheckFun = () => {\r\n    let userCode = this.state.userInfo.confirmation_code\r\n    let userInput = this.state.productConfirmationCheckInput\r\n    if (userInput !== \"\") {\r\n      if (userCode === userInput) {\r\n        // 12345678900\r\n        if (this.state.blockItemType === \"item_present\") {\r\n          confirmProductConfirmation = true\r\n          this.clickScan(this.state.blockItemToScan)\r\n        }\r\n        if (this.state.blockItemType === \"barcode\") {\r\n          confirmProductConfirmation = true\r\n          this.scanBarcode()\r\n        }\r\n        if (this.state.blockItemType === \"bulk_scan\") {\r\n          confirmProductConfirmation = true\r\n          this.scanAllItem()\r\n        }\r\n        this.setState({ productConfirmationCheckInput: \"\", productConfirmationCheck: false })\r\n      } else {\r\n        this.setState({ productConfirmationCheckInput: \"\" })\r\n        this.responseAction(\"scan_fail\")\r\n      }\r\n    } else {\r\n      if (this.state.generalSettings.strict_cc === true) {\r\n        this.responseAction(\"not_ready\")\r\n      } else {\r\n        if (this.state.blockItemType === \"item_present\") {\r\n          confirmProductConfirmation = true\r\n          this.clickScan(this.state.blockItemToScan)\r\n        }\r\n        if (this.state.blockItemType === \"barcode\") {\r\n          confirmProductConfirmation = true\r\n          this.scanBarcode()\r\n        }\r\n        if (this.state.blockItemType === \"bulk_scan\") {\r\n          confirmProductConfirmation = true\r\n          this.scanAllItem()\r\n        }\r\n        this.setState({ productConfirmationCheckInput: \"\", productConfirmationCheck: false })\r\n      }\r\n    }\r\n  }\r\n  /*Product Confirmation Submit End*/\r\n\r\n  /*Product Confirmation Input Field On Change Start*/\r\n  handleProductConfirmationCheckInput = (e) => {\r\n    this.setState({ productConfirmationCheckInput: e, errorMessageProductConfirmationCheck: false })\r\n  }\r\n  /*Product Confirmation Input Field On Change End*/\r\n\r\n  /*Order Confirmation Submit Start*/\r\n  OrderConfirmationCheckFun = () => {\r\n    let userCode = this.state.userInfo.confirmation_code\r\n    let userInput = this.state.OrderConfirmationCheckInput\r\n    if (userInput !== \"\") {\r\n      if (userCode === userInput) {\r\n        this.setState({ orderConfirmPopUp: false })\r\n      } else {\r\n        this.setState({ OrderConfirmationCheckInput: \"\" })\r\n        this.responseAction(\"scan_fail\")\r\n      }\r\n    } else {\r\n      if (this.state.generalSettings.strict_cc === true) {\r\n        this.responseAction(\"not_ready\")\r\n      } else {\r\n        this.setState({ orderConfirmPopUp: false })\r\n        this.currentFocus()\r\n      }\r\n    }\r\n  }\r\n  /*Order Confirmation Submit End*/\r\n\r\n  /*Order Confirmation Input Field On Change Start*/\r\n  handleOrderConfirmationCheckInput = (e) => {\r\n    this.setState({ OrderConfirmationCheckInput: e, errorMessageOrderConfirmationCheck: false })\r\n  }\r\n  /*Order Confirmation Input Field On Change End*/\r\n\r\n\r\n  /* RESTART ACTION BARCODE METHOD START*/\r\n  // restart = () => {\r\n  //   let order = this.state.order\r\n  //   if(order){\r\n  //     let temp = []\r\n  //     let unscanned_items = order.order.unscanned_items\r\n  //     let scanned_items = order.order.scanned_items\r\n  //     order.order.scanned_items.map((scan , index) => {\r\n  //         if(scan.qty_remaining !== 0){\r\n  //           scan.qty_remaining = scan.scanned_qty\r\n  //           scan.scanned_qty = 0\r\n  //           unscanned_items.unshift(scan)\r\n  //         }\r\n  //     })\r\n  //     order.order.scanned_items = []\r\n  //   }\r\n  // }\r\n  /* RESTART ACTION BARCODE METHOD END*/\r\n\r\n  restartButton = () => {\r\n    let order = this.state.order\r\n    let scanned_items = order.order.scanned_items\r\n    let unscanned_items = order.order.unscanned_items\r\n    let scan_pack_settings = this.state.scan_pack_settings\r\n    let order_num = order.order.id\r\n    let Log_count = \"\"\r\n    let SKU = \"\"\r\n    let product_name = \"\"\r\n    let localLogs = this.state.localLogs\r\n    let remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null\r\n    let temp_order = {}\r\n    let ActionBarcode = true\r\n    temp_order[\"input\"] = scan_pack_settings.restart_code;\r\n    temp_order[\"id\"] = order_num;\r\n    temp_order[\"order_item_id\"] = unscanned_items.length > 0 ? unscanned_items[0].order_item_id : (scanned_items.length > 0 ? scanned_items[0].order_item_id : \"\")\r\n    temp_order[\"time\"] = new Date()\r\n    temp_order[\"rem_qty\"] = remain_qty\r\n    temp_order[\"SKU\"] = SKU ? SKU : unscanned_items[0].sku\r\n    temp_order[\"Log_count\"] = Log_count\r\n    temp_order[\"product_name\"] = product_name\r\n    temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\r\n    temp_order[\"state\"] = 'scanpack.rfp.default'\r\n    temp_order[\"event\"] = \"regular\"\r\n    temp_order[\"updated_at\"] = order.order.updated_at\r\n    temp_order[\"increment_id\"] = order.order.increment_id\r\n    this.updateLog(temp_order, \"RESTART\")\r\n    if (this.state.serialRecordInput === \"\") {\r\n      // localLogs.push(temp_order)\r\n      localLogs.splice(0, 0, temp_order)\r\n    }\r\n    this.props.navigation.navigate(\"ScanPack\")\r\n  }\r\n\r\n  addNote = () => {\r\n    if (this.state.order) {\r\n      let order = this.state.order\r\n      let notes_fromPacker = order.order.notes_fromPacker\r\n      this.setState({ alert: true, notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker, noteFlag: true })\r\n    }\r\n  }\r\n\r\n  saveChanges = async () => {\r\n    let getItem = await AsyncStorage.getItem(\"logsArray\")\r\n    let count = getItem !== null && JSON.parse(getItem)\r\n    if (count && count.length > 0) {\r\n      this.alertBox(`Save Changes Successful`, true)\r\n      this.multipleTime()\r\n    }\r\n  }\r\n\r\n  /*SCAN BARCODE METHOD START*/\r\n  scanBarcode = (clickBarcode, type) => {\r\n    if (this.state.order) {\r\n      let order = this.state.order\r\n      let scan_pack_settings = this.state.scan_pack_settings\r\n      let localScannedItems = this.state.scanned_items\r\n      let scanned_items = order.order.scanned_items\r\n      let notes_fromPacker = order.order.notes_fromPacker\r\n      let unscanned_items = order.order.unscanned_items\r\n      let bar_code = this.state.bar_code\r\n      let event_code = this.state.bar_code\r\n      let ActionBarcode = false\r\n      let remain_qty = unscanned_items.length > 0 ? unscanned_items[0].qty_remaining : null\r\n      if (type === \"item_present\") {\r\n        bar_code = clickBarcode\r\n        event_code = clickBarcode\r\n        let tempArr = [{\r\n          barcode: \"noBarcode\",\r\n          id: 0,\r\n          is_multipack_barcode: true,\r\n          packing_count: \"1\"\r\n        }]\r\n        order.order.unscanned_items.map((noCode, index) => {\r\n          if (noCode.barcodes && noCode.barcodes.length === 0) {\r\n            noCode.barcodes = tempArr\r\n          }\r\n        })\r\n      } else {\r\n        bar_code = this.state.bar_code === \"\" ? this.state.forSerialRecord : this.state.bar_code\r\n      }\r\n      let findKit3 = false\r\n      let log = this.state.log\r\n      let order_num = order.order.id\r\n      let next_state = order.next_state\r\n      let general_settings = this.state.general_settings\r\n      let master_switch = general_settings && general_settings.master_switch\r\n      let temp_order = {}\r\n      let stop_add_log = false;\r\n      let lowercase = false;\r\n      let skipError = false;\r\n      let event_scanned = false;\r\n      let SKU = \"\";\r\n      let Log_count = \"\";\r\n      let localLogs = this.state.localLogs\r\n      let product_name = \"\"\r\n      let rejectLocalLog = true\r\n      let Action_Type = \"\"\r\n      let order_complete_flag = false\r\n      let qty_remain = 0\r\n      let scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : \"\"\r\n      if (bar_code !== \"\") {\r\n        if (scan_pack_settings.escape_string_enabled && type !== \"item_present\") {\r\n          let removeSpaceBarCode = bar_code\r\n          if (scan_pack_settings.first_escape_string_enabled) {\r\n            let check = scan_pack_settings.escape_string\r\n            if (removeSpaceBarCode && removeSpaceBarCode.includes(check) && scan_pack_settings.first_escape_string_enabled !== \"\") {\r\n              let tempIndex = removeSpaceBarCode.indexOf(check)\r\n              bar_code = removeSpaceBarCode.slice(0, tempIndex)\r\n            }\r\n          }\r\n          if (scan_pack_settings.second_escape_string_enabled) {\r\n            let check = scan_pack_settings.second_escape_string\r\n            if (removeSpaceBarCode && removeSpaceBarCode.includes(check) && scan_pack_settings.second_escape_string !== \"\") {\r\n              let tempIndex = removeSpaceBarCode.indexOf(check)\r\n              bar_code = removeSpaceBarCode.slice(0, tempIndex)\r\n            }\r\n          }\r\n        }\r\n        if (scan_pack_settings.note_from_packer_code_enabled) {\r\n          if (scan_pack_settings.note_from_packer_code === bar_code) {\r\n            stop_add_log = true\r\n            skipError = true\r\n            this.setState({ alert: true, notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker, noteFlag: true, bar_code: \"\" })\r\n          }\r\n        }\r\n        if (scan_pack_settings && scan_pack_settings.restart_code_enabled && scan_pack_settings.restart_code === bar_code) {\r\n          skipError = true\r\n          Action_Type = \"RESTART\"\r\n          ActionBarcode = true\r\n          // this.responseAction(\"restart_action_complete\")\r\n        }\r\n        if (scan_pack_settings.type_scan_code_enabled) {\r\n          if (scan_pack_settings.type_scan_code === bar_code) {\r\n            if (this.state.typeScanState !== \"\") {\r\n              if (unscanned_items[0].product_type === \"individual\" && unscanned_items[0].child_items.length > 0) {\r\n                if (this.state.typeScanState === unscanned_items[0].child_items[0].sku) {\r\n                  if ((unscanned_items[0].child_items[0].record_serial) || (unscanned_items[0].child_items[0].second_record_serial)) {\r\n                    this.setState({ typeScanAlert: true, type: \"submit_type_scan\" })\r\n                  } else {\r\n                    this.setState({ typeScanAlert: true })\r\n                  }\r\n                } else {\r\n                  this.alertBox(\"Please scan the item once before triggering a type-in count.\")\r\n                }\r\n              } else {\r\n                if (this.state.typeScanState === unscanned_items[0].sku) {\r\n                  if ((unscanned_items[0].record_serial) || (unscanned_items[0].second_record_serial)) {\r\n                    this.setState({ typeScanAlert: true, type: \"submit_type_scan\" })\r\n                  } else {\r\n                    this.setState({ typeScanAlert: true })\r\n                  }\r\n                } else {\r\n                  this.alertBox(\"Please scan the item once before triggering a type-in count.\")\r\n                }\r\n              }\r\n            } else {\r\n              this.alertBox(\"Please scan the item once before triggering a type-in count.\")\r\n            }\r\n            skipError = true\r\n            stop_add_log = true\r\n          }\r\n        }\r\n        if (scan_pack_settings.scanned) {\r\n          if (scan_pack_settings.scanned_barcode === bar_code) {\r\n            skipError = true\r\n            event_scanned = true\r\n            let Order = this.state.order && this.state.order.order\r\n            Order[\"unscanned_items\"] = []\r\n            this.setState({ Order })\r\n            this.responseAction(\"order_complete\")\r\n            ActionBarcode = true\r\n            // stop_add_log = true\r\n          }\r\n        }\r\n        if (scan_pack_settings.service_issue_code_enabled) {\r\n          if (scan_pack_settings.service_issue_code === bar_code) {\r\n            this.setState({ alert: true, notes_fromPacker: notes_fromPacker === null ? \"\" : notes_fromPacker, issueFlag: true })\r\n            skipError = true\r\n          }\r\n        }\r\n        if (scan_pack_settings.click_scan) {\r\n          if (scan_pack_settings.click_scan_barcode === bar_code) {\r\n            let item = unscanned_items && unscanned_items[0]\r\n            this.clickScan(item, \"actionbarcode\")\r\n            skipError = true\r\n            ActionBarcode = true\r\n          }\r\n        }\r\n        if (unscanned_items[0].product_type === \"individual\") {\r\n          if (unscanned_items[0].child_items && unscanned_items[0].child_items.length > 0) {\r\n            if (scan_pack_settings.remove_barcode && scan_pack_settings.remove_barcode === bar_code) {\r\n              unscanned_items[0].child_items.shift()\r\n              unscanned_items[0].child_items.length === 0 && unscanned_items.shift()\r\n              this.responseAction(\"scan_success\")\r\n              skipError = true\r\n              ActionBarcode = true\r\n            }\r\n          }\r\n        } else {\r\n          if (unscanned_items && unscanned_items.length > 0) {\r\n            if (scan_pack_settings.remove_barcode && scan_pack_settings.remove_barcode === bar_code) {\r\n              unscanned_items.shift()\r\n              this.responseAction(\"scan_success\")\r\n              skipError = true\r\n              ActionBarcode = true\r\n            }\r\n          }\r\n        }\r\n        if (scan_pack_settings.scanning_sequence === \"any_sequence\" && master_switch === false) {\r\n          bar_code = bar_code.toLowerCase()\r\n          lowercase = true\r\n        }\r\n        if (unscanned_items.length > 0) {\r\n          if (scan_pack_settings.scanning_sequence === \"any_sequence\" ? \"any_sequence\" : \"items_sequence\") {\r\n            let scanpush = false\r\n            let itemFound = false\r\n            unscanned_items.length > 0 && unscanned_items.map((item, index) => {\r\n              if (item.product_type === \"individual\" && item.child_items && item.child_items.length > 0) {\r\n                if (item.child_items[0].skippable) {\r\n                  let skip_code = lowercase === true ? scan_pack_settings.skip_code.toLowerCase() : scan_pack_settings.skip_code\r\n                  if (scan_pack_settings.skip_code_enabled && skip_code === bar_code) {\r\n                    item.child_items.splice(index, 1)\r\n                    itemFound = true\r\n                    this.responseAction(\"scan_success\")\r\n                    if (unscanned_items.length === 0) {\r\n                      order_complete_flag = true\r\n                    }\r\n                    ActionBarcode = true\r\n                  }\r\n                }\r\n              } else {\r\n                if (item.skippable) {\r\n                  let skip_code = lowercase === true ? scan_pack_settings.skip_code.toLowerCase() : scan_pack_settings.skip_code\r\n                  if (scan_pack_settings.skip_code_enabled && skip_code === bar_code) {\r\n                    unscanned_items.splice(index, 1)\r\n                    itemFound = true\r\n                    this.responseAction(\"scan_success\")\r\n                    if (unscanned_items.length === 0) {\r\n                      order_complete_flag = true\r\n                    }\r\n                    ActionBarcode = true\r\n                  }\r\n                }\r\n              }\r\n\r\n              scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : index\r\n              if (index === scanAccess) {\r\n                {\r\n                  item && item.product_type === \"individual\" && item.child_items && item.child_items.length > 0\r\n                    ?\r\n                    item && item.child_items.map((childItem, childIndex) => {\r\n                      scanAccess = scan_pack_settings.scanning_sequence === \"items_sequence\" ? 0 : childIndex\r\n                      if (childIndex === scanAccess) {\r\n                        childItem.barcodes.map((barcode) => {\r\n                          let Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode\r\n                          if (Barcode === bar_code && scanpush === false) {\r\n                            let serialScanAccess = false\r\n                            if (enableSerial || childItem.record_serial === false && childItem.second_record_serial === false) {\r\n                              serialScanAccess = true\r\n                            } else {\r\n                              if ((childItem.record_serial) || (childItem.second_record_serial)) {\r\n                                let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\r\n                                rejectLocalLog = false\r\n                                this.setState({ serialRecordPopUpShow: true, type: eventType })\r\n                              }\r\n                            }\r\n                            if (confirmProductConfirmation === false) {\r\n                              if (general_settings.conf_code_product_instruction === \"always\") {\r\n                                this.setState({ productConfirmationCheck: true, blockItemToScan: childItem, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\r\n                                skipError = true\r\n                                blockScan = true\r\n                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\r\n                                if (childItem.confirmation === true) {\r\n                                  this.setState({ productConfirmationCheck: true, blockItemToScan: childItem, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\r\n                                  skipError = true\r\n                                  blockScan = true\r\n                                }\r\n                              }\r\n                            }\r\n                            if (blockScan === false || confirmProductConfirmation === true) {\r\n                              if (serialScanAccess) {\r\n                                if (scanned_items.length > 0) {\r\n                                  scanned_items.map((scan, scanItemIndex) => {\r\n                                    scan.barcodes.map((scancode) => {\r\n                                      let Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode\r\n                                      if (type === \"item_present\" ? childItem.qty_remaining >= 1 : childItem.qty_remaining >= parseInt(barcode.packing_count)) {\r\n                                        if (Scancode === Barcode && Barcode === bar_code && childItem.product_id === scan.product_id) {\r\n                                          if (scan.qty_remaining === 1 && scanpush === false) {\r\n                                            if (type === \"item_present\") {\r\n                                              childItem.qty_remaining = childItem.qty_remaining - 1\r\n                                              childItem.scanned_qty = childItem.scanned_qty + 1\r\n                                              // scan.qty_remaining = childItem.qty_remaining\r\n                                              // scan.scanned_qty = childItem.scanned_qty\r\n                                            } else {\r\n                                              if (childItem.qty_remaining > 0) {\r\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                // scan.qty_remaining = childItem.qty_remaining\r\n                                                // scan.scanned_qty = childItem.scanned_qty\r\n                                              }\r\n                                            }\r\n                                            item.child_items.splice(scanAccess, 1)\r\n                                            item.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                                            scanned_items.splice(scanItemIndex, 1)\r\n                                            scanned_items.splice(0, 0, scan)\r\n                                            this.setState({ typeScanState: childItem.sku })\r\n                                            scanpush = true\r\n                                            SKU = childItem.sku\r\n                                            Log_count = barcode.packing_count\r\n                                            product_name = childItem.name\r\n                                            qty_remain = childItem.qty_remaining\r\n                                          } else {\r\n                                            if (scan.qty_remaining > 0 && scanpush === false) {\r\n                                              if (type === \"item_present\") {\r\n                                                childItem.scanned_qty = childItem.scanned_qty + 1\r\n                                                childItem.qty_remaining = childItem.qty_remaining - 1\r\n                                                // scan.qty_remaining = childItem.qty_remaining\r\n                                                // scan.scanned_qty = childItem.scanned_qty\r\n                                              } else {\r\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                // scan.qty_remaining = childItem.qty_remaining\r\n                                                // scan.scanned_qty = childItem.scanned_qty\r\n                                              }\r\n                                              scanned_items.splice(scanItemIndex, 1)\r\n                                              scanned_items.splice(0, 0, scan)\r\n                                              this.setState({ typeScanState: childItem.sku })\r\n                                              scanpush = true\r\n                                              SKU = childItem.sku\r\n                                              Log_count = barcode.packing_count\r\n                                              product_name = childItem.name\r\n                                              qty_remain = childItem.qty_remaining\r\n                                            }\r\n                                            if (childItem.qty_remaining === 0) {\r\n                                              item.child_items.splice(scanAccess, 1)\r\n                                              item.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                                            }\r\n                                          }\r\n                                        } else {\r\n                                          if (scancode !== bar_code && childItem.scanned_qty === 0) {\r\n                                            if (childItem.qty_remaining === 1 && scanpush === false) {\r\n                                              if (type === \"item_present\") {\r\n                                                childItem.qty_remaining = childItem.qty_remaining - 1\r\n                                                childItem.scanned_qty = childItem.scanned_qty + 1\r\n                                                // scan.qty_remaining = childItem.qty_remaining\r\n                                                // scan.scanned_qty = childItem.scanned_qty\r\n                                              } else {\r\n                                                childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                // scan.qty_remaining = childItem.qty_remaining\r\n                                                // scan.scanned_qty = childItem.scanned_qty\r\n                                              }\r\n                                              // scanned_items.push(childItem)\r\n                                              scanned_items.splice(0, 0, childItem)\r\n                                              item.child_items.splice(scanAccess, 1)\r\n                                              item.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                                              this.setState({ typeScanState: childItem.sku })\r\n                                              scanpush = true\r\n                                              SKU = childItem.sku\r\n                                              Log_count = barcode.packing_count\r\n                                              product_name = childItem.name\r\n                                              qty_remain = childItem.qty_remaining\r\n                                            } else {\r\n                                              if (scanpush === false) {\r\n                                                if (type === \"item_present\") {\r\n                                                  childItem.qty_remaining = childItem.qty_remaining - 1\r\n                                                  childItem.scanned_qty = childItem.scanned_qty + 1\r\n                                                } else {\r\n                                                  childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                  childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                }\r\n                                                // scanned_items.push(childItem)\r\n                                                scanned_items.splice(0, 0, childItem)\r\n                                                this.setState({ typeScanState: childItem.sku })\r\n                                                scanpush = true\r\n                                                SKU = childItem.sku\r\n                                                Log_count = barcode.packing_count\r\n                                                product_name = childItem.name\r\n                                                qty_remain = childItem.qty_remaining\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    })\r\n                                  })\r\n                                } else {\r\n                                  if (Barcode === bar_code && childItem.qty_remaining >= parseInt(barcode.packing_count)) {\r\n                                    if (childItem.qty_remaining === 1 && scanpush === false) {\r\n                                      if (type === \"item_present\") {\r\n                                        childItem.qty_remaining = childItem.qty_remaining - 1\r\n                                        childItem.scanned_qty = childItem.scanned_qty + 1\r\n                                      } else {\r\n                                        childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                        childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                      }\r\n                                      // scanned_items.push(childItem)\r\n                                      scanned_items.splice(0, 0, childItem)\r\n                                      item.child_items.splice(scanAccess, 1)\r\n                                      item.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                                      this.setState({ typeScanState: childItem.sku })\r\n                                      scanpush = true\r\n                                      SKU = childItem.sku\r\n                                      Log_count = barcode.packing_count\r\n                                      product_name = childItem.name\r\n                                      qty_remain = childItem.qty_remaining\r\n                                    } else {\r\n                                      if (scanpush === false) {\r\n                                        if (type === \"item_present\") {\r\n                                          childItem.qty_remaining = childItem.qty_remaining - 1\r\n                                          childItem.scanned_qty = childItem.scanned_qty + 1\r\n                                        } else {\r\n                                          childItem.qty_remaining = childItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                          childItem.scanned_qty = childItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                        }\r\n                                        // scanned_items.push(childItem)\r\n                                        scanned_items.splice(0, 0, childItem)\r\n                                        this.setState({ typeScanState: childItem.sku })\r\n                                        scanpush = true\r\n                                        SKU = childItem.sku\r\n                                        Log_count = barcode.packing_count\r\n                                        product_name = childItem.name\r\n                                        qty_remain = childItem.qty_remaining\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                              if (unscanned_items.length > 0) {\r\n                                if (serialScanAccess) {\r\n                                  if (type === \"item_present\") {\r\n                                    this.responseAction(\"scan_success\")\r\n                                  } else {\r\n                                    if (remain_qty >= parseInt(barcode.packing_count)) {\r\n                                      this.responseAction(\"scan_success\")\r\n                                    } else {\r\n                                      this.alertBox(`The multi-pack barcode scanned exceeds the quantity remaining`)\r\n                                    }\r\n                                  }\r\n                                }\r\n                              } else {\r\n                                order_complete_flag = true\r\n                                // this.responseAction(\"order_complete\")\r\n                              }\r\n                              if ((this.state.blockItemToScan && this.state.blockItemToScan.name !== childItem.name) || childItem.qty_remaining === 0) {\r\n                                confirmProductConfirmation = false\r\n                              }\r\n                              itemFound = true\r\n                            }\r\n                          }\r\n                        })\r\n                      }\r\n                    })\r\n                    :\r\n                    (\r\n                      item && item.product_type === \"depends\"\r\n                        ?\r\n                        item && item.barcodes.map((barcode, barcodeIndex) => {\r\n                          let Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode\r\n                          let mainItem = false\r\n                          unscanned_items.map((un) => {\r\n                            un.barcodes.map((bar) => {\r\n                              if (bar.barcode === bar_code) {\r\n                                mainItem = true\r\n                              }\r\n                            })\r\n                          })\r\n                          if (Barcode === bar_code && scanpush === false) {\r\n                            let serialScanAccess = false\r\n                            if (enableSerial || item.record_serial === false && item.second_record_serial === false) {\r\n                              serialScanAccess = true\r\n                            } else {\r\n                              if ((item.record_serial) || (item.second_record_serial)) {\r\n                                let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\r\n                                rejectLocalLog = false\r\n                                this.setState({ serialRecordPopUpShow: true, type: eventType })\r\n                              }\r\n                            }\r\n                            if (confirmProductConfirmation === false) {\r\n                              if (general_settings.conf_code_product_instruction === \"always\") {\r\n                                this.setState({ productConfirmationCheck: true, blockItemToScan: item, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\r\n                                skipError = true\r\n                                blockScan = true\r\n                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\r\n                                if (item.confirmation === true) {\r\n                                  this.setState({ productConfirmationCheck: true, blockItemToScan: item, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\r\n                                  skipError = true\r\n                                  blockScan = true\r\n                                }\r\n                              }\r\n                            }\r\n                            if (blockScan === false || confirmProductConfirmation === true) {\r\n                              if (serialScanAccess) {\r\n                                if (scanned_items.length > 0) {\r\n                                  scanned_items.map((scan, scanIndex) => {\r\n                                    scan.barcodes.map((scancode, scancodeIndex) => {\r\n                                      let Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode\r\n                                      if (type === \"item_present\" ? item.qty_remaining >= 1 : item.qty_remaining >= parseInt(barcode.packing_count)) {\r\n                                        if (Scancode === Barcode && Barcode === bar_code && item.order_item_id === scan.order_item_id) {\r\n                                          if (scan.qty_remaining === 1 && scanpush === false) {\r\n                                            if (type === \"item_present\") {\r\n                                              item.qty_remaining = item.qty_remaining - 1\r\n                                              item.scanned_qty = item.scanned_qty + 1\r\n                                              scan.qty_remaining = item.qty_remaining\r\n                                              scan.scanned_qty = item.scanned_qty\r\n                                            } else {\r\n                                              item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                              item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                              scan.qty_remaining = item.qty_remaining\r\n                                              scan.scanned_qty = item.scanned_qty\r\n                                            }\r\n                                            unscanned_items.splice(scanAccess, 1)\r\n                                            scanned_items.splice(scanIndex, 1)\r\n                                            scanned_items.splice(0, 0, scan)\r\n                                            this.setState({ typeScanState: item.sku })\r\n                                            scanpush = true\r\n                                            SKU = item.sku\r\n                                            Log_count = barcode.packing_count\r\n                                            product_name = item.name\r\n                                            qty_remain = item.qty_remaining\r\n                                          } else {\r\n                                            if (scan.qty_remaining > 0 && scanpush === false) {\r\n                                              if (type === \"item_present\") {\r\n                                                item.scanned_qty = item.scanned_qty + 1\r\n                                                item.qty_remaining = item.qty_remaining - 1\r\n                                                scan.qty_remaining = item.qty_remaining\r\n                                                scan.scanned_qty = item.scanned_qty\r\n                                              } else {\r\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                                scan.qty_remaining = item.qty_remaining\r\n                                                scan.scanned_qty = item.scanned_qty\r\n                                              }\r\n                                              scanned_items.splice(scanIndex, 1)\r\n                                              scanned_items.splice(0, 0, scan)\r\n                                              this.setState({ typeScanState: item.sku })\r\n                                              scanpush = true\r\n                                              SKU = item.sku\r\n                                              Log_count = barcode.packing_count\r\n                                              product_name = item.name\r\n                                              qty_remain = item.qty_remaining\r\n                                            }\r\n                                            if (item.qty_remaining === 0) {\r\n                                              unscanned_items.splice(scanAccess, 1)\r\n                                            }\r\n                                          }\r\n                                        } else {\r\n                                          if (scancode !== bar_code && item.scanned_qty === 0) {\r\n                                            if (item.qty_remaining === 1 && scanpush === false) {\r\n                                              if (type === \"item_present\") {\r\n                                                item.qty_remaining = item.qty_remaining - 1\r\n                                                item.scanned_qty = item.scanned_qty + 1\r\n                                                scan.qty_remaining = item.qty_remaining\r\n                                                scan.scanned_qty = item.scanned_qty\r\n                                              } else {\r\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                                scan.qty_remaining = item.qty_remaining\r\n                                                scan.scanned_qty = item.scanned_qty\r\n                                              }\r\n                                              // scanned_items.push(item)\r\n                                              scanned_items.splice(0, 0, item)\r\n                                              unscanned_items.splice(scanAccess, 1)\r\n                                              this.setState({ typeScanState: item.sku })\r\n                                              scanpush = true\r\n                                              SKU = item.sku\r\n                                              Log_count = barcode.packing_count\r\n                                              product_name = item.name\r\n                                              qty_remain = item.qty_remaining\r\n                                            } else {\r\n                                              if (scanpush === false) {\r\n                                                if (type === \"item_present\") {\r\n                                                  item.qty_remaining = item.qty_remaining - 1\r\n                                                  item.scanned_qty = item.scanned_qty + 1\r\n                                                  scan.qty_remaining = item.qty_remaining\r\n                                                  scan.scanned_qty = item.scanned_qty\r\n                                                } else {\r\n                                                  item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                                  item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                                  scan.qty_remaining = item.qty_remaining\r\n                                                  scan.scanned_qty = item.scanned_qty\r\n                                                }\r\n                                                // scanned_items.push(item)\r\n                                                scanned_items.splice(0, 0, item)\r\n                                                this.setState({ typeScanState: item.sku })\r\n                                                scanpush = true\r\n                                                SKU = item.sku\r\n                                                Log_count = barcode.packing_count\r\n                                                product_name = item.name\r\n                                                qty_remain = item.qty_remaining\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    })\r\n                                  })\r\n                                } else {\r\n                                  if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\r\n                                    if (item.qty_remaining === 1 && scanpush === false) {\r\n                                      if (type === \"item_present\") {\r\n                                        item.qty_remaining = item.qty_remaining - 1\r\n                                        item.scanned_qty = item.scanned_qty + 1\r\n                                      } else {\r\n                                        item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                        item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                      }\r\n                                      // scanned_items.push(item)\r\n                                      scanned_items.splice(0, 0, item)\r\n                                      unscanned_items.splice(scanAccess, 1)\r\n                                      this.setState({ typeScanState: item.sku })\r\n                                      scanpush = true\r\n                                      SKU = item.sku\r\n                                      Log_count = barcode.packing_count\r\n                                      product_name = item.name\r\n                                      qty_remain = item.qty_remaining\r\n                                    } else {\r\n                                      if (scanpush === false) {\r\n                                        if (type === \"item_present\") {\r\n                                          item.qty_remaining = item.qty_remaining - 1\r\n                                          item.scanned_qty = item.scanned_qty + 1\r\n                                        } else {\r\n                                          item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                          item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                        }\r\n                                        // scanned_items.push(item)\r\n                                        scanned_items.splice(0, 0, item)\r\n                                        this.setState({ typeScanState: item.sku })\r\n                                        scanpush = true\r\n                                        SKU = item.sku\r\n                                        Log_count = barcode.packing_count\r\n                                        product_name = item.name\r\n                                        qty_remain = item.qty_remaining\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                              if (unscanned_items.length > 0) {\r\n                                if (serialScanAccess) {\r\n                                  if (type === \"item_present\") {\r\n                                    this.responseAction(\"scan_success\")\r\n                                  } else {\r\n                                    if (remain_qty >= parseInt(barcode.packing_count)) {\r\n                                      this.responseAction(\"scan_success\")\r\n                                    } else {\r\n                                      this.alertBox(`The multi-pack barcode scanned exceeds the quantity remaining`)\r\n                                    }\r\n                                  }\r\n                                }\r\n\r\n                              } else {\r\n                                order_complete_flag = true\r\n                                // this.responseAction(\"order_complete\")\r\n                              }\r\n                              itemFound = true\r\n                              if ((this.state.blockItemToScan && this.state.blockItemToScan.name !== item.name) || item.qty_remaining === 0) {\r\n                                confirmProductConfirmation = false\r\n                              }\r\n                            }\r\n                          } else {\r\n                            if (item.product_type === \"depends\" && mainItem === false) {\r\n                              item && item.child_items.map((childItem, childItemIndex) => {\r\n                                childItem.barcodes.map((childItemBarcode, childItemBarcodeIndex) => {\r\n                                  let Barcode = lowercase === true ? childItemBarcode.barcode.toLowerCase() : childItemBarcode.barcode\r\n                                  // let serialScanAccess = false\r\n                                  if (Barcode === bar_code && scanpush === false && item.qty_remaining > 0) {\r\n                                    let serialScanAccess = false\r\n                                    if (enableSerial || childItem.record_serial === false && childItem.second_record_serial === false) {\r\n                                      serialScanAccess = true\r\n                                    } else {\r\n                                      if ((childItem.record_serial) || (childItem.second_record_serial)) {\r\n                                        let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\r\n                                        rejectLocalLog = false\r\n                                        this.setState({ serialRecordPopUpShow: true, type: eventType })\r\n                                      }\r\n                                    }\r\n                                    if (serialScanAccess) {\r\n                                      let tempItem = Object.assign({}, item);\r\n                                      let tempItem1 = Object.assign({}, item);\r\n                                      let tempItemChildArr = []\r\n                                      let tempItem1ChildArr = []\r\n                                      let arr = []\r\n                                      tempItem.qty_remaining = 1\r\n                                      tempItem.product_type = \"individual\"\r\n                                      let kitDivide = tempItem1.qty_remaining\r\n                                      tempItem.child_items.map((child) => {\r\n                                        let newCopy = Object.assign({}, child)\r\n                                        newCopy.qty_remaining = newCopy.qty_remaining / kitDivide\r\n                                        tempItemChildArr.push(newCopy)\r\n                                      })\r\n                                      tempItem.child_items = tempItemChildArr\r\n                                      tempItem1.qty_remaining = tempItem1.qty_remaining - 1\r\n                                      tempItem1.child_items.map((childTemp) => {\r\n                                        let newCopy = Object.assign({}, childTemp)\r\n                                        let sub = newCopy.qty_remaining / kitDivide\r\n                                        let final = newCopy.qty_remaining - sub\r\n                                        newCopy.qty_remaining = final\r\n                                        tempItem1ChildArr.push(newCopy)\r\n                                        tempItem1.child_items = tempItem1ChildArr\r\n                                        arr.push(tempItem, tempItem1)\r\n                                      })\r\n                                      // unscanned_items[index] = arr[0]\r\n                                      // if(arr[1].qty_remaining > 1){\r\n                                      unscanned_items.splice(index, 1, arr[0], arr[1])\r\n                                      // }\r\n                                    }\r\n                                    unscanned_items.map((updateProduct, updateProductIndex) => {\r\n                                      updateProduct && updateProduct.child_items && updateProduct.child_items.map((updateChildItem, updatedChildItemIndex) => {\r\n                                        updateChildItem.barcodes.map((barcode) => {\r\n                                          let Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode\r\n                                          if (Barcode === bar_code && scanpush === false) {\r\n                                            let serialScanAccess = false\r\n                                            if (enableSerial || updateChildItem.record_serial === false && updateChildItem.second_record_serial === false) {\r\n                                              serialScanAccess = true\r\n                                            } else {\r\n                                              if ((updateChildItem.record_serial) || (updateChildItem.second_record_serial)) {\r\n                                                let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\r\n                                                rejectLocalLog = false\r\n                                                this.setState({ serialRecordPopUpShow: true, type: eventType })\r\n                                              }\r\n                                            }\r\n                                            if (confirmProductConfirmation === false) {\r\n                                              if (general_settings.conf_code_product_instruction === \"always\") {\r\n                                                this.setState({ productConfirmationCheck: true, blockItemToScan: childItem, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\r\n                                                skipError = true\r\n                                                blockScan = true\r\n                                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\r\n                                                if (childItem.confirmation === true) {\r\n                                                  this.setState({ productConfirmationCheck: true, blockItemToScan: childItem, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\r\n                                                  skipError = true\r\n                                                  blockScan = true\r\n                                                }\r\n                                              }\r\n                                            }\r\n                                            if (blockScan === false || confirmProductConfirmation === true) {\r\n                                              if (serialScanAccess) {\r\n                                                if (scanned_items.length > 0) {\r\n                                                  scanned_items.map((scan, scanIndex) => {\r\n                                                    scan.barcodes.map((scancode) => {\r\n                                                      let Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode\r\n                                                      if (type === \"item_present\" ? updateChildItem.qty_remaining >= 1 : updateChildItem.qty_remaining >= parseInt(barcode.packing_count)) {\r\n                                                        if (Scancode === Barcode && Scancode === bar_code && scan.order_item_id === item.order_item_id) {\r\n                                                          if (scan.qty_remaining === 1 && scanpush === false) {\r\n                                                            if (type === \"item_present\") {\r\n                                                              updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\r\n                                                              updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\r\n                                                              //scan.scanned_qty = updateChildItem.scanned_qty\r\n                                                              //scan.qty_remaining = updateChildItem.qty_remaining\r\n                                                            } else {\r\n                                                              updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                              updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                              //scan.scanned_qty = updateChildItem.scanned_qty\r\n                                                              //scan.qty_remaining = updateChildItem.qty_remaining\r\n                                                            }\r\n                                                            updateProduct.child_items.splice(updatedChildItemIndex, 1)\r\n                                                            scanned_items.splice(scanIndex, 1)\r\n                                                            scanned_items.splice(0, 0, scan)\r\n                                                            this.setState({ typeScanState: updateChildItem.sku })\r\n                                                            scanpush = true\r\n                                                            SKU = updateChildItem.sku\r\n                                                            Log_count = barcode.packing_count\r\n                                                            product_name = updateChildItem.name\r\n                                                            qty_remain = updateChildItem.qty_remaining\r\n                                                          } else {\r\n                                                            if (scan.qty_remaining > 0 && scanpush === false) {\r\n                                                              if (type === \"item_present\") {\r\n                                                                updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\r\n                                                                updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\r\n                                                                //scan.scanned_qty = updateChildItem.scanned_qty\r\n                                                                //scan.qty_remaining = updateChildItem.qty_remaining\r\n                                                                updateChildItem.qty_remaining === 0 && updateProduct.child_items.splice(index, 1)\r\n                                                              } else {\r\n                                                                updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                                updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                                //scan.scanned_qty = updateChildItem.scanned_qty\r\n                                                                //scan.qty_remaining = updateChildItem.qty_remaining\r\n                                                                updateChildItem.qty_remaining === 0 && updateProduct.child_items.splice(index, 1)\r\n                                                              }\r\n                                                              scanned_items.splice(scanIndex, 1)\r\n                                                              scanned_items.splice(0, 0, scan)\r\n                                                              this.setState({ typeScanState: updateChildItem.sku })\r\n                                                              scanpush = true\r\n                                                              SKU = updateChildItem.sku\r\n                                                              Log_count = barcode.packing_count\r\n                                                              product_name = updateChildItem.name\r\n                                                              qty_remain = updateChildItem.qty_remaining\r\n                                                            }\r\n                                                            if (updateChildItem.qty_remaining === 0) {\r\n                                                              item.child_items.splice(scanAccess, 1)\r\n                                                              item.child_items.length === 0 && unscanned_items.splice(index, 1)\r\n                                                            }\r\n                                                          }\r\n                                                        } else {\r\n                                                          if (Barcode === bar_code && updateChildItem.qty_remaining >= 1) {\r\n                                                            if (updateChildItem.qty_remaining === 1 && scanpush === false) {\r\n                                                              if (type === \"item_present\") {\r\n                                                                updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\r\n                                                                updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\r\n                                                              } else {\r\n                                                                updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                                updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                              }\r\n                                                              //scanned_items.push(updateChildItem)\r\n                                                              scanned_items.splice(0, 0, updateChildItem)\r\n                                                              updateProduct.child_items.splice(updatedChildItemIndex, 1)\r\n                                                              //scanned_items.splice(scanIndex , 1)\r\n                                                              //scanned_items.splice(0, 0, scan)\r\n                                                              this.setState({ typeScanState: updateChildItem.sku })\r\n                                                              scanpush = true\r\n                                                              SKU = updateChildItem.sku\r\n                                                              Log_count = barcode.packing_count\r\n                                                              product_name = updateChildItem.name\r\n                                                              qty_remain = updateChildItem.qty_remaining\r\n                                                            } else {\r\n                                                              if (scanpush === false) {\r\n                                                                if (type === \"item_present\") {\r\n                                                                  updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\r\n                                                                  updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\r\n                                                                  //scan.scanned_qty = updateChildItem.scanned_qty\r\n                                                                  //scan.qty_remaining = updateChildItem.qty_remaining\r\n                                                                } else {\r\n                                                                  updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                                  updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                                  //scan.scanned_qty = updateChildItem.scanned_qty\r\n                                                                  //scan.qty_remaining = updateChildItem.qty_remaining\r\n                                                                }\r\n                                                                //scanned_items.push(updateChildItem)\r\n                                                                scanned_items.splice(0, 0, updateChildItem)\r\n                                                                //scanned_items.splice(scanIndex , 1)\r\n                                                                //scanned_items.splice(0, 0, scan)\r\n                                                                this.setState({ typeScanState: updateChildItem.sku })\r\n                                                                scanpush = true\r\n                                                                SKU = updateChildItem.sku\r\n                                                                Log_count = barcode.packing_count\r\n                                                                product_name = updateChildItem.name\r\n                                                                qty_remain = updateChildItem.qty_remaining\r\n                                                              }\r\n                                                            }\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                    })\r\n                                                  })\r\n                                                } else {\r\n                                                  if (Barcode === bar_code && updateChildItem.qty_remaining >= parseInt(barcode.packing_count)) {\r\n                                                    if (updateChildItem.qty_remaining === 1 && scanpush === false) {\r\n                                                      if (type === \"item_present\") {\r\n                                                        updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\r\n                                                        updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\r\n                                                      } else {\r\n                                                        updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                        updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                      }\r\n                                                      //scanned_items.push(updateChildItem)\r\n                                                      scanned_items.splice(0, 0, updateChildItem)\r\n                                                      updateProduct.child_items.splice(updatedChildItemIndex, 1)\r\n                                                      // item.child_items.splice(scanAccess , 1 )\r\n                                                      // item.child_items.length === 0 && unscanned_items.splice(scanAccess , 1)\r\n                                                      this.setState({ typeScanState: updateChildItem.sku })\r\n                                                      scanpush = true\r\n                                                      SKU = updateChildItem.sku\r\n                                                      Log_count = barcode.packing_count\r\n                                                      product_name = updateChildItem.name\r\n                                                      qty_remain = updateChildItem.qty_remaining\r\n                                                    } else {\r\n                                                      if (scanpush === false) {\r\n                                                        if (type === \"item_present\") {\r\n                                                          updateChildItem.qty_remaining = updateChildItem.qty_remaining - 1\r\n                                                          updateChildItem.scanned_qty = updateChildItem.scanned_qty + 1\r\n                                                        } else {\r\n                                                          updateChildItem.qty_remaining = updateChildItem.qty_remaining - parseInt(barcode.packing_count)\r\n                                                          updateChildItem.scanned_qty = updateChildItem.scanned_qty + parseInt(barcode.packing_count)\r\n                                                        }\r\n                                                        //scanned_items.push(updateChildItem)\r\n                                                        scanned_items.splice(0, 0, updateChildItem)\r\n                                                        this.setState({ typeScanState: updateChildItem.sku })\r\n                                                        scanpush = true\r\n                                                        SKU = updateChildItem.sku\r\n                                                        Log_count = barcode.packing_count\r\n                                                        product_name = updateChildItem.name\r\n                                                        qty_remain = updateChildItem.qty_remaining\r\n                                                      }\r\n                                                    }\r\n                                                  }\r\n                                                }\r\n                                              }\r\n                                              if (unscanned_items.length > 0) {\r\n                                                if (serialScanAccess) {\r\n                                                  if (type === \"item_present\") {\r\n                                                    this.responseAction(\"scan_success\")\r\n                                                  } else {\r\n                                                    if (remain_qty >= parseInt(barcode.packing_count)) {\r\n                                                      this.responseAction(\"scan_success\")\r\n                                                    } else {\r\n                                                      this.alertBox(`The multi-pack barcode scanned exceeds the quantity remaining`)\r\n                                                    }\r\n                                                  }\r\n                                                }\r\n                                              } else {\r\n                                                order_complete_flag = true\r\n                                                // this.responseAction(\"order_complete\")\r\n                                              }\r\n                                              itemFound = true\r\n                                              if ((this.state.blockItemToScan && this.state.blockItemToScan.name !== updateChildItem.name) || updateChildItem.qty_remaining === 0) {\r\n                                                confirmProductConfirmation = false\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        })\r\n                                      })\r\n                                    })\r\n                                  }\r\n                                })\r\n                              })\r\n                              item.qty_remaining === 0 && unscanned_items.splice(index, 1)\r\n                            }\r\n                          }\r\n                        })\r\n                        :\r\n                        item && item.barcodes.map((barcode) => {\r\n                          let Barcode = lowercase === true ? barcode.barcode.toLowerCase() : barcode.barcode\r\n                          if (Barcode === bar_code && scanpush === false) {\r\n                            let serialScanAccess = false\r\n                            if (enableSerial || item.record_serial === false && item.second_record_serial === false) {\r\n                              serialScanAccess = true\r\n                            } else {\r\n                              if ((item.record_serial) || (item.second_record_serial)) {\r\n                                let eventType = type === \"item_present\" ? \"clickscan\" : \"barcode\"\r\n                                rejectLocalLog = false\r\n                                this.setState({ serialRecordPopUpShow: true, type: eventType, forSerialRecord: bar_code })\r\n                              }\r\n                            }\r\n\r\n                            if (confirmProductConfirmation === false) {\r\n                              if (general_settings.conf_code_product_instruction === \"always\") {\r\n                                this.setState({ productConfirmationCheck: true, blockItemToScan: item, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\r\n                                skipError = true\r\n                                blockScan = true\r\n                              } else if (general_settings.conf_code_product_instruction === \"optional\") {\r\n                                if (item.confirmation === true) {\r\n                                  this.setState({ productConfirmationCheck: true, blockItemToScan: item, blockItemType: type === \"item_present\" ? \"item_present\" : \"barcode\" })\r\n                                  skipError = true\r\n                                  blockScan = true\r\n                                }\r\n                              }\r\n                            }\r\n\r\n                            if (blockScan === false || confirmProductConfirmation === true) {\r\n                              if (serialScanAccess) {\r\n                                if (scanned_items.length > 0) {\r\n                                  scanned_items.map((scan, scanItemIndex) => {\r\n                                    if (scan.order_item_id === item.order_item_id) {\r\n                                      scan.barcodes.map((scancode) => {\r\n                                        let Scancode = lowercase === true ? scancode.barcode.toLowerCase() : scancode.barcode\r\n                                        if (type === \"item_present\" ? item.qty_remaining >= 1 : item.qty_remaining >= parseInt(barcode.packing_count)) {\r\n                                          if (Scancode === Barcode && Barcode === bar_code && item.order_item_id === scan.order_item_id) {\r\n                                            if (scan.qty_remaining === 1 && scanpush === false) {\r\n                                              if (type === \"item_present\") {\r\n                                                item.qty_remaining = item.qty_remaining - 1\r\n                                                item.scanned_qty = item.scanned_qty + 1\r\n                                                //scan.qty_remaining = item.qty_remaining\r\n                                                //scan.scanned_qty = item.scanned_qty\r\n                                              } else {\r\n                                                if (item.qty_remaining > 0) {\r\n                                                  item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                                  item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                                  //scan.qty_remaining = item.qty_remaining\r\n                                                  //scan.scanned_qty = item.scanned_qty\r\n                                                }\r\n                                              }\r\n                                              unscanned_items.splice(scanAccess, 1)\r\n                                              scanned_items.splice(scanItemIndex, 1)\r\n                                              scanned_items.splice(0, 0, scan)\r\n                                              this.setState({ typeScanState: item.sku })\r\n                                              scanpush = true\r\n                                              SKU = item.sku\r\n                                              Log_count = barcode.packing_count\r\n                                              product_name = item.name\r\n                                              qty_remain = item.qty_remaining\r\n                                            } else {\r\n                                              if (scan.qty_remaining > 1 && scanpush === false) {\r\n                                                if (type === \"item_present\" && item.qty_remaining > 0) {\r\n                                                  item.qty_remaining = item.qty_remaining - 1\r\n                                                  item.scanned_qty = item.scanned_qty + 1\r\n                                                  //scan.qty_remaining = item.qty_remaining\r\n                                                  //scan.scanned_qty = item.scanned_qty\r\n                                                } else {\r\n                                                  if (item.qty_remaining > 0) {\r\n                                                    item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                                    item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                                    //scan.qty_remaining = item.qty_remaining\r\n                                                    //scan.scanned_qty = item.scanned_qty\r\n                                                  }\r\n                                                }\r\n                                                scanned_items.splice(scanItemIndex, 1)\r\n                                                scanned_items.splice(0, 0, scan)\r\n                                                this.setState({ typeScanState: item.sku })\r\n                                                scanpush = true\r\n                                                SKU = item.sku\r\n                                                Log_count = barcode.packing_count\r\n                                                product_name = item.name\r\n                                                qty_remain = item.qty_remaining\r\n                                              }\r\n                                              if (item.qty_remaining === 0) {\r\n                                                unscanned_items.splice(scanAccess, 1)\r\n                                              }\r\n                                            }\r\n                                          } else {\r\n                                            if (Scancode !== bar_code && item.scanned_qty === 0) {\r\n                                              if (item.qty_remaining === 1 && scanpush === false) {\r\n                                                if (type === \"item_present\") {\r\n                                                  item.qty_remaining = item.qty_remaining - 1\r\n                                                  item.scanned_qty = item.scanned_qty + 1\r\n                                                } else {\r\n                                                  if (item.qty_remaining > 0) {\r\n                                                    item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                                    item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                                  }\r\n                                                }\r\n                                                // scanned_items.push(item)\r\n                                                scanned_items.splice(0, 0, item)\r\n                                                unscanned_items.splice(scanAccess, 1)\r\n                                                this.setState({ typeScanState: item.sku })\r\n                                                scanpush = true\r\n                                                SKU = item.sku\r\n                                                Log_count = barcode.packing_count\r\n                                                product_name = item.name\r\n                                                qty_remain = item.qty_remaining\r\n                                              } else {\r\n                                                if (scanpush === false && item.qty_remaining > 0) {\r\n                                                  if (type === \"item_present\") {\r\n                                                    item.qty_remaining = item.qty_remaining - 1\r\n                                                    item.scanned_qty = item.scanned_qty + 1\r\n                                                  } else {\r\n                                                    if (item.qty_remaining > 0) {\r\n                                                      item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                                      item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                                    }\r\n                                                  }\r\n                                                  // scanned_items.push(item)\r\n                                                  scanned_items.splice(0, 0, item)\r\n                                                  this.setState({ typeScanState: item.sku })\r\n                                                  scanpush = true\r\n                                                  SKU = item.sku\r\n                                                  Log_count = barcode.packing_count\r\n                                                  product_name = item.name\r\n                                                  qty_remain = item.qty_remaining\r\n                                                }\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      })\r\n                                    } else {\r\n                                      //share barcode start when barcode is same//\r\n                                      if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\r\n                                        if (item.qty_remaining === 1 && scanpush === false) {\r\n                                          if (type === \"item_present\") {\r\n                                            item.qty_remaining = item.qty_remaining - 1\r\n                                            item.scanned_qty = item.scanned_qty + 1\r\n                                          } else {\r\n                                            if (item.qty_remaining > 0) {\r\n                                              item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                              item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                            }\r\n                                          }\r\n                                          // scanned_items.push(item)\r\n                                          scanned_items.splice(0, 0, item)\r\n                                          unscanned_items.splice(scanAccess, 1)\r\n                                          this.setState({ typeScanState: item.sku })\r\n                                          scanpush = true\r\n                                          SKU = item.sku\r\n                                          Log_count = barcode.packing_count\r\n                                          product_name = item.name\r\n                                          qty_remain = item.qty_remaining\r\n                                        } else {\r\n                                          if (scanpush === false && item.qty_remaining > 0) {\r\n                                            if (type === \"item_present\") {\r\n                                              item.qty_remaining = item.qty_remaining - 1\r\n                                              item.scanned_qty = item.scanned_qty + 1\r\n                                            } else {\r\n                                              if (item.qty_remaining > 0) {\r\n                                                item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                                item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                              }\r\n                                            }\r\n                                            // scanned_items.push(item)\r\n                                            scanned_items.splice(0, 0, item)\r\n                                            this.setState({ typeScanState: item.sku })\r\n                                            scanpush = true\r\n                                            SKU = item.sku\r\n                                            Log_count = barcode.packing_count\r\n                                            product_name = item.name\r\n                                            qty_remain = item.qty_remaining\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                      //share barcode end when barcode is same//\r\n                                    }\r\n                                  })\r\n                                } else {\r\n                                  if (Barcode === bar_code && item.qty_remaining >= parseInt(barcode.packing_count)) {\r\n                                    if (item.qty_remaining === 1 && scanpush === false) {\r\n                                      if (type === \"item_present\") {\r\n                                        item.qty_remaining = item.qty_remaining - 1\r\n                                        item.scanned_qty = item.scanned_qty + 1\r\n                                      } else {\r\n                                        if (item.qty_remaining > 0) {\r\n                                          item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                          item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                        }\r\n                                      }\r\n                                      // scanned_items.push(item)\r\n                                      scanned_items.splice(0, 0, item)\r\n                                      unscanned_items.splice(scanAccess, 1)\r\n                                      this.setState({ typeScanState: item.sku })\r\n                                      scanpush = true\r\n                                      SKU = item.sku\r\n                                      Log_count = barcode.packing_count\r\n                                      product_name = item.name\r\n                                      qty_remain = item.qty_remaining\r\n                                    } else {\r\n                                      if (scanpush === false && item.qty_remaining > 0) {\r\n                                        if (type === \"item_present\") {\r\n                                          item.qty_remaining = item.qty_remaining - 1\r\n                                          item.scanned_qty = item.scanned_qty + 1\r\n                                        } else {\r\n                                          if (item.qty_remaining > 0) {\r\n                                            item.qty_remaining = item.qty_remaining - parseInt(barcode.packing_count)\r\n                                            item.scanned_qty = item.scanned_qty + parseInt(barcode.packing_count)\r\n                                          }\r\n                                        }\r\n                                        // scanned_items.push(item)\r\n                                        scanned_items.splice(0, 0, item)\r\n                                        this.setState({ typeScanState: item.sku })\r\n                                        scanpush = true\r\n                                        SKU = item.sku\r\n                                        Log_count = barcode.packing_count\r\n                                        product_name = item.name\r\n                                        qty_remain = item.qty_remaining\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                              if (unscanned_items.length > 0) {\r\n                                if (serialScanAccess) {\r\n                                  if (type === \"item_present\") {\r\n                                    this.responseAction(\"scan_success\")\r\n                                  } else {\r\n                                    if (remain_qty >= parseInt(barcode.packing_count)) {\r\n                                      this.responseAction(\"scan_success\")\r\n                                    } else {\r\n                                      this.alertBox(`The multi-pack barcode scanned exceeds the quantity remaining`)\r\n                                    }\r\n                                  }\r\n                                }\r\n                              } else {\r\n                                order_complete_flag = true\r\n                                // this.responseAction(\"order_complete\")\r\n                              }\r\n                              if ((this.state.blockItemToScan && this.state.blockItemToScan.name !== item.name) || item.qty_remaining === 0) {\r\n                                confirmProductConfirmation = false\r\n                              }\r\n                              itemFound = true\r\n                            }\r\n                          }\r\n                        })\r\n                    )\r\n                }\r\n              }\r\n              return item\r\n            })\r\n            if (skipError === false) {\r\n              itemFound === false ? this.responseAction(\"scan_fail\") : \"\"\r\n            }\r\n          }\r\n        } else {\r\n          order_complete_flag = true\r\n          // this.responseAction(\"order_complete\")\r\n        }\r\n        order.order.unscanned_items.map((noCode, index) => {\r\n          if (noCode.barcodes && noCode.barcodes.length === 1 && noCode.barcodes[0].barcode === \"noBarcode\") {\r\n            noCode.barcodes = []\r\n          }\r\n        })\r\n        if (this.state.serialRecordInput !== \"\") {\r\n          temp_order = updateSerialLog\r\n        } else {\r\n          temp_order[\"input\"] = event_code;\r\n          temp_order[\"id\"] = order_num;\r\n          temp_order[\"order_item_id\"] = unscanned_items.length > 0 ? unscanned_items[0].order_item_id : (scanned_items.length > 0 ? scanned_items[0].order_item_id : \"\")\r\n          temp_order[\"time\"] = new Date()\r\n          temp_order[\"rem_qty\"] = remain_qty\r\n          temp_order[\"qty_rem\"] = qty_remain\r\n          temp_order[\"SKU\"] = SKU ? SKU : unscanned_items.length > 0 && unscanned_items[0].sku\r\n          temp_order[\"Log_count\"] = Log_count\r\n          temp_order[\"product_name\"] = product_name\r\n          temp_order[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\r\n          temp_order[\"actionBarcode\"] = ActionBarcode\r\n          if (type !== \"item_present\") {\r\n            temp_order[\"state\"] = 'scanpack.rfp.default'\r\n          }\r\n          temp_order[\"increment_id\"] = order.order.increment_id\r\n          temp_order[\"event\"] = this.state.bar_code ? \"regular\" : \"click_scan\"\r\n          temp_order[\"updated_at\"] = order.order.updated_at\r\n          event_scanned === true ? temp_order[\"event\"] = \"regular\" : temp_order[\"event\"]\r\n        }\r\n        // event_scanned === true ? temp_order[\"event\"] = \"scanned\" : temp_order[\"event\"]\r\n        if (stop_add_log !== true && temp_order !== undefined) {\r\n          if (order_complete_flag) {\r\n            this.updateLog(temp_order, \"order_complete\")\r\n          } else {\r\n            this.updateLog(temp_order, Action_Type)\r\n          }\r\n          if (this.state.serialRecordInput === \"\" && rejectLocalLog) {\r\n            // localLogs.push(temp_order)\r\n            localLogs.splice(0, 0, temp_order)\r\n          }\r\n        }\r\n        this.setState({ scanned_items: scanned_items, serialRecordInput: \"\" })\r\n        blockScan = false\r\n      } else {\r\n        if (event.keyCode === 13 && bar_code === \"\" && this.state.serialRecordInput === \"\") {\r\n          this.responseAction(\"not_ready\")\r\n        }\r\n      }\r\n    }\r\n    try {\r\n      // this.barcode.current.focus();\r\n    } catch (error) {\r\n    }\r\n    enableSerial = false\r\n  }\r\n  /*SCAN BARCODE METHOD END*/\r\n\r\n  /* CLICK SCAN METHOD START */\r\n  clickScan = (item, fromActionBarcode) => {\r\n    let scan_pack_settings = this.state.scan_pack_settings\r\n    let access = fromActionBarcode === \"actionbarcode\" ? scan_pack_settings.click_scan : scan_pack_settings.enable_click_sku\r\n    if (access && item) {\r\n      if (item.click_scan_enabled === \"on\" || item.click_scan_enabled === \"on_with_confirmation\") {\r\n        if (item.click_scan_enabled === \"on_with_confirmation\") {\r\n          this.setState({ clickScanConfirmation: true, confirmationCheckItem: item })\r\n        } else {\r\n          let barcode = item.barcodes && item.barcodes.length === 0 ? \"noBarcode\" : item.barcodes[0].barcode\r\n          this.scanBarcode(barcode, \"item_present\")\r\n        }\r\n      } else {\r\n        this.alertBox(\"Click scan is not enable\")\r\n      }\r\n    }\r\n    this.props.updateProductList(null)\r\n  }\r\n  /* CLICK SCAN METHOD END*/\r\n\r\n  /*Click Scan Confirmation Pop Up Start*/\r\n  clickScanConfirmFun = () => {\r\n    let userInfo = this.state.userInfo\r\n    let item = this.state.confirmationCheckItem\r\n    if (item && userInfo) {\r\n      if (this.state.userInfo.confirmation_code === this.state.clickScanConfirmInput) {\r\n        let barcode = item.barcodes[0].barcode\r\n        this.scanBarcode(barcode, \"item_present\")\r\n        this.setState({ clickScanConfirmation: false, confirmationCheckItem: null, clickScanConfirmInput: \"\" })\r\n      } else {\r\n        if (this.state.general_settings && this.state.general_settings.strict_cc) {\r\n          this.setState({ errorMessageClickScanConfirmation: true })\r\n        } else {\r\n          let barcode = item.barcodes[0].barcode\r\n          this.scanBarcode(barcode, \"item_present\")\r\n          this.setState({ clickScanConfirmation: false, confirmationCheckItem: null, clickScanConfirmInput: \"\" })\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /*Click Scan Confirmation Pop Up End*/\r\n\r\n  /*Click Scan Confirmation On Change Start*/\r\n  handleClickScanConfirmInput = (e) => {\r\n    this.setState({ clickScanConfirmInput: e, errorMessageClickScanConfirmation: false })\r\n  }\r\n  /*Click Scan Confirmation On Change End*/\r\n\r\n  /*METHOD TO UPDATE EVERY EVNET LOG START*/\r\n  updateLog = async (logData, type) => {\r\n    let temp = []\r\n    let getItem = await AsyncStorage.getItem(\"logsArray\")\r\n    let logging = await AsyncStorage.getItem(\"Logging\")\r\n    let LoggingArray = JSON.parse(logging)\r\n    if (LoggingArray && LoggingArray.length >= 80) {\r\n      var indexToRemove = 0;\r\n      var numberToRemove = 1;\r\n      LoggingArray.splice(indexToRemove, numberToRemove);\r\n    }\r\n    LoggingArray && LoggingArray.length > 0 ? LoggingArray.push(logData) : LoggingArray = [logData]\r\n    let getTemp = getItem !== \"undefined\" && JSON.parse(getItem)\r\n    let arr = getTemp ? temp.concat(getTemp) : temp\r\n    arr.push(logData)\r\n    await AsyncStorage.setItem(\"logsArray\", JSON.stringify(arr))\r\n    if (logData && logData.event === \"scanned\") {\r\n      this.multipleTime()\r\n    }\r\n    if (type === \"issue\") {\r\n      this.multipleTime()\r\n      this.nav(this.state.order)\r\n    }\r\n    if (type === \"RESTART\") {\r\n      this.multipleTime()\r\n      this.nav(this.state.order)\r\n    }\r\n    if (type === \"order_complete\") {\r\n      if (this.state.scan_pack_settings.post_scanning_option === \"None\") {\r\n        this.responseAction(\"complete_order\")\r\n      }\r\n    }\r\n    if (type === \"recordTracking\") {\r\n      this.responseAction(\"complete_order\")\r\n      this.setState({ trackingOrderInput: \"\" })\r\n    }\r\n    await AsyncStorage.setItem(\"Logging\", JSON.stringify(LoggingArray))\r\n    // if(type === \"tracking\"){\r\n    //   // this.multipleTime()\r\n    //   // this.nav(this.state.order)\r\n    //   this.responseAction(\"complete_order\")\r\n    //   this.setState({trackingOrderInput: \"\"})\r\n    // }\r\n    // this.setState({bar_code: \"\"})\r\n  }\r\n  /*METHOD TO UPDATE EVERY EVNET LOG END*/\r\n\r\n  close = (type) => {\r\n    if (this.state.order) {\r\n      let scan_pack_settings = this.state.scan_pack_settings\r\n      if (type === \"show_customer_notes\") {\r\n        scan_pack_settings['show_customer_notes'] = false\r\n      }\r\n      if (type === \"show_internal_notes\") {\r\n        scan_pack_settings['show_internal_notes'] = false\r\n      }\r\n      if (type === \"notes_toPacker\") {\r\n        this.setState({ notes_toPacker_enable: false })\r\n      }\r\n      this.setState({ scan_pack_settings })\r\n    }\r\n    // try {\r\n    //   this.barcode.current.focus()\r\n    // } catch (error) {\r\n    // }\r\n  }\r\n\r\n  leaveComponent = async (order, type) => {\r\n    if (type === \"submitLog\") {\r\n      this.multipleTime()\r\n    }\r\n  }\r\n\r\n  updateDimensions = () => {\r\n    this.setState({\r\n      windowWidth: window.innerWidth\r\n    })\r\n  }\r\n  componentWillUnmount() {\r\n    let Order = this.state.order\r\n    searchOrderCheck = false;\r\n    ScanPackSettingsAccess = false;\r\n    GeneralSettingAccess = false;\r\n    orderSaveSuccess = false;\r\n    updateLogSuccess = true;\r\n    updateFromProductSuccess = false;\r\n    if (Order) {\r\n      this.leaveComponent(Order)\r\n      this.setState({ oldOne: null })\r\n      this.props.SearchScanpackOrder(\"\", false)\r\n    }\r\n    window.removeEventListener('resize', this.updateDimensions);\r\n  }\r\n\r\n  hideShipment = () => {\r\n    this.setState({ showshipments: false })\r\n  }\r\n\r\n  callShipmentOrder = (order) => {\r\n    let shipmentOrder = this.state.shipmentOrder\r\n    if (order.increment_id !== \"\") {\r\n      callOrderSuccess = true\r\n      shipmentOrder.input = order.increment_id\r\n      this.hitApi(shipmentOrder)\r\n    }\r\n  }\r\n\r\n  //according to the plateform call the function\r\n  hitApi = (shipmentOrder) => {\r\n    if (Platform.OS === \"ios\" || Platform.OS === \"android\") {\r\n      this.InternetCheck(shipmentOrder)\r\n    } else {\r\n      this.props.SearchScanpackOrder(shipmentOrder)\r\n    }\r\n  }\r\n\r\n  /*Check the connection for the ios and android start*/\r\n  InternetCheck = async (shipmentOrder) => {\r\n    const connectionInfo = await NetInfo.fetch();\r\n    if (connectionInfo.isConnected) {\r\n      this.props.SearchScanpackOrder(shipmentOrder)\r\n    } else {\r\n      this.setState({ errorMessageShow: true })\r\n    }\r\n  }\r\n  /*Check the connection for the ios and android end*/\r\n\r\n  enableToggle(e) {\r\n    if (this.props.route && this.props.route.params) {\r\n      if (e === 1) {\r\n        this.props.route.params.item(true)\r\n      } else {\r\n        this.props.route.params.item(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  serialLogUpdate(type, item, recordFrom, order_id, both) {\r\n    let temp = {}\r\n    let localLog = {}\r\n    let localLogs = this.state.localLogs\r\n    temp[\"clicked\"] = type === \"clickscan\" ? true : false\r\n    temp[\"barcode\"] = item.barcodes[0].barcode\r\n    temp[\"order_id\"] = order_id\r\n    temp[\"order_item_id\"] = item.order_item_id\r\n    temp[\"product_lot_id\"] = null\r\n    temp[\"ask\"] = recordFrom === \"recordOne\" ? true : false\r\n    temp[\"ask_2\"] = recordFrom === \"recordTwo\" ? true : false\r\n    temp[\"product_id\"] = item.product_id\r\n    if (both === false) {\r\n      temp[\"is_scan\"] = true\r\n      temp[\"second_serial\"] = false\r\n    } else {\r\n      if (recordFrom === \"recordOne\") {\r\n        temp[\"is_scan\"] = false\r\n        temp[\"second_serial\"] = false\r\n      } else {\r\n        temp[\"is_scan\"] = true\r\n        temp[\"second_serial\"] = true\r\n      }\r\n    }\r\n    temp[\"box_id\"] = null\r\n    temp[\"serial\"] = this.state.serialRecordInput\r\n    temp[\"event\"] = \"serial_scan\"\r\n    updateSerialLog = temp\r\n    localLog[\"order_item_id\"] = item && item.order_item_id\r\n    localLog[\"time\"] = new Date()\r\n    localLog[\"event\"] = \"serial_scan\"\r\n    localLog[\"SKU\"] = item.sku ? item.sku : \"\"\r\n    localLog[\"name\"] = this.state.userInfo && this.state.userInfo.name ? this.state.userInfo.name : \"\"\r\n    if (both) {\r\n      if (recordFrom === \"recordTwo\") {\r\n        // localLogs.push(localLog)\r\n        localLogs.splice(0, 0, localLog)\r\n      }\r\n    } else {\r\n      // localLogs.push(localLog)\r\n      localLogs.splice(0, 0, localLog)\r\n    }\r\n    this.updateSerialLog(temp)\r\n  }\r\n\r\n  updateSerialLog = async (logData) => {\r\n    let temp = []\r\n    let getItem = await AsyncStorage.getItem(\"logsArray\")\r\n    let getTemp = getItem !== \"undefined\" && JSON.parse(getItem)\r\n    let arr = getTemp ? temp.concat(getTemp) : temp\r\n    arr.push(logData)\r\n    // console.log(arr)\r\n    await AsyncStorage.setItem(\"logsArray\", JSON.stringify(arr))\r\n    // if(logData.event === \"scanned\"){\r\n    //   this.multipleTime()\r\n    // }\r\n    // if(type === \"issue\"){\r\n    //   this.multipleTime()\r\n    //   this.nav(this.state.order)\r\n    // }\r\n    // if(type === \"tracking\"){\r\n    //   // this.multipleTime()\r\n    //   // this.nav(this.state.order)\r\n    //   this.responseAction(\"complete_order\")\r\n    //   this.setState({trackingOrderInput: \"\"})\r\n    // }\r\n  }\r\n\r\n  serialRecordFun() {\r\n    let Order = this.state.order && this.state.order.order\r\n    let scanPackSetting = this.state.scan_pack_settings\r\n    let input = this.state.serialRecordInput\r\n    let inputLength = input.length\r\n    let match = false\r\n    if (scanPackSetting.require_serial_lot) {\r\n      if (scanPackSetting.valid_prefixes) {\r\n        let prefix = scanPackSetting.valid_prefixes.split(',')\r\n        let prefixLength\r\n        let userInput\r\n        let access = false\r\n        prefix && prefix.length > 0 && prefix.map((serial) => {\r\n          prefixLength = serial.length\r\n          userInput = input.slice(0, prefixLength)\r\n          if (userInput === serial) {\r\n            access = true\r\n          }\r\n        })\r\n        if (access) {\r\n          match = true\r\n          enableSerial = true\r\n        } else {\r\n          this.responseAction(\"scan_fail\", \"serialRecord\")\r\n          this.alertBox(\"The Value Scanned does not appear to be a Valid serial or lot number. Please check the 'Require Serial/Lot Prefix' setting in your scan and pack options.\")\r\n          this.setState({ type: this.state.type, serialRecordInput: \"\", serialRecordOne: \"\", serialRecordTwo: \"\" })\r\n          match = false\r\n          enableSerial = false\r\n        }\r\n      }\r\n    } else {\r\n      match = true\r\n      enableSerial = true\r\n    }\r\n    let type = this.state.type\r\n    let item = this.state.order && this.state.order.order && this.state.order.order.unscanned_items && this.state.order.order.unscanned_items[0]\r\n    let order_id = this.state.order && this.state.order.order && this.state.order.order.id\r\n    if (match) {\r\n      if (item.child_items && item.child_items.length > 0 && item.child_items[0]) {\r\n        if (item.child_items[0].record_serial && item.child_items[0].second_record_serial) {\r\n          if (item.child_items[0].record_serial && this.state.serialRecordOne === \"\") {\r\n            this.setState({ serialRecordOne: this.state.serialRecordInput })\r\n            this.setState({ serialRecordInput: \"\" })\r\n            this.serialLogUpdate(type, item.child_items[0], \"recordOne\", order_id, true)\r\n          } else {\r\n            this.setState({ serialRecordTwo: this.state.serialRecordInput })\r\n            enableSerial = true\r\n            this.allTypeScan(type, item.child_items[0])\r\n            this.setState({ serialRecordPopUpShow: false, type: \"\", serialRecordInput: \"\", serialRecordOne: \"\", serialRecordTwo: \"\" })\r\n            this.serialLogUpdate(type, item.child_items[0], \"recordTwo\", order_id, true)\r\n          }\r\n        } else {\r\n          if (item.child_items[0].record_serial) {\r\n            this.setState({ serialRecordOne: this.state.serialRecordInput })\r\n            this.serialLogUpdate(type, item.child_items[0], \"recordOne\", order_id, false)\r\n          } else {\r\n            this.setState({ serialRecordTwo: this.state.serialRecordInput })\r\n            this.serialLogUpdate(type, item.child_items[0], \"recordTwo\", order_id, false)\r\n          }\r\n          this.allTypeScan(type, item.child_items[0])\r\n          this.setState({ serialRecordPopUpShow: false, type: \"\", serialRecordInput: \"\" })\r\n        }\r\n      } else {\r\n        if (item.record_serial && item.second_record_serial) {\r\n          if (this.state.serialRecordOne === \"\") {\r\n            this.setState({ serialRecordOne: this.state.serialRecordInput })\r\n            this.setState({ serialRecordInput: \"\" })\r\n            this.serialLogUpdate(type, item, \"recordOne\", order_id, true)\r\n          } else {\r\n            this.setState({ serialRecordTwo: this.state.serialRecordInput })\r\n            enableSerial = true\r\n            this.setState({ serialRecordPopUpShow: false, type: \"\", serialRecordInput: \"\", serialRecordOne: \"\", serialRecordTwo: \"\" })\r\n            this.serialLogUpdate(type, item, \"recordTwo\", order_id, true)\r\n            this.allTypeScan(type, item)\r\n          }\r\n        } else {\r\n          if (item.record_serial) {\r\n            this.serialLogUpdate(type, item, \"recordOne\", order_id, false)\r\n          } else {\r\n            this.serialLogUpdate(type, item, \"recordTwo\", order_id, false)\r\n          }\r\n          this.allTypeScan(type, item)\r\n          // enableSerial = true\r\n          this.setState({ serialRecordPopUpShow: false, type: \"\", serialRecordInput: \"\" })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  allTypeScan = (type, item, recordSerial) => {\r\n    if (type === \"clickscan\") {\r\n      this.clickScan(item)\r\n    }\r\n    if (type === \"barcode\") {\r\n      this.scanBarcode()\r\n      this.setState({ bar_code: \"\" })\r\n    }\r\n    if (type === \"scan_all_item\") {\r\n      this.scanAllItem(\"scan_all_item\")\r\n    }\r\n    if (type === \"submit_type_scan\") {\r\n      this.submitTypeScan(\"submit_type_scan\")\r\n    }\r\n  }\r\n\r\n  handleSerialRecordInput = (e) => {\r\n    this.setState({ serialRecordInput: e })\r\n  }\r\n\r\n  /*Product Detail Nav Start*/\r\n  redirectToItemDetail(product) {\r\n    if (product && product.product_id) {\r\n      this.props.navigation.navigate(\"ProductDetail\", { productInfo: product.product_id, orderID: this.state.order.order.id, increment_id: this.state.order.order.increment_id })\r\n    }\r\n  }\r\n  /*Product Detail Nav End*/\r\n\r\n  removeFocus() {\r\n    // this.barcode.blur()\r\n    // this.barcode.current.focus()\r\n  }\r\n\r\n  onKeyUp(keyName, e, handle) {\r\n    this.setState({ focusBarcode: true })\r\n  }\r\n\r\n  onKeyDown(keyName, e, handle) {\r\n    this.setState({ focusBarcode: true })\r\n  }\r\n\r\n  navButton = () => {\r\n    this.setState({ reRenderFocus: true, unscannedItemShow: false, nextItemShow: true, scannedItemShow: false }, () => {\r\n      console.log(\"Update\");\r\n    })\r\n    setTimeout(function () {\r\n      this.setState({ reRenderFocus: false, message: \"\" });\r\n    }.bind(this), 1);\r\n  }\r\n\r\n  navButtonLeft = () => {\r\n    this.setState({ reRenderFocus: true, unscannedItemShow: true, nextItemShow: false, scannedItemShow: false }, () => {\r\n      console.log(\"Update\");\r\n    })\r\n    setTimeout(function () {\r\n      this.setState({ reRenderFocus: false, message: \"\" });\r\n    }.bind(this), 1);\r\n  }\r\n\r\n  showScannedList = () => {\r\n    this.setState({ reRenderFocus: true, unscannedList: false, scannedList: true, logList: false })\r\n    setTimeout(function () {\r\n      this.setState({ reRenderFocus: false, message: \"\" });\r\n    }.bind(this), 1);\r\n  }\r\n\r\n  showUnscannedList = () => {\r\n    this.setState({ reRenderFocus: true, unscannedList: true, scannedList: false, logList: false })\r\n    setTimeout(function () {\r\n      this.setState({ reRenderFocus: false, message: \"\" });\r\n    }.bind(this), 1);\r\n  }\r\n\r\n  showLogList = () => {\r\n    this.setState({ reRenderFocus: true, unscannedList: false, scannedList: false, logList: true })\r\n    setTimeout(function () {\r\n      this.setState({ reRenderFocus: false, message: \"\" });\r\n    }.bind(this), 1);\r\n  }\r\n\r\n  closeNotes = () => {\r\n    this.setState({\r\n      notes_toPackerFlag: false,\r\n      notes_internalFlag: false,\r\n      customer_commentsFlag: false\r\n    });\r\n    this.currentFocus()\r\n  }\r\n\r\n  assignUniquebarcode = (from) => {\r\n    this.setState({ shareBarcodeShow: false, alias: false, addBarcodeWindow: false, addBarcodeText: \"\" })\r\n  }\r\n\r\n  proceedAliasing = () => {\r\n    let alias_product_data_id = this.state.updateProduct.alias_product_data.id\r\n    let current_product_data_id = []\r\n    current_product_data_id.push(this.state.updateProduct.current_product_data.id)\r\n    let details = {\r\n      product_alias_ids: current_product_data_id\r\n    }\r\n    this.props.updateProductAlias(alias_product_data_id, details)\r\n    this.props.SearchScanpackOrder(\"\", false)\r\n    updateProductInfoSuccess = true\r\n    updateFromProductSuccess = true\r\n    updateAliasSuccess = true\r\n  }\r\n\r\n  sameBarcode = () => {\r\n    let newHash = {\r\n      value: this.state.addBarcodeText,\r\n      var: \"barcode\",\r\n      id: this.state.addBarcodeItem.product_id,\r\n      permit_same_barcode: true\r\n    }\r\n    this.props.updateProductList(newHash)\r\n    this.setState({ updateProductApiCall: new Date(), shareBarcodeShow: false, alias: false })\r\n    updateProductApi = true\r\n  }\r\n\r\nrender() {\r\n  const config = { velocityThreshold: 1, directionalOffsetThreshold: 80 };\r\n  // const config = { velocityThreshold: 1, directionalOffsetThreshold: 80, gestureIsClickThreshold : 5 };\r\n  const props = this.props\r\n  const Order = this.state.order && this.state.order.order\r\n  const settings = this.state.scan_pack_settings\r\n  Order && Order.status === \"scanned\" && this.props.navigation.navigate(\"ScanPack\", { showScannedMessage: true })\r\n  return (\r\n    <View key=\"main\" style={{ height: \"100%\", flex: 1 }}>\r\n      {\r\n        <React.Fragment>\r\n          {\r\n            this.state.loader &&\r\n            <View style={styles.activityContainer}>\r\n              <ActivityIndicator size=\"large\" color=\"#000\" />\r\n              <View>\r\n                <Text style={{ textAlign: \"center\", color: \"#fff\", fontSize: 16 }}>Loading...</Text>\r\n              </View>\r\n            </View>\r\n          }\r\n          {\r\n            Order && this.state.scan_pack_settings &&\r\n            <View style={[globalStyles.flex1, { height: \"100%\", position: \"relative\" }]}>\r\n              {\r\n                this.state.orderConfirmPopUp\r\n                &&\r\n                <OrderConfirmationPopUp OrderConfirmationCheckFun={() => this.OrderConfirmationCheckFun()}\r\n                  OrderConfirmationCheckInput={this.state.OrderConfirmationCheckInput}\r\n                  errorMessageOrderConfirmationCheck={this.state.errorMessageOrderConfirmationCheck}\r\n                  handleOrderConfirmationCheckInput={(e) => this.handleOrderConfirmationCheckInput(e)}\r\n                  closeAlert={this.closeAlert.bind(this)}\r\n                  orderDetails={this.state.order && this.state.order.order}\r\n                  {...this.props}\r\n                />\r\n              }\r\n              <ProductAlias alias={this.state.alias}\r\n                Product={this.state.Product}\r\n                updateProduct={this.state.updateProduct}\r\n                assignUniquebarcode={(from) => this.assignUniquebarcode(from)}\r\n                shareBarcodeMethod={() => { this.setState({ shareBarcodeShow: true, alias: false }) }}\r\n                proceedAliasing={() => this.proceedAliasing()}\r\n                shareBarcodeShow={this.state.shareBarcodeShow}\r\n                sameBarcode={() => this.sameBarcode()} />\r\n\r\n              { //Succes Image , Error Image , Order Complete Image\r\n                this.state.responseShowAction &&\r\n                <ResponseView orderCompleteAction={this.state.orderCompleteAction}\r\n                  scanSuccessAction={this.state.scanSuccessAction}\r\n                  // scanFailAction={this.state.scanFailAction}\r\n                  scanFailAction={this.state.scanFailAction}\r\n                  scanPackSetting={this.state.scan_pack_settings}\r\n                  generalSetting={this.state.general_settings}\r\n                />\r\n              }\r\n              { //Type Scan Count Pop Up\r\n                this.state.typeScanAlert &&\r\n                <TypeScanAlert closeAlert={this.closeAlert.bind(this)}\r\n                  typeScanCount={this.state.typeScanCount}\r\n                  typeScanCountUpdate={(text) => this.setState({ typeScanCount: text })}\r\n                  submitTypeScan={this.submitTypeScan.bind(this)}\r\n                  // submitTypeScan={this.serialRecordCheck.bind(this , \"submit_type_scan\")}\r\n                  scanPackSetting={this.state.scan_pack_settings}\r\n                  generalSetting={this.state.general_settings}\r\n                />\r\n              }\r\n              { // Add Note Pop Up \r\n                this.state.alert &&\r\n                <Alert closeAlert={this.closeAlert.bind(this)}\r\n                  submitAlert={this.submitAlert.bind(this)}\r\n                  notes_fromPacker={this.state.notes_fromPacker}\r\n                  noteUpdate={(text) => this.setState({ notes_fromPacker: text })}\r\n                  scanPackSetting={this.state.scan_pack_settings}\r\n                  generalSetting={this.state.general_settings}\r\n                />\r\n              }\r\n\r\n              { // Notification Pop Up for messages\r\n                this.state.popUpModelShow &&\r\n                <PopUpModel closeAlert={this.closeAlert.bind(this)}\r\n                  message={this.state.message}\r\n                  messageTypeSuccess={this.state.messageTypeSuccess ? true : false}\r\n                />\r\n              }\r\n              { // Serial Record Pop Up\r\n                this.state.serialRecordPopUpShow &&\r\n                <SerialRecord serialRecordFun={() => this.serialRecordFun()}\r\n                  serialRecordInput={this.state.serialRecordInput}\r\n                  handleSerialRecordInput={(e) => this.handleSerialRecordInput(e)}\r\n                  closeAlert={this.closeAlert.bind(this)}\r\n                  serialRecord={() => this.serialRecord}\r\n                  {...this.props}\r\n                />\r\n              }\r\n              { // Click Scan Confirmation Pop Up\r\n                this.state.clickScanConfirmation &&\r\n                <ClickScanConfirmationPopUp clickScanConfirmFun={() => this.clickScanConfirmFun()}\r\n                  clickScanConfirmInput={this.state.clickScanConfirmInput}\r\n                  errorMessageClickScanConfirmation={this.state.errorMessageClickScanConfirmation}\r\n                  handleClickScanConfirmInput={(e) => this.handleClickScanConfirmInput(e)}\r\n                  closeAlert={this.closeAlert.bind(this)}\r\n                  serialFocus={myInput}\r\n                />\r\n              }\r\n\r\n              { // Add Barcode Pop Up \r\n                this.state.addBarcodeWindow &&\r\n                <AddBarcode closeAlert={(e) => this.closeAlert(e)}\r\n                  addBarcodeSubmit={(e) => this.addBarcodeSubmit(e)}\r\n                  addBarcodeText={this.state.addBarcodeText}\r\n                  addBarcodeChange={(text) => this.setState({ addBarcodeText: text })}\r\n                  addBarcodeWindow={this.state.addBarcodeWindow}\r\n                />\r\n              }\r\n\r\n              { // Notification Pop Up for messages\r\n                this.state.popUpModelShow &&\r\n                <PopUpModel closeAlert={this.closeAlert.bind(this)}\r\n                  message={this.state.message}\r\n                />\r\n              }\r\n              { // Serial Record Pop Up\r\n                this.state.serialRecordPopUpShow &&\r\n                <SerialRecord serialRecordFun={() => this.serialRecordFun()}\r\n                  serialRecordInput={this.state.serialRecordInput}\r\n                  handleSerialRecordInput={(e) => this.handleSerialRecordInput(e)}\r\n                  closeAlert={this.closeAlert.bind(this)}\r\n                  serialRecord={() => this.serialRecord}\r\n                  {...this.props}\r\n                />\r\n              }\r\n              { // Click Scan Confirmation Pop Up\r\n                this.state.clickScanConfirmation &&\r\n                <ClickScanConfirmationPopUp clickScanConfirmFun={() => this.clickScanConfirmFun()}\r\n                  clickScanConfirmInput={this.state.clickScanConfirmInput}\r\n                  errorMessageClickScanConfirmation={this.state.errorMessageClickScanConfirmation}\r\n                  handleClickScanConfirmInput={(e) => this.handleClickScanConfirmInput(e)}\r\n                  closeAlert={this.closeAlert.bind(this)}\r\n                  serialFocus={myInput}\r\n                />\r\n              }\r\n\r\n              {\r\n                //productConfirmationCheck\r\n                this.state.productConfirmationCheck &&\r\n                <ProductConfirmationCheck ProductConfirmationCheckFun={() => this.ProductConfirmationCheckFun()}\r\n                  ProductConfirmationCheckInput={this.state.productConfirmationCheckInput}\r\n                  errorMessageProductConfirmationCheck={this.state.errorMessageProductConfirmationCheck}\r\n                  handleProductConfirmationCheckInput={(e) => this.handleProductConfirmationCheckInput(e)}\r\n                  closeAlert={this.closeAlert.bind(this)}\r\n                  instruction={this.state.blockItemToScan}\r\n                  {...this.props}\r\n                />\r\n              }\r\n              {\r\n                this.state.scan_pack_settings.post_scanning_option !== \"None\" && Order && Order.unscanned_items.length === 0\r\n                  ?\r\n                  <ConfirmTrackingNumber postScanningFieldLabel={this.state.postScanningFieldLabel}\r\n                    trackingOrderInput={this.state.trackingOrderInput}\r\n                    onChangeText={(text) => { this.setState({ trackingOrderInput: text }) }}\r\n                    onSubmitEditing={this.trackingSubmit.bind(this, this.state.trackingOrderInput)}\r\n                    postScanningMessageDetail={this.state.postScanningMessageDetail}\r\n                  />\r\n                  :\r\n                  <React.Fragment>\r\n                    {\r\n                      this.props.route && this.props.route.params && this.state.order &&\r\n                      <Hotkeys\r\n                        keyName=\"enter\"\r\n                        onKeyDown={this.onKeyDown.bind(this)}\r\n                        onKeyUp={this.onKeyUp.bind(this)}\r\n                      >\r\n                        <View style={{ flex: 1 }} >\r\n                          {\r\n                            Platform.OS === \"web\"\r\n                              ?\r\n                              <View style={{ flex: 1 }}>\r\n                                {\r\n                                  this.state.windowWidth >= 900\r\n                                    ?\r\n                                    <View style={{ flex: 1, flexDirection: \"row\" }}>\r\n                                      <View style={{ flex: 2 }}>\r\n                                        <UnscannedItems {...this.props}\r\n                                          order={this.state.order}\r\n                                          currentFocus={() => this.currentFocus()}\r\n                                          scanPackSetting={this.state.scan_pack_settings}\r\n                                          generalSetting={this.state.general_settings}\r\n                                          redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\r\n                                          unscannedItemPerPage={this.state.unscannedItemPerPage}\r\n                                          InputField={this.InputField}\r\n                                          scannedList={this.state.scannedList}\r\n                                          unscannedList={this.state.unscannedList}\r\n                                          logList={this.state.logList}\r\n                                          showUnscannedList={() => this.showUnscannedList()}\r\n                                          showScannedList={() => this.showScannedList()}\r\n                                          showLogList={() => this.showLogList()}\r\n                                          localLogs={this.state.localLogs}\r\n                                        />\r\n                                      </View>\r\n                                      <View style={{ flex: 4 }}>\r\n                                        {\r\n                                          this.state.loadOrderSpinner\r\n                                            ?\r\n                                            <View style={{ marginTop: 100 }}>\r\n                                              <ActivityIndicator size=\"large\" color=\"#000\" />\r\n                                              <View>\r\n                                                <Text style={{ textAlign: \"center\" }}>Fetch more item to scan...</Text>\r\n                                              </View>\r\n                                            </View>\r\n                                            :\r\n                                            <NextItems {...this.props}\r\n                                              order={this.state.order}\r\n                                              currentFocus={() => this.currentFocus()}\r\n                                              barcodeRef={this.barcode}\r\n                                              access_token={this.state.token}\r\n                                              barcodeState={this.state.bar_code}\r\n                                              removeFocus={() => this.removeFocus()}\r\n                                              clickScan={(e) => this.clickScan(e)}\r\n                                              // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\r\n                                              scanAllItem={(e) => this.scanAllItem(e)}\r\n                                              // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\r\n                                              scanBarcode={(e) => this.scanBarcode(e)}\r\n                                              // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\r\n                                              stateUpdate={(text) => this.setState({ bar_code: text })}\r\n                                              scanPackSetting={this.state.scan_pack_settings}\r\n                                              generalSetting={this.state.general_settings}\r\n                                              activities={props && props.Order && props.Order.activities}\r\n                                              localLogs={this.state.localLogs}\r\n                                              restartButton={() => this.restartButton()}\r\n                                              redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\r\n                                              addNote={() => this.addNote()}\r\n                                              saveChanges={() => this.saveChanges()}\r\n                                              leaveComponent={(order, type) => this.leaveComponent(order, type)}\r\n                                              loadOrderSpinner={this.state.loadOrderSpinner}\r\n                                              unscannedItemPerPage={this.state.unscannedItemPerPage}\r\n                                              scannedItemPerPage={this.state.scannedItemPerPage}\r\n                                              InputField={this.InputField}\r\n                                              scannedList={this.state.scannedList}\r\n                                              unscannedList={this.state.unscannedList}\r\n                                              logList={this.state.logList}\r\n                                              showScannedList={() => this.showScannedList()}\r\n                                              showUnscannedList={() => this.showUnscannedList()}\r\n                                              showLogList={() => this.showLogList()}\r\n                                              addBarcode={(e) => this.addBarcode(e)}\r\n                                              notesToPackerFlag={this.state.notes_toPackerFlag}\r\n                                              closeNotes={() => this.closeNotes()}\r\n                                              settings={settings}\r\n                                              customerCommentsFlag={this.state.customer_commentsFlag}\r\n                                              internalNotesFlag={this.state.notes_internalFlag}\r\n                                            />\r\n                                        }\r\n                                      </View>\r\n                                      <View style={{ flex: 2, zIndex: -1 }}>\r\n                                        <ScannedItems {...this.props}\r\n                                          order={this.state.order}\r\n                                          scanPackSetting={this.state.scan_pack_settings}\r\n                                          generalSetting={this.state.general_settings}\r\n                                          scannedItemPerPage={this.state.scannedItemPerPage}\r\n                                        />\r\n                                      </View>\r\n                                    </View>\r\n                                    :\r\n                                    <View style={{ flex: 1, backgroundColor: \"#292929\" }}>\r\n                                      {\r\n                                        this.state.unscannedItemShow === true && this.state.nextItemShow === false &&\r\n                                        <UnscannedItems {...this.props}\r\n                                          order={this.state.order}\r\n                                          currentFocus={() => this.currentFocus()}\r\n                                          barcodeRef={this.barcode}\r\n                                          access_token={this.state.token}\r\n                                          barcodeState={this.state.bar_code}\r\n                                          removeFocus={(e) => this.removeFocus(e)}\r\n                                          redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\r\n                                          clickScan={(e) => this.clickScan(e)}\r\n                                          // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\r\n                                          scanAllItem={(e) => this.scanAllItem(e)}\r\n                                          // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\r\n                                          scanBarcode={(e) => this.scanBarcode(e)}\r\n                                          // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\r\n                                          stateUpdate={(text) => this.setState({ bar_code: text })}\r\n                                          scanPackSetting={this.state.scan_pack_settings}\r\n                                          generalSetting={this.state.general_settings}\r\n                                          activities={props && props.Order && props.Order.activities}\r\n                                          localLogs={this.state.localLogs}\r\n                                          restartButton={() => this.restartButton()}\r\n                                          addNote={() => this.addNote()}\r\n                                          saveChanges={() => this.saveChanges()}\r\n                                          navButton={() => this.navButton()}\r\n                                          leaveComponent={(order, type) => this.leaveComponent(order, type)}\r\n                                          unscannedItemPerPage={this.state.unscannedItemPerPage}\r\n                                          InputField={this.InputField}\r\n                                          scannedList={this.state.scannedList}\r\n                                          unscannedList={this.state.unscannedList}\r\n                                          logList={this.state.logList}\r\n                                          showUnscannedList={() => this.showUnscannedList()}\r\n                                          showScannedList={() => this.showScannedList()}\r\n                                          showLogList={() => this.showLogList()}\r\n                                          localLogs={this.state.localLogs}\r\n                                        />\r\n                                      }\r\n\r\n                                      {\r\n                                        this.state.loadOrderSpinner\r\n                                          ?\r\n                                          <View style={{ marginTop: 100 }}>\r\n                                            <ActivityIndicator size=\"large\" color=\"#000\" />\r\n                                            <View>\r\n                                              <Text style={{ textAlign: \"center\" }}>Fetch more item to scan...</Text>\r\n                                            </View>\r\n                                          </View>\r\n                                          :\r\n                                          <>\r\n                                            {\r\n                                              this.state.unscannedItemShow === false && this.state.nextItemShow === true && this.state.scannedItemShow === false &&\r\n                                              <NextItems {...this.props}\r\n                                                order={this.state.order}\r\n                                                currentFocus={() => this.currentFocus()}\r\n                                                barcodeRef={this.barcode}\r\n                                                access_token={this.state.token}\r\n                                                barcodeState={this.state.bar_code}\r\n                                                removeFocus={(e) => this.removeFocus(e)}\r\n                                                redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\r\n                                                clickScan={(e) => this.clickScan(e)}\r\n                                                // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\r\n                                                scanAllItem={(e) => this.scanAllItem(e)}\r\n                                                // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\r\n                                                scanBarcode={(e) => this.scanBarcode(e)}\r\n                                                // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\r\n                                                stateUpdate={(text) => this.setState({ bar_code: text })}\r\n                                                scanPackSetting={this.state.scan_pack_settings}\r\n                                                generalSetting={this.state.general_settings}\r\n                                                activities={props && props.Order && props.Order.activities}\r\n                                                localLogs={this.state.localLogs}\r\n                                                restartButton={() => this.restartButton()}\r\n                                                addNote={() => this.addNote()}\r\n                                                saveChanges={() => this.saveChanges()}\r\n                                                navButtonLeft={() => this.navButtonLeft()}\r\n                                                navButtonRight={() => { this.setState({ unscannedItemShow: false, nextItemShow: false, scannedItemShow: true }) }}\r\n                                                leaveComponent={(order, type) => this.leaveComponent(order, type)}\r\n                                                loadOrderSpinner={this.state.loadOrderSpinner}\r\n                                                unscannedItemPerPage={this.state.unscannedItemPerPage}\r\n                                                scannedItemPerPage={this.state.scannedItemPerPage}\r\n                                                InputField={this.InputField}\r\n                                                scannedList={this.state.scannedList}\r\n                                                unscannedList={this.state.unscannedList}\r\n                                                logList={this.state.logList}\r\n                                                showScannedList={() => this.showScannedList()}\r\n                                                showUnscannedList={() => this.showUnscannedList()}\r\n                                                showLogList={() => this.showLogList()}\r\n                                                addBarcode={(e) => this.addBarcode(e)}\r\n                                                notesToPackerFlag={this.state.notes_toPackerFlag}\r\n                                                closeNotes={() => this.closeNotes()}\r\n                                                settings={settings}\r\n                                                customerCommentsFlag={this.state.customer_commentsFlag}\r\n                                                internalNotesFlag={this.state.notes_internalFlag}\r\n                                              />\r\n                                            }\r\n                                          </>\r\n                                      }\r\n                                      {\r\n                                        this.state.nextItemShow === false && this.state.scannedItemShow === true &&\r\n                                        <ScannedItems {...this.props}\r\n                                          order={this.state.order}\r\n                                          scanPackSetting={this.state.scan_pack_settings}\r\n                                          generalSetting={this.state.general_settings}\r\n                                          navButton={() => { this.setState({ unscannedItemShow: false, nextItemShow: true, scannedItemShow: false }) }}\r\n                                          scannedItemPerPage={this.state.scannedItemPerPage}\r\n                                        />\r\n                                      }\r\n                                    </View>\r\n                                }\r\n                              </View>\r\n                              :\r\n                              <Swiper index={1}\r\n                                onIndexChanged={(e) => this.enableToggle(e)}\r\n                                keyboardShouldPersistTaps={'handled'}\r\n                                loop={false}\r\n                                horizontal={true}\r\n                                dotStyle={{ display: \"none\" }}\r\n                                activeDotStyle={{ display: \"none\" }}>\r\n                                <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n                                  <UnscannedItems {...this.props}\r\n                                    order={this.state.order}\r\n                                    currentFocus={() => this.currentFocus()}\r\n                                    barcodeRef={this.barcode}\r\n                                    barcodeState={this.state.bar_code}\r\n                                    clickScan={(e) => this.clickScan(e)}\r\n                                    // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\r\n                                    scanAllItem={(e) => this.scanAllItem(e)}\r\n                                    // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\r\n                                    scanBarcode={(e) => this.scanBarcode(e)}\r\n                                    // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\r\n                                    stateUpdate={(text) => this.setState({ bar_code: text })}\r\n                                    leaveComponent={(order, type) => this.leaveComponent(order, type)}\r\n                                    scanPackSetting={this.state.scan_pack_settings}\r\n                                    generalSetting={this.state.general_settings}\r\n                                    redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\r\n                                    restartButton={() => this.restartButton()}\r\n                                    addNote={() => this.addNote()}\r\n                                    saveChanges={() => this.saveChanges()}\r\n                                    unscannedItemPerPage={this.state.unscannedItemPerPage}\r\n                                    InputField={this.InputField}\r\n                                    scannedList={this.state.scannedList}\r\n                                    unscannedList={this.state.unscannedList}\r\n                                    logList={this.state.logList}\r\n                                    showUnscannedList={() => this.showUnscannedList()}\r\n                                    showScannedList={() => this.showScannedList()}\r\n                                    showLogList={() => this.showLogList()}\r\n                                    localLogs={this.state.localLogs}\r\n                                  />\r\n                                </View>\r\n                                <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n                                  <NextItems {...this.props}\r\n                                    order={this.state.order}\r\n                                    currentFocus={() => this.currentFocus()}\r\n                                    barcodeRef={this.barcode}\r\n                                    access_token={this.state.token}\r\n                                    barcodeState={this.state.bar_code}\r\n                                    clickScan={(e) => this.clickScan(e)}\r\n                                    removeFocus={(e) => this.removeFocus(e)}\r\n                                    // clickScan={this.serialRecordCheck.bind(this , \"clickscan\")}\r\n                                    scanAllItem={(e) => this.scanAllItem(e)}\r\n                                    // scanAllItem={this.serialRecordCheck.bind(this , \"scan_all_item\")}\r\n                                    scanBarcode={(e) => this.scanBarcode(e)}\r\n                                    // scanBarcode={this.serialRecordCheck.bind(this , \"barcode\")}\r\n                                    stateUpdate={(text) => this.setState({ bar_code: text })}\r\n                                    scanPackSetting={this.state.scan_pack_settings}\r\n                                    generalSetting={this.state.general_settings}\r\n                                    activities={props && props.Order && props.Order.activities}\r\n                                    localLogs={this.state.localLogs}\r\n                                    restartButton={() => this.restartButton()}\r\n                                    addNote={() => this.addNote()}\r\n                                    saveChanges={() => this.saveChanges()}\r\n                                    leaveComponent={(order, type) => this.leaveComponent(order, type)}\r\n                                    redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\r\n                                    loadOrderSpinner={this.state.loadOrderSpinner}\r\n                                    unscannedItemPerPage={this.state.unscannedItemPerPage}\r\n                                    scannedItemPerPage={this.state.scannedItemPerPage}\r\n                                    InputField={this.InputField}\r\n                                    scannedList={this.state.scannedList}\r\n                                    unscannedList={this.state.unscannedList}\r\n                                    logList={this.state.logList}\r\n                                    showScannedList={() => this.showScannedList()}\r\n                                    showUnscannedList={() => this.showUnscannedList()}\r\n                                    showLogList={() => this.showLogList()}\r\n                                    addBarcode={(e) => this.addBarcode(e)}\r\n                                  />\r\n                                </View>\r\n                                <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n                                  <ScannedItems {...this.props}\r\n                                    order={this.state.order}\r\n                                    scanPackSetting={this.state.scan_pack_settings}\r\n                                    generalSetting={this.state.general_settings}\r\n                                    redirectToItemDetail={(e) => this.redirectToItemDetail(e)}\r\n                                    scannedItemPerPage={this.state.scannedItemPerPage}\r\n                                  />\r\n                                </View>\r\n                              </Swiper>\r\n                          }\r\n                        </View>\r\n                      </Hotkeys>\r\n                    }\r\n                  </React.Fragment>\r\n              }\r\n            </View>\r\n          }\r\n        </React.Fragment>\r\n      }\r\n    </View>\r\n  );\r\n}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    Order: state.order.order,\r\n    ordersList: state.order.list,\r\n    bothSettings: state.user.bothSettings,\r\n    searchOrder: state.scanpack,\r\n    saveData: state.updateAsync.retriveData,\r\n    updateLog: state.saveLog,\r\n    callOrder: state.scanpack.searchOrder,\r\n    updateProduct: state.product.updateProductList,\r\n    updateAlias: state.product.updateProductAlias\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  GetOrderDetail,\r\n  GetOrderList,\r\n  GetBothSettings,\r\n  SearchScanpackOrder,\r\n  GetItem,\r\n  SetItem,\r\n  SubmitLog,\r\n  SearchOrder,\r\n  updateProductList,\r\n  updateProductAlias\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanPackItem)\r\n"]},"metadata":{},"sourceType":"module"}