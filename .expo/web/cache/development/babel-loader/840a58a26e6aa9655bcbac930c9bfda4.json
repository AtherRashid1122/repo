{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL PC\\\\Downloads\\\\GroovePacker\\\\src\\\\components\\\\scanpack\\\\scanpack.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport GestureRecognizer, { swipeDirections } from 'react-native-swipe-gestures';\nimport { connect } from 'react-redux';\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { GetOrderList, SearchOrder } from \"../../actions/orderActions\";\nimport { SearchScanpackOrder } from \"../../actions/scanpackAction\";\nimport { SetItem, GetItem } from \"../../actions/updateAsyncAction\";\nimport { GetGeneralSetting, GetScanPackSetting, UserInfo } from \"../../actions/userAction\";\nimport globalStyles from \"../../style/global\";\nimport styles from \"../../style/scanpack\";\nvar orderListSuccess = false;\nvar searchOrderSuccess = false;\nvar validateUser = false;\n\nvar ScanPack = function (_Component) {\n  _inherits(ScanPack, _Component);\n\n  var _super = _createSuper(ScanPack);\n\n  function ScanPack(props) {\n    var _this;\n\n    _classCallCheck(this, ScanPack);\n\n    _this = _super.call(this, props);\n\n    _this.getOrder = function () {\n      if (Platform.OS === \"ios\" || Platform.OS === \"android\") {\n        _this.checkConnection(\"apiCall\");\n      } else {\n        _this.apiCall();\n      }\n    };\n\n    _this.checkConnection = function _callee(type, input) {\n      var connectionInfo;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(NetInfo.fetch());\n\n            case 2:\n              connectionInfo = _context.sent;\n\n              if (connectionInfo.isConnected) {\n                type === \"callShipmentOrder\" ? _this.callShipmentOrder(input) : _this.apiCall();\n              } else {\n                _this.setState({\n                  rfoTitle: \"Please check your internet connection\"\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.apiCall = function () {\n      _this.props.GetOrderList(_this.state.dataList);\n\n      orderListSuccess = true;\n    };\n\n    _this.redirect = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.clear());\n\n            case 2:\n              _this.props.navigation.navigate(\"SignIn\", {\n                status: \"Inactive\",\n                time: new Date()\n              });\n\n              _this.setState({\n                userInfo: _this.props.userInfo\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.statusFunction = function (message) {\n      var data = _this.state.data;\n      data[\"input\"] = \"\";\n\n      _this.setState({\n        rfoTitle: message,\n        data: data\n      });\n    };\n\n    _this.setFocus = function () {\n      _this.inputFocus.current.focus();\n    };\n\n    _this.orderDetails = function (order) {\n      if (order && order.scan_hash && order.scan_hash.data) {\n        _this.props.navigation.navigate(\"ScanPackItem\", {\n          data: order.scan_hash.data\n        });\n      }\n    };\n\n    _this.searchOrder = function (input) {\n      _this.setState({\n        loading: true,\n        loaderTitle: \"Loading...\"\n      });\n\n      if (input !== \"\") {\n        if (Platform.OS === \"ios\" || Platform.OS === \"android\") {\n          _this.checkConnection(\"callShipmentOrder\", input);\n        } else {\n          _this.callShipmentOrder(input);\n        }\n      }\n    };\n\n    _this.callShipmentOrder = function (input) {\n      var shipmentOrder = _this.state.data;\n      shipmentOrder[\"input\"] = input;\n\n      if (input !== \"\") {\n        shipmentOrder.input = input;\n\n        _this.props.SearchScanpackOrder(shipmentOrder);\n\n        searchOrderSuccess = true;\n        var apiCallTime = new Date();\n\n        _this.setState({\n          apiCallTime: apiCallTime\n        });\n      }\n    };\n\n    _this.handleChange = function (name, value) {\n      var order = _this.state.data;\n\n      if (name === \"searchOrder\") {\n        order[\"input\"] = value;\n      }\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.state = {\n      data: {\n        \"input\": \"\",\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null,\n        \"app\": \"app\"\n      },\n      dataList: {\n        \"filter\": \"\",\n        \"order\": \"DESC\",\n        \"limit\": \"1\",\n        \"offset\": \"0\",\n        \"app\": \"app\",\n        \"count\": 0\n      },\n      orderDetail: null,\n      rfoTitle: \"Scan the Packing Slip of an Order you'd like to Pack.\",\n      time: new Date(),\n      loading: false,\n      loaderTitle: \"\",\n      userInfo: \"\",\n      scan_pack_settings: null\n    };\n    _this.inputFocus = React.createRef();\n    _this.searchOrder = _this.searchOrder.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ScanPack, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.UserInfo();\n      this.setState({\n        loading: true,\n        loaderTitle: \"Loading...\"\n      });\n      this.getOrder();\n      validateUser = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (orderListSuccess === true && this.props && this.props.ordersList && this.props.ordersList !== this.state.list) {\n        orderListSuccess = false;\n        var list = this.props.ordersList;\n        var orderShow = list.orders.length === 0 ? true : false;\n        this.setState({\n          scan_pack_settings: list.scan_pack_settings,\n          general_settings: list.general_settings,\n          rfoTitle: list.orders.length > 0 ? list && list.orders[0] && list.orders[0].ordernum : \"No orders were found in the awaiting orders list.\",\n          orderDetail: list && list.orders && list.orders[0],\n          loading: false,\n          list: this.props.ordersList,\n          unClick: orderShow\n        });\n      }\n\n      this.setFocus();\n\n      if (searchOrderSuccess === true && this.props && this.props.searchOrder && this.props.searchOrder.time > this.state.apiCallTime && this.props.searchOrder !== this.state.oldOne) {\n        var searchResult = this.props.searchOrder && this.props.searchOrder.searchOrder;\n        var order = searchResult && searchResult.data.order && searchResult.data.order[0];\n\n        if (searchResult) {\n          if (searchResult.matched) {\n            if (searchResult.data) {\n              this.orderDetails(order);\n              searchOrderSuccess = false;\n            } else {\n              if (searchResult.data.status === \"scanned\") {\n                var message = \"Order \" + searchResult.data.order_num + \" has already been scanned.\";\n                this.statusFunction(message);\n                this.setState({\n                  unClick: true\n                });\n              }\n            }\n          } else {\n            this.statusFunction(searchResult.error_messages);\n            this.setState({\n              unClick: true\n            });\n            searchOrderSuccess = false;\n          }\n\n          this.setFocus();\n          var data = this.state.data;\n          data[\"input\"] = \"\";\n          this.setState({\n            oldOne: this.props.searchOrder,\n            data: data,\n            loading: false\n          });\n        }\n      }\n\n      if (validateUser && this.props && this.props.userInfo && this.props.userInfo !== this.state.userInfo) {\n        if (this.props.userInfo.is_active === false) {\n          validateUser = false;\n          this.props.UserInfo(false);\n          this.redirect();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.GetOrderList(this.state.dataList, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(SafeAreaView, {\n        style: globalStyles.flex1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: globalStyles.flexDirectionRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }\n      }, React.createElement(TextInput, {\n        placeholder: \"Type order to search\",\n        name: \"searchOrder\",\n        autoFocus: true,\n        ref: this.inputFocus,\n        value: this.state.data.input,\n        onChangeText: function onChangeText(text) {\n          _this2.handleChange(\"searchOrder\", text);\n        },\n        onSubmitEditing: function onSubmitEditing() {\n          _this2.searchOrder(_this2.state.data && _this2.state.data.input);\n        },\n        style: styles.inputBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }\n      })), React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 9\n        }\n      }, this.state.loading ? React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: \"#336599\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        style: {\n          fontSize: 13,\n          fontWeight: 500\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }\n      }, this.state.loaderTitle)) : React.createElement(React.Fragment, null, this.state.error ? React.createElement(Text, {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }\n      }, this.state.error) : React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }\n      }, this.state.unClick ? React.createElement(Text, {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }\n      }, this.state.rfoTitle) : React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.searchOrder(_this2.state.rfoTitle);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 27\n        }\n      }, this.state.rfoTitle))))));\n    }\n  }]);\n\n  return ScanPack;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ordersList: state.order.list,\n    searchOrder: state.scanpack,\n    userInfo: state.user.userInfo\n  };\n};\n\nvar mapDispatchToProps = {\n  GetOrderList: GetOrderList,\n  SearchScanpackOrder: SearchScanpackOrder,\n  UserInfo: UserInfo\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanPack);","map":{"version":3,"sources":["C:/Users/DELL PC/Downloads/GroovePacker/src/components/scanpack/scanpack.js"],"names":["React","Component","GestureRecognizer","swipeDirections","connect","NetInfo","GetOrderList","SearchOrder","SearchScanpackOrder","SetItem","GetItem","GetGeneralSetting","GetScanPackSetting","UserInfo","globalStyles","styles","orderListSuccess","searchOrderSuccess","validateUser","ScanPack","props","getOrder","Platform","OS","checkConnection","apiCall","type","input","fetch","connectionInfo","isConnected","callShipmentOrder","setState","rfoTitle","state","dataList","redirect","AsyncStorage","clear","navigation","navigate","status","time","Date","userInfo","statusFunction","message","data","setFocus","inputFocus","current","focus","orderDetails","order","scan_hash","searchOrder","loading","loaderTitle","shipmentOrder","apiCallTime","handleChange","name","value","orderDetail","scan_pack_settings","createRef","bind","ordersList","list","orderShow","orders","length","general_settings","ordernum","unClick","oldOne","searchResult","matched","order_num","error_messages","is_active","flex1","flexDirectionRow","text","inputBox","container","flex","justifyContent","fontSize","fontWeight","error","mapStateToProps","scanpack","user","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component  } from 'react';\nimport { SafeAreaView , View, Text, TextInput,ActivityIndicator , TouchableOpacity , AsyncStorage , Platform } from 'react-native';\nimport GestureRecognizer, {swipeDirections} from 'react-native-swipe-gestures';\nimport { connect } from 'react-redux';\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { GetOrderList , SearchOrder } from \"../../actions/orderActions\";\nimport {SearchScanpackOrder} from \"../../actions/scanpackAction\";\nimport { SetItem , GetItem } from \"../../actions/updateAsyncAction\";\nimport {GetGeneralSetting , GetScanPackSetting , UserInfo} from \"../../actions/userAction\";\nimport globalStyles from '../../style/global';\nimport styles from '../../style/scanpack';\n\nlet orderListSuccess = false;\nlet searchOrderSuccess = false;\nlet validateUser = false\n\nclass ScanPack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data:{\n        \"input\": \"\",\n        \"state\": \"scanpack.rfo\",\n        \"id\": null,\n        \"box_id\": null,\n        \"store_order_id\": null,\n        \"app\": \"app\"\n      },\n      dataList:{\n          \"filter\": \"\",\n          \"order\": \"DESC\",\n          \"limit\": \"1\",\n          \"offset\": \"0\",\n          \"app\": \"app\",\n          \"count\": 0\n      },\n      orderDetail: null,\n      rfoTitle: \"Scan the Packing Slip of an Order you'd like to Pack.\",\n      time: new Date(),\n      loading: false,\n      loaderTitle: \"\",\n      userInfo: \"\",\n      scan_pack_settings: null\n    };\n    this.inputFocus = React.createRef();\n    this.searchOrder = this.searchOrder.bind(this);\n  }\n\n  componentDidMount(){\n    this.props.UserInfo()\n    this.setState({loading: true , loaderTitle: \"Loading...\"})\n    this.getOrder()\n    validateUser = true\n  }\n\n  //According to the platform call the function\n  getOrder = () => {\n    if(Platform.OS === \"ios\" || Platform.OS === \"android\"){\n      this.checkConnection(\"apiCall\")\n    }else{\n      this.apiCall()\n    }\n  }\n\n  //Check the connection for the ios and android\n  checkConnection = async(type , input) => {\n    const connectionInfo = await NetInfo.fetch();\n    if(connectionInfo.isConnected){\n      type === \"callShipmentOrder\" ? this.callShipmentOrder(input) : this.apiCall()\n    }else{\n      this.setState({rfoTitle: \"Please check your internet connection\"})\n    }\n  }\n\n  //Call the api to fetch the data from backend\n  apiCall = () => {\n    this.props.GetOrderList(this.state.dataList);\n    orderListSuccess = true\n  }\n\n\n  componentDidUpdate(){\n    //OrderList + scanpacksetting + general setting\n    if(orderListSuccess === true && this.props && this.props.ordersList && this.props.ordersList !== this.state.list){\n      orderListSuccess = false\n      let list = this.props.ordersList\n      let orderShow = list.orders.length === 0 ? true : false\n      this.setState({ scan_pack_settings: list.scan_pack_settings , \n                      general_settings: list.general_settings,\n                      rfoTitle: list.orders.length > 0 ? list && list.orders[0] && list.orders[0].ordernum : \"No orders were found in the awaiting orders list.\",\n                      //rfoTitle: list.orders.length > 0 ? list && list.orders[0] && list.orders[0].ordernum : \"Please scan an order to continue.\" ,\n                      orderDetail: list && list.orders && list.orders[0],\n                      loading: false,\n                      list: this.props.ordersList,\n                      unClick: orderShow\n                    })\n    }\n      this.setFocus()\n\n    //Search Order Data\n    if(searchOrderSuccess === true && this.props && \n        this.props.searchOrder && this.props.searchOrder.time > this.state.apiCallTime &&  \n          this.props.searchOrder !== this.state.oldOne){\n      let searchResult = this.props.searchOrder && this.props.searchOrder.searchOrder\n      let order =  searchResult && searchResult.data.order && searchResult.data.order[0]\n      if(searchResult){\n        if(searchResult.matched){\n          if(searchResult.data){\n              this.orderDetails(order) \n              searchOrderSuccess = false\n            }else{\n              if(searchResult.data.status === \"scanned\"){\n                let message = `Order ${searchResult.data.order_num} has already been scanned.` \n                this.statusFunction(message)\n                this.setState({unClick: true})\n              }\n            }\n        }else{\n          this.statusFunction(searchResult.error_messages)\n          this.setState({unClick: true})\n          searchOrderSuccess = false\n        }\n        this.setFocus() \n        let data = this.state.data\n        data[\"input\"] = \"\"\n        this.setState({oldOne: this.props.searchOrder ,data ,loading: false })\n      }\n    }\n\n    if(validateUser && this.props && this.props.userInfo && this.props.userInfo !== this.state.userInfo){\n      if(this.props.userInfo.is_active === false){\n        validateUser = false\n        this.props.UserInfo(false)\n        this.redirect()\n      }\n    }\n\n  }\n\n  redirect = async() => {\n    // await AsyncStorage.removeItem(\"access_token\")\n    await AsyncStorage.clear();\n    this.props.navigation.navigate(\"SignIn\",{ status: \"Inactive\" , time: new Date()})\n    this.setState({userInfo: this.props.userInfo})\n  }\n\n  //After the apis call update the status (scanned , order  not present)\n  statusFunction = (message) => {\n    let data = this.state.data\n    data[\"input\"] = \"\"\n    this.setState({rfoTitle: message , data})\n  }\n\n  //To set the focus\n  setFocus = () => {\n    this.inputFocus.current.focus();\n  }\n\n  //Redirect to the scanpackItem page with order details \n  orderDetails = (order) => {\n    if(order && order.scan_hash && order.scan_hash.data){\n      this.props.navigation.navigate(\"ScanPackItem\" , {data: order.scan_hash.data})\n    }\n  }\n\n  //Check the connection for mobile device before call the api\n  searchOrder = (input) => {\n    this.setState({loading: true , loaderTitle: \"Loading...\"})\n    if(input !== \"\"){\n      if(Platform.OS === \"ios\" || Platform.OS === \"android\"){\n        this.checkConnection(\"callShipmentOrder\", input)\n      }else{\n        this.callShipmentOrder(input)\n      }\n    }\n  }\n\n  //Api to call the search order\n  callShipmentOrder = (input) => {\n    let shipmentOrder = this.state.data\n    shipmentOrder[\"input\"] = input\n    if(input !== \"\"){\n      shipmentOrder.input = input\n      this.props.SearchScanpackOrder(shipmentOrder)\n      searchOrderSuccess = true\n      let apiCallTime = new Date()\n      this.setState({apiCallTime})\n    }\n  }\n\n  //Handle the search field input\n  handleChange = (name , value) => {\n    let order =  this.state.data;\n    if(name === \"searchOrder\"){\n      order[\"input\"] = value\n    }\n    this.setState({order})\n  }\n\n  componentWillUnmount(){\n    this.props.GetOrderList(this.state.dataList,false)\n  }\n\n  render() {\n    return (\n      <SafeAreaView style={globalStyles.flex1}>\n        <View style={globalStyles.flexDirectionRow}>\n          <TextInput placeholder=\"Type order to search\"\n                     name=\"searchOrder\"\n                     autoFocus={true}\n                     ref={this.inputFocus}\n                     value={this.state.data.input}\n                     onChangeText={(text) => {this.handleChange(\"searchOrder\", text)}}\n                     onSubmitEditing={() => {this.searchOrder(this.state.data && this.state.data.input)}}\n                     style={styles.inputBox}/>\n        </View>\n        <View style={styles.container}>\n          {\n            this.state.loading\n              ?\n              <View style={{flex: 1 , justifyContent: \"center\"}}>\n                <ActivityIndicator size=\"large\" color=\"#336599\"/>\n                <Text style={{fontSize: 13 , fontWeight: 500}}>{this.state.loaderTitle}</Text>\n              </View>\n              :\n              <>\n                {\n                  this.state.error\n                  ?\n                    <Text style={styles.text}>\n                      {this.state.error}\n                    </Text>\n                  :\n                    <React.Fragment>\n                    {\n                      this.state.unClick\n                      ?\n                        <Text style={styles.text}>\n                            {this.state.rfoTitle}\n                        </Text>\n                      :\n                        <TouchableOpacity \n                          onPress={() => this.searchOrder(this.state.rfoTitle)}\n                          >\n                          <Text style={styles.text}>\n                              {this.state.rfoTitle}\n                          </Text>\n                        </TouchableOpacity>\n                    }\n                    </React.Fragment>  \n                }\n              </>   \n          }\n        </View>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ordersList: state.order.list,\n    searchOrder: state.scanpack,\n    userInfo: state.user.userInfo\n  }\n};\n\nconst mapDispatchToProps = {\n  GetOrderList,\n  SearchScanpackOrder,\n  UserInfo\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScanPack)\n"]},"metadata":{},"sourceType":"module"}