{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { SUBMIT_LOG, SCANPACK_BUG_REPORT } from \"../constants\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport function SubmitLog(data) {\n  return function _callee2(dispatch) {\n    var access_token, url;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"access_token\"));\n\n          case 2:\n            access_token = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"url\"));\n\n          case 5:\n            url = _context2.sent;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('logsArray').then(function (log) {\n              axios({\n                method: 'post',\n                url: url + \"/scan_pack/scan_pack_v2\",\n                headers: {\n                  'Authorization': \"Bearer \" + access_token\n                },\n                data: {\n                  data: data,\n                  app: \"app\"\n                }\n              }).then(function _callee(res) {\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        dispatch({\n                          type: SUBMIT_LOG,\n                          payload: res.data,\n                          time: new Date()\n                        });\n\n                        if (!(res.status === 200)) {\n                          _context.next = 4;\n                          break;\n                        }\n\n                        _context.next = 4;\n                        return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"logsArray\"));\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }).catch(function (error) {});\n            }));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}\nexport function ScanPackBugReport(data) {\n  return function _callee4(dispatch) {\n    var access_token, url;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"access_token\"));\n\n          case 2:\n            access_token = _context4.sent;\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"url\"));\n\n          case 5:\n            url = _context4.sent;\n            axios({\n              method: 'post',\n              url: url + \"/scan_pack/scan_pack_bug_report.json\",\n              headers: {\n                'Authorization': \"Bearer \" + access_token\n              },\n              data: data\n            }).then(function _callee3(res) {\n              return _regeneratorRuntime.async(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      dispatch({\n                        type: SCANPACK_BUG_REPORT,\n                        payload: {\n                          data: res.data,\n                          time: new Date()\n                        }\n                      });\n\n                      if (!(res.status === 200)) {\n                        _context3.next = 4;\n                        break;\n                      }\n\n                      _context3.next = 4;\n                      return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"Logging\"));\n\n                    case 4:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }).catch(function (error) {});\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}","map":{"version":3,"sources":["C:/Users/DELL PC/Downloads/GroovePacker/src/actions/saveLogAction.js"],"names":["axios","SUBMIT_LOG","SCANPACK_BUG_REPORT","AsyncStorage","SubmitLog","data","dispatch","getItem","access_token","url","then","log","method","headers","app","res","type","payload","time","Date","status","removeItem","catch","error","ScanPackBugReport"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAsBC,mBAAtB;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AAC9B,SAAO,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACsBH,YAAY,CAACI,OAAb,CAAqB,cAArB,CADtB;;AAAA;AACCC,YAAAA,YADD;AAAA;AAAA,6CAEaL,YAAY,CAACI,OAAb,CAAqB,KAArB,CAFb;;AAAA;AAECE,YAAAA,GAFD;AAAA;AAAA,6CAGCN,YAAY,CAACI,OAAb,CAAqB,WAArB,EAAkCG,IAAlC,CAAuC,UAACC,GAAD,EAAS;AACpDX,cAAAA,KAAK,CAAC;AACAY,gBAAAA,MAAM,EAAE,MADR;AAEAH,gBAAAA,GAAG,EAAKA,GAAL,4BAFH;AAGAI,gBAAAA,OAAO,EAAE;AAAC,+CAA2BL;AAA5B,iBAHT;AAIAH,gBAAAA,IAAI,EAAE;AAAEA,kBAAAA,IAAI,EAAJA,IAAF;AAASS,kBAAAA,GAAG,EAAE;AAAd;AAJN,eAAD,CAAL,CAMKJ,IANL,CAMW,iBAAOK,GAAP;AAAA;AAAA;AAAA;AAAA;AACHT,wBAAAA,QAAQ,CAAC;AACHU,0BAAAA,IAAI,EAAEf,UADH;AAEHgB,0BAAAA,OAAO,EAAEF,GAAG,CAACV,IAFV;AAGHa,0BAAAA,IAAI,EAAE,IAAIC,IAAJ;AAHH,yBAAD,CAAR;;AADG,8BAMAJ,GAAG,CAACK,MAAJ,KAAe,GANf;AAAA;AAAA;AAAA;;AAAA;AAAA,yDAOKjB,YAAY,CAACkB,UAAb,CAAwB,WAAxB,CAPL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANX,EAgBKC,KAhBL,CAgBW,UAACC,KAAD,EAAW,CACjB,CAjBL;AAkBD,aAnBK,CAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAwBD;AACD,OAAO,SAASC,iBAAT,CAA2BnB,IAA3B,EAAiC;AACtC,SAAO,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACsBH,YAAY,CAACI,OAAb,CAAqB,cAArB,CADtB;;AAAA;AACCC,YAAAA,YADD;AAAA;AAAA,6CAEaL,YAAY,CAACI,OAAb,CAAqB,KAArB,CAFb;;AAAA;AAECE,YAAAA,GAFD;AAGLT,YAAAA,KAAK,CAAC;AACAY,cAAAA,MAAM,EAAE,MADR;AAEAH,cAAAA,GAAG,EAAKA,GAAL,yCAFH;AAGAI,cAAAA,OAAO,EAAE;AAAC,6CAA2BL;AAA5B,eAHT;AAIAH,cAAAA,IAAI,EAAEA;AAJN,aAAD,CAAL,CAMKK,IANL,CAMW,kBAAMK,GAAN;AAAA;AAAA;AAAA;AAAA;AACLT,sBAAAA,QAAQ,CAAC;AACCU,wBAAAA,IAAI,EAAEd,mBADP;AAECe,wBAAAA,OAAO,EAAE;AACPZ,0BAAAA,IAAI,EAAEU,GAAG,CAACV,IADH;AAEPa,0BAAAA,IAAI,EAAE,IAAIC,IAAJ;AAFC;AAFV,uBAAD,CAAR;;AADK,4BAQFJ,GAAG,CAACK,MAAJ,KAAe,GARb;AAAA;AAAA;AAAA;;AAAA;AAAA,uDASGjB,YAAY,CAACkB,UAAb,CAAwB,SAAxB,CATH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANX,EAkBKC,KAlBL,CAkBW,UAACC,KAAD,EAAW,CACjB,CAnBL;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAwBD","sourcesContent":["import axios from 'axios';\nimport { SUBMIT_LOG , SCANPACK_BUG_REPORT } from '../constants';\n// import { AsyncStorage } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport function SubmitLog(data) {\n  return async(dispatch) => {\n    const access_token = await AsyncStorage.getItem(\"access_token\")\n    const url = await AsyncStorage.getItem(\"url\")\n    await AsyncStorage.getItem('logsArray').then((log) => {\n      axios({\n            method: 'post',\n            url: `${url}/scan_pack/scan_pack_v2`,\n            headers: {'Authorization': `Bearer ${access_token}`},\n            data: { data , app: \"app\"}\n          })\n          .then( async (res) => {\n              dispatch({\n                    type: SUBMIT_LOG,\n                    payload: res.data,\n                    time: new Date()\n                  })\n              if(res.status === 200){\n                await AsyncStorage.removeItem(\"logsArray\")\n              }\n            })\n          .catch((error) => {\n          })\n    })\n  }\n}\nexport function ScanPackBugReport(data) {\n  return async(dispatch) => {\n    const access_token = await AsyncStorage.getItem(\"access_token\")\n    const url = await AsyncStorage.getItem(\"url\")\n    axios({\n          method: 'post',\n          url: `${url}/scan_pack/scan_pack_bug_report.json`,\n          headers: {'Authorization': `Bearer ${access_token}`},\n          data: data\n        })\n        .then( async(res) => {\n          dispatch({\n                    type: SCANPACK_BUG_REPORT,\n                    payload: {\n                      data: res.data,\n                      time: new Date()  \n                    }\n                  })\n          if(res.status === 200){\n            await AsyncStorage.removeItem(\"Logging\")\n          }\n        })\n        .catch((error) => {\n        })\n  }\n}"]},"metadata":{},"sourceType":"module"}